// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180817035754_Added_InvitedUser_Feald_to_OrganizationInvites")]
    partial class Added_InvitedUser_Feald_to_OrganizationInvites
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 81, Type = 1 },
                        new { Id = 102, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 51, Type = 0 },
                        new { Id = 103, DashboardId = 93, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 11, Type = 2 },
                        new { Id = 104, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 11, Type = 0 },
                        new { Id = 105, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 88, Type = 1 },
                        new { Id = 106, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source1", Threshold = 71, Type = 0 },
                        new { Id = 107, DashboardId = 95, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source1", Threshold = 74, Type = 1 },
                        new { Id = 108, DashboardId = 99, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source2", Threshold = 6, Type = 1 },
                        new { Id = 109, DashboardId = 100, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source1", Threshold = 1, Type = 2 },
                        new { Id = 110, DashboardId = 96, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source3", Threshold = 92, Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "c839906f-c52e-4e9d-be69-04cf21c2e0d2", Name = "ut", Type = 0 },
                        new { Id = 22, CreatedById = "9eb9c594-2868-45f5-b274-22c07010bd7e", Name = "voluptas", Type = 0 },
                        new { Id = 23, CreatedById = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", Name = "voluptatem", Type = 0 },
                        new { Id = 24, CreatedById = "c839906f-c52e-4e9d-be69-04cf21c2e0d2", Name = "dicta", Type = 0 },
                        new { Id = 25, CreatedById = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b", Name = "culpa", Type = 0 },
                        new { Id = 26, CreatedById = "4b69c911-186b-492a-8b68-82e31c5bbf2d", Name = "nihil", Type = 0 },
                        new { Id = 27, CreatedById = "43d2b90d-2f43-4d11-84e4-5ad540607f9d", Name = "quibusdam", Type = 0 },
                        new { Id = 28, CreatedById = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", Name = "odio", Type = 0 },
                        new { Id = 29, CreatedById = "e7e41f73-b8e2-4a58-aa95-5ddbde1f4b65", Name = "aliquid", Type = 0 },
                        new { Id = 30, CreatedById = "43d2b90d-2f43-4d11-84e4-5ad540607f9d", Name = "quidem", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 16, 17, 26, 42, 225, DateTimeKind.Local), InstanceId = 84, Title = "Title903" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 16, 22, 2, 58, 98, DateTimeKind.Local), InstanceId = 82, Title = "Title891" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 16, 11, 5, 48, 382, DateTimeKind.Local), InstanceId = 89, Title = "Title565" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 16, 12, 55, 38, 265, DateTimeKind.Local), InstanceId = 84, Title = "Title891" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 16, 21, 54, 16, 163, DateTimeKind.Local), InstanceId = 84, Title = "Title383" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 16, 16, 54, 17, 47, DateTimeKind.Local), InstanceId = 83, Title = "Title579" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 16, 9, 27, 4, 962, DateTimeKind.Local), InstanceId = 83, Title = "Title784" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 17, 3, 20, 58, 12, DateTimeKind.Local), InstanceId = 90, Title = "Title894" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 16, 11, 0, 41, 712, DateTimeKind.Local), InstanceId = 87, Title = "Title659" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 17, 1, 42, 21, 770, DateTimeKind.Local), InstanceId = 87, Title = "Title309" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 16, 7, 38, 39, 437, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Molestiae voluptatem alias sed eos.", UserId = "43d2b90d-2f43-4d11-84e4-5ad540607f9d", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 16, 16, 29, 2, 167, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Voluptas voluptatem repudiandae et.", UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 16, 17, 27, 21, 581, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Quis quia id non vitae provident sunt.", UserId = "6a497a8c-b9e9-4852-9d24-33c0a797cedb", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 16, 21, 43, 0, 407, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Nostrum eius ducimus adipisci fugit.", UserId = "732fb871-e25d-489f-8d02-9c8c23de0451", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 16, 21, 56, 43, 770, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Minus quo vel est pariatur.", UserId = "c839906f-c52e-4e9d-be69-04cf21c2e0d2", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 17, 4, 36, 42, 205, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Praesentium repellendus est earum corporis praesentium atque aut hic dolorem.", UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 16, 15, 19, 1, 96, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Quibusdam ex cumque error et pariatur facere dolor aperiam.", UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 16, 14, 32, 18, 643, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "In accusamus in modi.", UserId = "6a497a8c-b9e9-4852-9d24-33c0a797cedb", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 16, 19, 2, 11, 12, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Numquam dolorem architecto temporibus temporibus.", UserId = "4b69c911-186b-492a-8b68-82e31c5bbf2d", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 16, 14, 40, 38, 117, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Id error et quis quis vitae voluptatum itaque ea.", UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "ab:9a:21:dd:4d:b2", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Linux", Title = "Instance741" },
                        new { Id = 82, Address = "7e:46:14:5a:3a:c5", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 80, Platform = "Linux", Title = "Instance160" },
                        new { Id = 83, Address = "26:ab:b7:ed:c1:ac", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Linux", Title = "Instance765" },
                        new { Id = 84, Address = "01:00:9a:67:ba:6e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 71, Platform = "Linux", Title = "Instance570" },
                        new { Id = 85, Address = "24:b0:ef:95:0e:08", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 76, Platform = "Linux", Title = "Instance230" },
                        new { Id = 86, Address = "e2:79:c6:b8:5a:ff", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Windows", Title = "Instance170" },
                        new { Id = 87, Address = "d5:ec:3e:08:1d:7e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Windows", Title = "Instance107" },
                        new { Id = 88, Address = "bb:51:c1:f2:e1:76", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 78, Platform = "Linux", Title = "Instance625" },
                        new { Id = 89, Address = "1c:74:88:a9:3e:87", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 73, Platform = "Windows", Title = "Instance872" },
                        new { Id = 90, Address = "8b:d6:85:9a:fc:38", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 75, Platform = "Linux", Title = "Instance50" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 23, CreatedAt = new DateTime(2018, 8, 16, 7, 26, 55, 73, DateTimeKind.Local), Text = "Aut suscipit in culpa hic dolorem est id unde.", UserId = "6a497a8c-b9e9-4852-9d24-33c0a797cedb", WasRead = false },
                        new { Id = 32, ChatId = 21, CreatedAt = new DateTime(2018, 8, 17, 6, 1, 9, 232, DateTimeKind.Local), Text = "Ab distinctio voluptatem aut perspiciatis expedita nihil.", UserId = "4b69c911-186b-492a-8b68-82e31c5bbf2d", WasRead = true },
                        new { Id = 33, ChatId = 27, CreatedAt = new DateTime(2018, 8, 17, 1, 55, 16, 499, DateTimeKind.Local), Text = "Distinctio ut impedit nemo.", UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b", WasRead = true },
                        new { Id = 34, ChatId = 21, CreatedAt = new DateTime(2018, 8, 16, 17, 3, 5, 180, DateTimeKind.Local), Text = "Maiores consequatur aut quasi enim.", UserId = "732fb871-e25d-489f-8d02-9c8c23de0451", WasRead = true },
                        new { Id = 35, ChatId = 27, CreatedAt = new DateTime(2018, 8, 17, 5, 45, 18, 39, DateTimeKind.Local), Text = "Qui aliquid qui iure dignissimos dicta voluptatem explicabo.", UserId = "43d2b90d-2f43-4d11-84e4-5ad540607f9d", WasRead = false },
                        new { Id = 36, ChatId = 27, CreatedAt = new DateTime(2018, 8, 16, 12, 29, 32, 393, DateTimeKind.Local), Text = "Dolores repellendus dolorem maxime doloremque labore.", UserId = "732fb871-e25d-489f-8d02-9c8c23de0451", WasRead = false },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 8, 17, 1, 36, 57, 317, DateTimeKind.Local), Text = "Veritatis exercitationem magnam consequatur.", UserId = "c839906f-c52e-4e9d-be69-04cf21c2e0d2", WasRead = true },
                        new { Id = 38, ChatId = 30, CreatedAt = new DateTime(2018, 8, 17, 1, 41, 31, 615, DateTimeKind.Local), Text = "Ad ex vel recusandae sint.", UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", WasRead = true },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 8, 16, 18, 34, 38, 624, DateTimeKind.Local), Text = "Rerum rerum eligendi.", UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", WasRead = false },
                        new { Id = 40, ChatId = 23, CreatedAt = new DateTime(2018, 8, 16, 10, 56, 25, 31, DateTimeKind.Local), Text = "Unde autem at a veritatis mollitia atque quia.", UserId = "8fed02df-18af-4e74-afda-de89e5842632", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 17, 6, 40, 28, 242, DateTimeKind.Local), NotificationSettingId = 15, Text = "Quis aperiam impedit corrupti fugit temporibus ut animi est.", UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 16, 13, 42, 52, 477, DateTimeKind.Local), NotificationSettingId = 11, Text = "Aut blanditiis expedita eveniet aut molestias molestias aliquid quisquam.", UserId = "c839906f-c52e-4e9d-be69-04cf21c2e0d2" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 17, 2, 17, 51, 229, DateTimeKind.Local), NotificationSettingId = 14, Text = "Ut molestiae amet rerum.", UserId = "9eb9c594-2868-45f5-b274-22c07010bd7e" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 16, 14, 7, 52, 707, DateTimeKind.Local), NotificationSettingId = 16, Text = "Dolor in facere eveniet perspiciatis ad blanditiis incidunt vel.", UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 16, 21, 17, 59, 707, DateTimeKind.Local), NotificationSettingId = 19, Text = "Ratione quia iure enim et est voluptatem sint similique ipsam.", UserId = "6a497a8c-b9e9-4852-9d24-33c0a797cedb" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 16, 7, 47, 9, 248, DateTimeKind.Local), NotificationSettingId = 11, Text = "Aut velit necessitatibus illum iste beatae.", UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 17, 2, 10, 46, 772, DateTimeKind.Local), NotificationSettingId = 18, Text = "Repellat error ut illo sed laboriosam sit fuga voluptate nostrum.", UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 16, 21, 4, 54, 590, DateTimeKind.Local), NotificationSettingId = 19, Text = "Reprehenderit illum voluptatem ea est dicta aliquid.", UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 16, 18, 29, 20, 253, DateTimeKind.Local), NotificationSettingId = 15, Text = "Illum quos rerum quia sint reiciendis.", UserId = "43d2b90d-2f43-4d11-84e4-5ad540607f9d" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 16, 23, 50, 39, 326, DateTimeKind.Local), NotificationSettingId = 11, Text = "Ut quos ut qui tempora.", UserId = "732fb871-e25d-489f-8d02-9c8c23de0451" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "732fb871-e25d-489f-8d02-9c8c23de0451" },
                        new { Id = 12, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "e7e41f73-b8e2-4a58-aa95-5ddbde1f4b65" },
                        new { Id = 13, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "c839906f-c52e-4e9d-be69-04cf21c2e0d2" },
                        new { Id = 14, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493" },
                        new { Id = 15, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "9eb9c594-2868-45f5-b274-22c07010bd7e" },
                        new { Id = 16, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "8fed02df-18af-4e74-afda-de89e5842632" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "e7e41f73-b8e2-4a58-aa95-5ddbde1f4b65" },
                        new { Id = 18, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b" },
                        new { Id = 19, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "c839906f-c52e-4e9d-be69-04cf21c2e0d2" },
                        new { Id = 20, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "8fed02df-18af-4e74-afda-de89e5842632" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(208) 812-0540", CreatedByUserId = "e7e41f73-b8e2-4a58-aa95-5ddbde1f4b65", Description = "Quo fuga qui quis dignissimos beatae vel tempora perferendis facere.", Email = "Mason_Eichmann@hotmail.com", IsActive = true, Name = "Company186", ThemeId = 69, WebSite = "http://arden.biz" },
                        new { Id = 72, ContactNumber = "1-615-540-5496 x00023", CreatedByUserId = "732fb871-e25d-489f-8d02-9c8c23de0451", Description = "Doloribus quae aliquid necessitatibus consectetur esse id qui.", Email = "Enola.Lubowitz46@hotmail.com", IsActive = true, Name = "Company457", ThemeId = 61, WebSite = "http://austyn.name" },
                        new { Id = 73, ContactNumber = "725-997-4622 x56720", CreatedByUserId = "4b69c911-186b-492a-8b68-82e31c5bbf2d", Description = "", Email = "Maribel20@hotmail.com", IsActive = true, Name = "Company481", ThemeId = 64, WebSite = "https://virginia.org" },
                        new { Id = 74, ContactNumber = "844.582.0132 x61947", CreatedByUserId = "6a497a8c-b9e9-4852-9d24-33c0a797cedb", Description = "Inventore ducimus est debitis voluptatem. Et ea et delectus voluptatibus adipisci vitae. Illum sit est eum eveniet ipsum quaerat repudiandae delectus repellat. Nam aut dignissimos.", Email = "Noemie42@hotmail.com", IsActive = true, Name = "Company61", ThemeId = 70, WebSite = "http://willis.biz" },
                        new { Id = 75, ContactNumber = "(220) 993-3892 x187", CreatedByUserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", Description = "", Email = "Beaulah_Aufderhar@gmail.com", IsActive = true, Name = "Company277", ThemeId = 65, WebSite = "http://minerva.net" },
                        new { Id = 76, ContactNumber = "(456) 606-2969 x13764", CreatedByUserId = "8fed02df-18af-4e74-afda-de89e5842632", Description = "Atque qui quae officiis. Sint ipsam ut. Aperiam aperiam eaque id iure.", Email = "Jade_Koepp69@yahoo.com", IsActive = true, Name = "Company690", ThemeId = 64, WebSite = "https://anjali.org" },
                        new { Id = 77, ContactNumber = "285-725-1690 x2624", CreatedByUserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", Description = "Consectetur recusandae et ut corporis aperiam commodi fugit. Hic id minus. Non nihil labore sequi tempore.", Email = "Nicolette.Kessler83@yahoo.com", IsActive = true, Name = "Company428", ThemeId = 68, WebSite = "http://ramona.net" },
                        new { Id = 78, ContactNumber = "1-246-227-2303 x742", CreatedByUserId = "6a497a8c-b9e9-4852-9d24-33c0a797cedb", Description = "Suscipit quisquam corporis asperiores et omnis. Maiores molestiae est aspernatur reiciendis. Fugit facilis earum eum autem.", Email = "Aubree39@hotmail.com", IsActive = true, Name = "Company210", ThemeId = 68, WebSite = "http://edwardo.net" },
                        new { Id = 79, ContactNumber = "486.712.2970 x991", CreatedByUserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b", Description = "Eius dignissimos commodi aut quasi fugiat illo repellendus esse. Quo et error numquam. Officia molestiae harum excepturi distinctio.", Email = "Jamar.Kunde2@yahoo.com", IsActive = true, Name = "Company679", ThemeId = 63, WebSite = "http://jillian.com" },
                        new { Id = 80, ContactNumber = "1-250-269-7294 x5276", CreatedByUserId = "8fed02df-18af-4e74-afda-de89e5842632", Description = "Deleniti veritatis voluptatem et aut magnam. Laudantium perspiciatis ut voluptates qui aperiam ipsum quos provident sint. Et explicabo cumque omnis nemo facilis omnis in soluta.", Email = "Carmel61@yahoo.com", IsActive = true, Name = "Company977", ThemeId = 65, WebSite = "https://liliana.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 16, 20, 43, 51, 223, DateTimeKind.Local), FeedbackId = 42, Text = "Non iste dolores.", UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 16, 13, 36, 38, 563, DateTimeKind.Local), FeedbackId = 50, Text = "Et officia vitae distinctio ut ex id totam laborum.", UserId = "9eb9c594-2868-45f5-b274-22c07010bd7e" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 17, 1, 44, 27, 518, DateTimeKind.Local), FeedbackId = 44, Text = "Repellendus perferendis sit.", UserId = "732fb871-e25d-489f-8d02-9c8c23de0451" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 16, 17, 29, 2, 341, DateTimeKind.Local), FeedbackId = 49, Text = "Et molestiae non eaque perspiciatis.", UserId = "6a497a8c-b9e9-4852-9d24-33c0a797cedb" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 16, 9, 13, 42, 163, DateTimeKind.Local), FeedbackId = 50, Text = "Aperiam facilis expedita et cumque aut et et.", UserId = "e7e41f73-b8e2-4a58-aa95-5ddbde1f4b65" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 16, 18, 37, 34, 345, DateTimeKind.Local), FeedbackId = 50, Text = "Laborum eos numquam quibusdam assumenda illo ut.", UserId = "9eb9c594-2868-45f5-b274-22c07010bd7e" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 16, 8, 32, 45, 993, DateTimeKind.Local), FeedbackId = 49, Text = "Voluptas temporibus minus reiciendis distinctio ipsa fugit nihil.", UserId = "e7e41f73-b8e2-4a58-aa95-5ddbde1f4b65" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 16, 23, 28, 39, 183, DateTimeKind.Local), FeedbackId = 45, Text = "Beatae et aliquam consequatur tempore assumenda commodi.", UserId = "8fed02df-18af-4e74-afda-de89e5842632" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 17, 4, 5, 7, 305, DateTimeKind.Local), FeedbackId = 49, Text = "Qui veritatis quo et omnis molestias sequi voluptatem sed.", UserId = "4b69c911-186b-492a-8b68-82e31c5bbf2d" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 17, 0, 4, 24, 716, DateTimeKind.Local), FeedbackId = 49, Text = "Ut dolores qui laborum temporibus ad repellat facilis et.", UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme513" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme175" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme990" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme798" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme586" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme15" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme187" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme435" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme574" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme555" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "4b69c911-186b-492a-8b68-82e31c5bbf2d", CreatedAt = new DateTime(2018, 8, 16, 22, 57, 26, 590, DateTimeKind.Local), DisplayName = "Aidan", Email = "Foster_McClure81@hotmail.com", FirstName = "Hosea", IsActive = true, LastName = "Schimmel", RoleId = 1 },
                        new { Id = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", CreatedAt = new DateTime(2018, 8, 16, 10, 21, 23, 118, DateTimeKind.Local), DisplayName = "Augustus", Email = "Joanne24@gmail.com", FirstName = "Cyril", IsActive = true, LastName = "Cassin", RoleId = 1 },
                        new { Id = "43d2b90d-2f43-4d11-84e4-5ad540607f9d", CreatedAt = new DateTime(2018, 8, 17, 6, 1, 50, 5, DateTimeKind.Local), DisplayName = "Abe", Email = "Juliana99@gmail.com", FirstName = "Hortense", IsActive = true, LastName = "Zieme", RoleId = 2 },
                        new { Id = "c839906f-c52e-4e9d-be69-04cf21c2e0d2", CreatedAt = new DateTime(2018, 8, 16, 22, 36, 28, 699, DateTimeKind.Local), DisplayName = "Ona", Email = "Isabel.Turcotte18@gmail.com", FirstName = "Lenny", IsActive = true, LastName = "Blick", RoleId = 1 },
                        new { Id = "6a497a8c-b9e9-4852-9d24-33c0a797cedb", CreatedAt = new DateTime(2018, 8, 17, 1, 40, 41, 205, DateTimeKind.Local), DisplayName = "Winston", Email = "Dangelo.Considine@yahoo.com", FirstName = "Katheryn", IsActive = true, LastName = "Torphy", RoleId = 2 },
                        new { Id = "9eb9c594-2868-45f5-b274-22c07010bd7e", CreatedAt = new DateTime(2018, 8, 16, 23, 16, 29, 811, DateTimeKind.Local), DisplayName = "Juston", Email = "Philip_Armstrong@gmail.com", FirstName = "Rowena", IsActive = true, LastName = "Wilderman", RoleId = 2 },
                        new { Id = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b", CreatedAt = new DateTime(2018, 8, 17, 3, 29, 7, 103, DateTimeKind.Local), DisplayName = "Marcelina", Email = "Brooks_Heller60@hotmail.com", FirstName = "Sabina", IsActive = true, LastName = "Russel", RoleId = 2 },
                        new { Id = "732fb871-e25d-489f-8d02-9c8c23de0451", CreatedAt = new DateTime(2018, 8, 16, 10, 55, 23, 461, DateTimeKind.Local), DisplayName = "Zion", Email = "Bernice.Auer11@hotmail.com", FirstName = "Anjali", IsActive = true, LastName = "Lang", RoleId = 2 },
                        new { Id = "8fed02df-18af-4e74-afda-de89e5842632", CreatedAt = new DateTime(2018, 8, 17, 3, 15, 21, 432, DateTimeKind.Local), DisplayName = "Nikita", Email = "Declan_Ebert@gmail.com", FirstName = "Rebeka", IsActive = true, LastName = "Trantow", RoleId = 1 },
                        new { Id = "e7e41f73-b8e2-4a58-aa95-5ddbde1f4b65", CreatedAt = new DateTime(2018, 8, 17, 0, 39, 50, 522, DateTimeKind.Local), DisplayName = "Ceasar", Email = "Daisha_Franecki@hotmail.com", FirstName = "Sabryna", IsActive = true, LastName = "Quitzon", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "4b69c911-186b-492a-8b68-82e31c5bbf2d", OrganizationId = 76 },
                        new { UserId = "d3fabbd8-28a1-4b8f-a27f-5892bd5e0493", OrganizationId = 73 },
                        new { UserId = "43d2b90d-2f43-4d11-84e4-5ad540607f9d", OrganizationId = 74 },
                        new { UserId = "c839906f-c52e-4e9d-be69-04cf21c2e0d2", OrganizationId = 76 },
                        new { UserId = "6a497a8c-b9e9-4852-9d24-33c0a797cedb", OrganizationId = 73 },
                        new { UserId = "9eb9c594-2868-45f5-b274-22c07010bd7e", OrganizationId = 74 },
                        new { UserId = "aca48c6d-160e-4ff8-b47c-9b9a2feded4b", OrganizationId = 77 },
                        new { UserId = "732fb871-e25d-489f-8d02-9c8c23de0451", OrganizationId = 77 },
                        new { UserId = "8fed02df-18af-4e74-afda-de89e5842632", OrganizationId = 76 },
                        new { UserId = "e7e41f73-b8e2-4a58-aa95-5ddbde1f4b65", OrganizationId = 71 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
