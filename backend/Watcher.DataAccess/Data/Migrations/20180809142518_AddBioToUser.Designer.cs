// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180809142518_AddBioToUser")]
    partial class AddBioToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source2", Threshold = 49, Type = 0 },
                        new { Id = 102, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 49, Type = 2 },
                        new { Id = 103, DashboardId = 96, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 31, Type = 1 },
                        new { Id = 104, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source3", Threshold = 5, Type = 1 },
                        new { Id = 105, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 7, Type = 0 },
                        new { Id = 106, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 27, Type = 0 },
                        new { Id = 107, DashboardId = 96, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source2", Threshold = 91, Type = 1 },
                        new { Id = 108, DashboardId = 96, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source2", Threshold = 95, Type = 2 },
                        new { Id = 109, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 78, Type = 1 },
                        new { Id = 110, DashboardId = 97, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 65, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "9c898d08-e70f-4352-b97e-3d03be59d0fb", Name = "atque", Type = 0 },
                        new { Id = 22, CreatedById = "b57a563a-c110-4737-9061-4b0e78d5cb96", Name = "ut", Type = 0 },
                        new { Id = 23, CreatedById = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8", Name = "enim", Type = 0 },
                        new { Id = 24, CreatedById = "de7a7411-8815-49d4-999e-ce38ab1f73ed", Name = "nihil", Type = 0 },
                        new { Id = 25, CreatedById = "3691f844-d30a-4664-a038-8fabe1113996", Name = "error", Type = 0 },
                        new { Id = 26, CreatedById = "9c898d08-e70f-4352-b97e-3d03be59d0fb", Name = "est", Type = 0 },
                        new { Id = 27, CreatedById = "7aaebdba-ff37-43f7-ab90-98245d4c123e", Name = "voluptatem", Type = 0 },
                        new { Id = 28, CreatedById = "7aaebdba-ff37-43f7-ab90-98245d4c123e", Name = "ut", Type = 0 },
                        new { Id = 29, CreatedById = "9c898d08-e70f-4352-b97e-3d03be59d0fb", Name = "quidem", Type = 0 },
                        new { Id = 30, CreatedById = "3691f844-d30a-4664-a038-8fabe1113996", Name = "ut", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 9, 3, 35, 2, 933, DateTimeKind.Local), InstanceId = 85, Title = "Title653" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 9, 17, 12, 25, 951, DateTimeKind.Local), InstanceId = 83, Title = "Title822" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 9, 4, 1, 3, 28, DateTimeKind.Local), InstanceId = 87, Title = "Title545" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 9, 15, 16, 57, 666, DateTimeKind.Local), InstanceId = 81, Title = "Title655" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 9, 12, 57, 4, 99, DateTimeKind.Local), InstanceId = 86, Title = "Title393" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 9, 14, 10, 46, 82, DateTimeKind.Local), InstanceId = 81, Title = "Title533" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 9, 0, 22, 33, 411, DateTimeKind.Local), InstanceId = 90, Title = "Title717" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 9, 15, 51, 0, 732, DateTimeKind.Local), InstanceId = 82, Title = "Title853" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 9, 5, 51, 45, 863, DateTimeKind.Local), InstanceId = 83, Title = "Title715" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 9, 8, 45, 9, 253, DateTimeKind.Local), InstanceId = 90, Title = "Title312" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 9, 14, 49, 53, 21, DateTimeKind.Local), Text = "Optio consequatur et qui vitae rerum sunt nemo consequatur itaque.", UserId = "3691f844-d30a-4664-a038-8fabe1113996" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 8, 21, 23, 1, 272, DateTimeKind.Local), Text = "Eum nihil et.", UserId = "de7a7411-8815-49d4-999e-ce38ab1f73ed" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 8, 18, 14, 2, 447, DateTimeKind.Local), Text = "Sint ut nam occaecati doloremque molestiae soluta sed beatae.", UserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 9, 12, 4, 32, 575, DateTimeKind.Local), Text = "Modi quam veritatis.", UserId = "3691f844-d30a-4664-a038-8fabe1113996" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 8, 22, 51, 39, 728, DateTimeKind.Local), Text = "Nihil voluptas at labore qui dolorem.", UserId = "fc301d1b-121f-4a9f-8810-15ce0b34cf91" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 9, 9, 5, 34, 272, DateTimeKind.Local), Text = "Voluptatem facere quia molestiae non repellendus impedit odit.", UserId = "df4c167f-7d0e-43c3-a0ba-45da6a53a13d" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 9, 6, 50, 0, 544, DateTimeKind.Local), Text = "Quo accusantium ea occaecati aut nisi.", UserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 9, 5, 29, 4, 754, DateTimeKind.Local), Text = "Eos delectus nesciunt eos doloribus magni nisi maiores soluta vel.", UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 9, 0, 15, 34, 882, DateTimeKind.Local), Text = "Est non commodi officiis ut.", UserId = "3691f844-d30a-4664-a038-8fabe1113996" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 9, 9, 26, 39, 262, DateTimeKind.Local), Text = "Ipsam quo consectetur autem est soluta commodi.", UserId = "3691f844-d30a-4664-a038-8fabe1113996" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "ea:49:e1:5c:4b:20", OrganizationId = 72, Platform = "Linux" },
                        new { Id = 82, Address = "24:32:49:71:87:f0", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 83, Address = "4e:ac:84:13:b9:28", OrganizationId = 79, Platform = "Windows" },
                        new { Id = 84, Address = "3a:61:3d:99:e4:ca", OrganizationId = 77, Platform = "Linux" },
                        new { Id = 85, Address = "36:f7:51:0f:cd:a8", OrganizationId = 71, Platform = "Linux" },
                        new { Id = 86, Address = "eb:e4:89:20:2a:93", OrganizationId = 77, Platform = "Linux" },
                        new { Id = 87, Address = "28:11:5b:a1:69:aa", OrganizationId = 79, Platform = "Linux" },
                        new { Id = 88, Address = "70:26:22:e9:e3:86", OrganizationId = 72, Platform = "Linux" },
                        new { Id = 89, Address = "8e:a2:3a:8f:9e:70", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 90, Address = "ab:8e:28:d4:9e:b8", OrganizationId = 76, Platform = "Linux" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 24, CreatedAt = new DateTime(2018, 8, 9, 3, 51, 40, 70, DateTimeKind.Local), Text = "Quod maiores ut minus quia ipsum velit consequuntur omnis.", UserId = "df4c167f-7d0e-43c3-a0ba-45da6a53a13d", WasRead = false },
                        new { Id = 32, ChatId = 29, CreatedAt = new DateTime(2018, 8, 9, 3, 9, 0, 546, DateTimeKind.Local), Text = "Deserunt et eius a sit sed et.", UserId = "c9c58051-889f-473c-a99d-05b7ec31287b", WasRead = false },
                        new { Id = 33, ChatId = 30, CreatedAt = new DateTime(2018, 8, 8, 23, 26, 50, 126, DateTimeKind.Local), Text = "Laborum occaecati qui qui aut.", UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb", WasRead = true },
                        new { Id = 34, ChatId = 21, CreatedAt = new DateTime(2018, 8, 9, 7, 10, 39, 350, DateTimeKind.Local), Text = "Vel facere veritatis repellendus molestias ipsa perferendis optio.", UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb", WasRead = true },
                        new { Id = 35, ChatId = 29, CreatedAt = new DateTime(2018, 8, 9, 13, 17, 29, 265, DateTimeKind.Local), Text = "Quisquam esse consequatur occaecati consequatur voluptatibus temporibus reprehenderit.", UserId = "c9c58051-889f-473c-a99d-05b7ec31287b", WasRead = true },
                        new { Id = 36, ChatId = 29, CreatedAt = new DateTime(2018, 8, 9, 6, 12, 14, 686, DateTimeKind.Local), Text = "Tempore sequi odio suscipit animi eaque at officiis.", UserId = "3691f844-d30a-4664-a038-8fabe1113996", WasRead = true },
                        new { Id = 37, ChatId = 24, CreatedAt = new DateTime(2018, 8, 8, 17, 57, 2, 574, DateTimeKind.Local), Text = "Qui itaque eveniet quibusdam dolores suscipit pariatur debitis.", UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb", WasRead = false },
                        new { Id = 38, ChatId = 23, CreatedAt = new DateTime(2018, 8, 8, 20, 50, 58, 765, DateTimeKind.Local), Text = "Asperiores a voluptas magnam culpa velit tempora eum.", UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb", WasRead = true },
                        new { Id = 39, ChatId = 24, CreatedAt = new DateTime(2018, 8, 9, 5, 37, 15, 518, DateTimeKind.Local), Text = "Ut repudiandae assumenda ducimus hic sint quis enim nesciunt.", UserId = "df4c167f-7d0e-43c3-a0ba-45da6a53a13d", WasRead = false },
                        new { Id = 40, ChatId = 26, CreatedAt = new DateTime(2018, 8, 8, 19, 58, 14, 465, DateTimeKind.Local), Text = "Impedit et earum dolor eos et vero.", UserId = "df4c167f-7d0e-43c3-a0ba-45da6a53a13d", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 8, 19, 44, 8, 764, DateTimeKind.Local), NotificationSettingId = 19, Text = "Officiis dicta quisquam minus blanditiis est neque magni rerum est.", UserId = "c9c58051-889f-473c-a99d-05b7ec31287b" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 9, 13, 8, 9, 229, DateTimeKind.Local), NotificationSettingId = 20, Text = "Eos tempore accusantium nostrum veritatis impedit nisi excepturi et.", UserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 9, 9, 14, 34, 779, DateTimeKind.Local), NotificationSettingId = 17, Text = "Architecto cupiditate qui aut neque.", UserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 9, 1, 22, 2, 212, DateTimeKind.Local), NotificationSettingId = 18, Text = "Et harum nostrum ipsum perspiciatis iusto.", UserId = "c9c58051-889f-473c-a99d-05b7ec31287b" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 8, 18, 4, 30, 750, DateTimeKind.Local), NotificationSettingId = 15, Text = "Sed consectetur illo dolorem.", UserId = "7aaebdba-ff37-43f7-ab90-98245d4c123e" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 9, 2, 7, 43, 86, DateTimeKind.Local), NotificationSettingId = 13, Text = "Error ea eius perspiciatis facere quas iusto dicta id quod.", UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 9, 9, 10, 38, 139, DateTimeKind.Local), NotificationSettingId = 18, Text = "Neque facilis sit reprehenderit repellat saepe dolorem voluptates nulla.", UserId = "b57a563a-c110-4737-9061-4b0e78d5cb96" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 9, 7, 37, 36, 397, DateTimeKind.Local), NotificationSettingId = 13, Text = "Ratione voluptatem optio ipsum et quod.", UserId = "b57a563a-c110-4737-9061-4b0e78d5cb96" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 8, 21, 30, 59, 130, DateTimeKind.Local), NotificationSettingId = 19, Text = "Aut debitis temporibus minus blanditiis.", UserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 9, 7, 36, 20, 350, DateTimeKind.Local), NotificationSettingId = 16, Text = "Accusantium nihil accusantium.", UserId = "3df70d4c-67de-460c-9a23-fe81f55a5d4d" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "de7a7411-8815-49d4-999e-ce38ab1f73ed" },
                        new { Id = 12, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "b57a563a-c110-4737-9061-4b0e78d5cb96" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "c9c58051-889f-473c-a99d-05b7ec31287b" },
                        new { Id = 14, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "b57a563a-c110-4737-9061-4b0e78d5cb96" },
                        new { Id = 15, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8" },
                        new { Id = 16, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "3df70d4c-67de-460c-9a23-fe81f55a5d4d" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "3691f844-d30a-4664-a038-8fabe1113996" },
                        new { Id = 18, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "3df70d4c-67de-460c-9a23-fe81f55a5d4d" },
                        new { Id = 19, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb" },
                        new { Id = 20, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(802) 968-5528", CreatedByUserId = "de7a7411-8815-49d4-999e-ce38ab1f73ed", Description = "Voluptas pariatur et sit et id quam et accusantium nemo. Cumque et in perspiciatis. Similique eum eligendi neque est ducimus.", Email = "Cade_Maggio26@gmail.com", IsActive = true, Name = "Company863", ThemeId = 66, WebSite = "http://geovany.com" },
                        new { Id = 72, ContactNumber = "1-736-969-1247", CreatedByUserId = "7aaebdba-ff37-43f7-ab90-98245d4c123e", Description = "Quia corporis eos delectus pariatur consequuntur culpa amet.", Email = "Marquise72@gmail.com", IsActive = true, Name = "Company27", ThemeId = 67, WebSite = "http://mathias.biz" },
                        new { Id = 73, ContactNumber = "(827) 501-5177", CreatedByUserId = "b57a563a-c110-4737-9061-4b0e78d5cb96", Description = "Inventore eum maiores dicta debitis. Fugit fugit voluptates veritatis sint doloremque ut amet tempora reprehenderit. Sint optio aliquid voluptatem fugit.", Email = "Janie_Reynolds57@hotmail.com", IsActive = true, Name = "Company402", ThemeId = 67, WebSite = "http://adeline.biz" },
                        new { Id = 74, ContactNumber = "487-818-2179 x288", CreatedByUserId = "c9c58051-889f-473c-a99d-05b7ec31287b", Description = "Aut repellendus accusantium enim. Earum repudiandae laboriosam aliquid est dolorem minus molestias eligendi aut. Iure quam est debitis culpa voluptate numquam provident blanditiis. Recusandae cumque nam.", Email = "General94@gmail.com", IsActive = true, Name = "Company733", ThemeId = 63, WebSite = "https://lucinda.info" },
                        new { Id = 75, ContactNumber = "(631) 964-6184 x006", CreatedByUserId = "3df70d4c-67de-460c-9a23-fe81f55a5d4d", Description = "Dolores at qui aut numquam tempore dolorem. Officia voluptas explicabo ex rerum sit inventore.", Email = "Ethel.Cummerata@yahoo.com", IsActive = true, Name = "Company238", ThemeId = 64, WebSite = "https://janis.info" },
                        new { Id = 76, ContactNumber = "1-838-385-1474 x2774", CreatedByUserId = "3691f844-d30a-4664-a038-8fabe1113996", Description = "Animi dolores porro sapiente omnis ut omnis expedita et. Minima corporis natus in similique quia voluptatem. Distinctio molestiae perferendis.", Email = "Edna42@hotmail.com", IsActive = true, Name = "Company439", ThemeId = 65, WebSite = "http://alisa.name" },
                        new { Id = 77, ContactNumber = "(835) 493-3632 x389", CreatedByUserId = "de7a7411-8815-49d4-999e-ce38ab1f73ed", Description = "Ab est animi voluptas quia qui enim facilis quis earum.", Email = "Carlee30@yahoo.com", IsActive = true, Name = "Company345", ThemeId = 64, WebSite = "http://salvador.info" },
                        new { Id = 78, ContactNumber = "439.220.1689", CreatedByUserId = "fc301d1b-121f-4a9f-8810-15ce0b34cf91", Description = "", Email = "Hoyt.Jerde57@gmail.com", IsActive = true, Name = "Company937", ThemeId = 66, WebSite = "http://royal.name" },
                        new { Id = 79, ContactNumber = "1-898-976-1044", CreatedByUserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8", Description = "Voluptas esse ut omnis excepturi iste.", Email = "Johnson_Okuneva77@yahoo.com", IsActive = true, Name = "Company100", ThemeId = 63, WebSite = "https://isaac.biz" },
                        new { Id = 80, ContactNumber = "683-311-8039 x616", CreatedByUserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8", Description = "Amet et est voluptas. Commodi blanditiis earum qui a. Ut aliquid nobis sit exercitationem dicta ab. Soluta quia blanditiis sit tempora animi distinctio rem nam corporis.", Email = "Nicholas60@gmail.com", IsActive = true, Name = "Company530", ThemeId = 68, WebSite = "https://wallace.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 9, 15, 52, 10, 242, DateTimeKind.Local), FeedbackId = 41, Text = "Est at aut autem sit mollitia.", UserId = "b57a563a-c110-4737-9061-4b0e78d5cb96" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 9, 11, 19, 26, 649, DateTimeKind.Local), FeedbackId = 42, Text = "Est molestiae sed provident quod quas.", UserId = "3df70d4c-67de-460c-9a23-fe81f55a5d4d" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 9, 4, 15, 42, 644, DateTimeKind.Local), FeedbackId = 50, Text = "Et est nobis autem.", UserId = "3691f844-d30a-4664-a038-8fabe1113996" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 9, 7, 11, 39, 585, DateTimeKind.Local), FeedbackId = 49, Text = "Eum ducimus voluptatibus et qui.", UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 8, 22, 35, 48, 546, DateTimeKind.Local), FeedbackId = 42, Text = "Reiciendis ut assumenda consequatur aut quidem quibusdam.", UserId = "3df70d4c-67de-460c-9a23-fe81f55a5d4d" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 9, 13, 17, 34, 763, DateTimeKind.Local), FeedbackId = 43, Text = "Illo aut molestiae corrupti dolor explicabo qui repellat.", UserId = "b57a563a-c110-4737-9061-4b0e78d5cb96" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 8, 18, 2, 51, 806, DateTimeKind.Local), FeedbackId = 46, Text = "Et porro illo harum blanditiis architecto aut aut omnis at.", UserId = "3691f844-d30a-4664-a038-8fabe1113996" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 9, 15, 38, 25, 3, DateTimeKind.Local), FeedbackId = 43, Text = "Quia cumque sunt rerum deserunt distinctio.", UserId = "7aaebdba-ff37-43f7-ab90-98245d4c123e" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 8, 22, 53, 52, 444, DateTimeKind.Local), FeedbackId = 41, Text = "Voluptatem dolores rem ea voluptas.", UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 9, 15, 43, 48, 219, DateTimeKind.Local), FeedbackId = 43, Text = "Quam qui sunt quae alias nisi impedit repudiandae.", UserId = "3df70d4c-67de-460c-9a23-fe81f55a5d4d" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme130" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme768" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme839" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme425" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme600" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme134" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme239" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme544" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme411" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme537" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<int>("RoleId");

                    b.Property<string>("SecondName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "df4c167f-7d0e-43c3-a0ba-45da6a53a13d", CreatedAt = new DateTime(2018, 8, 9, 6, 18, 9, 850, DateTimeKind.Local), DisplayName = "Norberto", Email = "Jesse.Ullrich15@gmail.com", FirstName = "Layla", IsActive = true, RoleId = 2, SecondName = "Pagac" },
                        new { Id = "de7a7411-8815-49d4-999e-ce38ab1f73ed", CreatedAt = new DateTime(2018, 8, 9, 11, 54, 5, 510, DateTimeKind.Local), DisplayName = "Gerda", Email = "Demarco_Torphy@yahoo.com", FirstName = "Princess", IsActive = true, RoleId = 1, SecondName = "Roob" },
                        new { Id = "3691f844-d30a-4664-a038-8fabe1113996", CreatedAt = new DateTime(2018, 8, 9, 7, 4, 18, 605, DateTimeKind.Local), DisplayName = "Jensen", Email = "Felicity_Hackett47@hotmail.com", FirstName = "Briana", IsActive = true, RoleId = 2, SecondName = "Gorczany" },
                        new { Id = "7aaebdba-ff37-43f7-ab90-98245d4c123e", CreatedAt = new DateTime(2018, 8, 8, 18, 56, 4, 623, DateTimeKind.Local), DisplayName = "Sidney", Email = "Marvin_Nitzsche@yahoo.com", FirstName = "Janet", IsActive = true, RoleId = 2, SecondName = "Welch" },
                        new { Id = "b57a563a-c110-4737-9061-4b0e78d5cb96", CreatedAt = new DateTime(2018, 8, 8, 19, 41, 46, 799, DateTimeKind.Local), DisplayName = "Malinda", Email = "Kris_Bechtelar@hotmail.com", FirstName = "Nicola", IsActive = true, RoleId = 1, SecondName = "Rice" },
                        new { Id = "c9c58051-889f-473c-a99d-05b7ec31287b", CreatedAt = new DateTime(2018, 8, 9, 3, 5, 51, 232, DateTimeKind.Local), DisplayName = "Kay", Email = "Gretchen.Glover@yahoo.com", FirstName = "Aurelio", IsActive = true, RoleId = 1, SecondName = "Willms" },
                        new { Id = "fc301d1b-121f-4a9f-8810-15ce0b34cf91", CreatedAt = new DateTime(2018, 8, 9, 3, 57, 47, 376, DateTimeKind.Local), DisplayName = "Alexandrine", Email = "Esteban_Schroeder@hotmail.com", FirstName = "Krystina", IsActive = true, RoleId = 1, SecondName = "Parker" },
                        new { Id = "9c898d08-e70f-4352-b97e-3d03be59d0fb", CreatedAt = new DateTime(2018, 8, 9, 11, 12, 59, 767, DateTimeKind.Local), DisplayName = "Eldon", Email = "Gennaro_Lindgren77@yahoo.com", FirstName = "Carmela", IsActive = true, RoleId = 1, SecondName = "White" },
                        new { Id = "3df70d4c-67de-460c-9a23-fe81f55a5d4d", CreatedAt = new DateTime(2018, 8, 9, 7, 23, 34, 680, DateTimeKind.Local), DisplayName = "Candace", Email = "Joey.Hudson@yahoo.com", FirstName = "Antonietta", IsActive = true, RoleId = 1, SecondName = "Mante" },
                        new { Id = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8", CreatedAt = new DateTime(2018, 8, 9, 4, 5, 11, 538, DateTimeKind.Local), DisplayName = "Santino", Email = "Antonina_Prosacco76@gmail.com", FirstName = "Conrad", IsActive = true, RoleId = 2, SecondName = "Hilll" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "df4c167f-7d0e-43c3-a0ba-45da6a53a13d", OrganizationId = 74 },
                        new { UserId = "de7a7411-8815-49d4-999e-ce38ab1f73ed", OrganizationId = 75 },
                        new { UserId = "3691f844-d30a-4664-a038-8fabe1113996", OrganizationId = 77 },
                        new { UserId = "7aaebdba-ff37-43f7-ab90-98245d4c123e", OrganizationId = 76 },
                        new { UserId = "b57a563a-c110-4737-9061-4b0e78d5cb96", OrganizationId = 75 },
                        new { UserId = "c9c58051-889f-473c-a99d-05b7ec31287b", OrganizationId = 78 },
                        new { UserId = "fc301d1b-121f-4a9f-8810-15ce0b34cf91", OrganizationId = 72 },
                        new { UserId = "9c898d08-e70f-4352-b97e-3d03be59d0fb", OrganizationId = 71 },
                        new { UserId = "3df70d4c-67de-460c-9a23-fe81f55a5d4d", OrganizationId = 71 },
                        new { UserId = "d73c2d4c-a95e-4c33-b12a-2c08dd7d99b8", OrganizationId = 73 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Feedback", "Feedback")
                        .WithOne("Response")
                        .HasForeignKey("Watcher.DataAccess.Entities.Response", "FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
