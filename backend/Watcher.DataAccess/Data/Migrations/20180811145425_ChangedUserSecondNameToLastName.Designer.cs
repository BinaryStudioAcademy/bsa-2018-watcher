// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180811145425_ChangedUserSecondNameToLastName")]
    partial class ChangedUserSecondNameToLastName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 100, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 3, Type = 0 },
                        new { Id = 102, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 59, Type = 2 },
                        new { Id = 103, DashboardId = 93, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source3", Threshold = 0, Type = 0 },
                        new { Id = 104, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 35, Type = 1 },
                        new { Id = 105, DashboardId = 93, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 79, Type = 2 },
                        new { Id = 106, DashboardId = 100, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 66, Type = 0 },
                        new { Id = 107, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source3", Threshold = 82, Type = 2 },
                        new { Id = 108, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 81, Type = 1 },
                        new { Id = 109, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source2", Threshold = 23, Type = 1 },
                        new { Id = 110, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 9, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "eb854e5a-dd61-4063-b49e-e95e570488b5", Name = "deleniti", Type = 0 },
                        new { Id = 22, CreatedById = "eb854e5a-dd61-4063-b49e-e95e570488b5", Name = "fugit", Type = 0 },
                        new { Id = 23, CreatedById = "4c6b1005-0ade-482b-989a-53a21c60ec1b", Name = "eaque", Type = 0 },
                        new { Id = 24, CreatedById = "4c6b1005-0ade-482b-989a-53a21c60ec1b", Name = "sed", Type = 0 },
                        new { Id = 25, CreatedById = "4c6b1005-0ade-482b-989a-53a21c60ec1b", Name = "qui", Type = 0 },
                        new { Id = 26, CreatedById = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64", Name = "cupiditate", Type = 0 },
                        new { Id = 27, CreatedById = "067d80ea-b8ae-4b02-b94c-10408ba303f8", Name = "id", Type = 0 },
                        new { Id = 28, CreatedById = "067d80ea-b8ae-4b02-b94c-10408ba303f8", Name = "est", Type = 0 },
                        new { Id = 29, CreatedById = "493926fd-7139-4f2e-9ba3-ff8d886bd793", Name = "voluptatem", Type = 0 },
                        new { Id = 30, CreatedById = "eb854e5a-dd61-4063-b49e-e95e570488b5", Name = "quis", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 11, 15, 34, 13, 275, DateTimeKind.Local), InstanceId = 83, Title = "Title186" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 11, 14, 0, 1, 83, DateTimeKind.Local), InstanceId = 87, Title = "Title360" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 11, 10, 24, 58, 326, DateTimeKind.Local), InstanceId = 85, Title = "Title256" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 10, 18, 48, 8, 389, DateTimeKind.Local), InstanceId = 86, Title = "Title379" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 11, 16, 14, 4, 857, DateTimeKind.Local), InstanceId = 83, Title = "Title8" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 11, 0, 26, 45, 279, DateTimeKind.Local), InstanceId = 89, Title = "Title375" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 10, 18, 53, 34, 900, DateTimeKind.Local), InstanceId = 89, Title = "Title735" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 10, 20, 59, 44, 461, DateTimeKind.Local), InstanceId = 84, Title = "Title304" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 11, 14, 57, 50, 718, DateTimeKind.Local), InstanceId = 88, Title = "Title131" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 11, 12, 32, 10, 608, DateTimeKind.Local), InstanceId = 85, Title = "Title439" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 11, 1, 56, 57, 336, DateTimeKind.Local), Text = "Consectetur mollitia ullam mollitia ullam cupiditate ut ut maiores.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 11, 12, 49, 47, 222, DateTimeKind.Local), Text = "Commodi et ut maiores qui.", UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 11, 12, 29, 32, 243, DateTimeKind.Local), Text = "Sapiente quae rem facilis quisquam cupiditate magnam dolorum quis neque.", UserId = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 10, 19, 1, 51, 779, DateTimeKind.Local), Text = "Explicabo veniam quasi maiores quaerat.", UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 11, 7, 13, 54, 647, DateTimeKind.Local), Text = "Aperiam sit nobis eum molestiae qui id commodi voluptatibus.", UserId = "2425fb21-d140-40cc-99a3-6dbdb921748e" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 11, 14, 54, 39, 370, DateTimeKind.Local), Text = "Maxime consequatur qui.", UserId = "067d80ea-b8ae-4b02-b94c-10408ba303f8" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 10, 18, 53, 50, 266, DateTimeKind.Local), Text = "Est ad et provident qui odio in repellat ut.", UserId = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 11, 5, 34, 12, 373, DateTimeKind.Local), Text = "Rerum quaerat aut eos molestiae doloremque repellendus quaerat nostrum quibusdam.", UserId = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 10, 19, 13, 51, 639, DateTimeKind.Local), Text = "Quisquam voluptatem neque qui quis eos.", UserId = "d701dc50-7274-43b3-a28c-c0f6c0cbcecf" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 10, 22, 33, 45, 5, DateTimeKind.Local), Text = "Dolor corrupti dolore quas adipisci dolore.", UserId = "72c46d3f-7f13-42d4-b700-7d7ec31b68ea" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "1f:fd:b4:5d:f6:e9", OrganizationId = 77, Platform = "Windows" },
                        new { Id = 82, Address = "34:4e:34:a8:e6:ee", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 83, Address = "f9:c5:2f:11:f0:e3", OrganizationId = 72, Platform = "Windows" },
                        new { Id = 84, Address = "0e:34:5f:58:d6:4f", OrganizationId = 71, Platform = "Linux" },
                        new { Id = 85, Address = "f8:79:8c:38:47:1b", OrganizationId = 78, Platform = "Windows" },
                        new { Id = 86, Address = "47:bb:f7:82:7e:de", OrganizationId = 72, Platform = "Windows" },
                        new { Id = 87, Address = "12:7a:d3:db:6c:b6", OrganizationId = 71, Platform = "Windows" },
                        new { Id = 88, Address = "ce:e6:4f:c2:89:45", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 89, Address = "49:1e:af:6d:62:56", OrganizationId = 80, Platform = "Linux" },
                        new { Id = 90, Address = "0c:1e:ca:35:eb:ac", OrganizationId = 74, Platform = "Linux" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 28, CreatedAt = new DateTime(2018, 8, 11, 3, 16, 41, 589, DateTimeKind.Local), Text = "Ullam consequatur voluptatum dicta sed vel a molestias numquam.", UserId = "eb854e5a-dd61-4063-b49e-e95e570488b5", WasRead = false },
                        new { Id = 32, ChatId = 24, CreatedAt = new DateTime(2018, 8, 10, 21, 7, 17, 125, DateTimeKind.Local), Text = "Neque quo vero cum dolorum qui quasi.", UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793", WasRead = false },
                        new { Id = 33, ChatId = 22, CreatedAt = new DateTime(2018, 8, 10, 23, 0, 5, 274, DateTimeKind.Local), Text = "Sunt porro molestiae harum veritatis voluptas.", UserId = "eb854e5a-dd61-4063-b49e-e95e570488b5", WasRead = true },
                        new { Id = 34, ChatId = 21, CreatedAt = new DateTime(2018, 8, 11, 0, 51, 21, 26, DateTimeKind.Local), Text = "Itaque et ab in suscipit molestiae earum sint.", UserId = "72c46d3f-7f13-42d4-b700-7d7ec31b68ea", WasRead = false },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 8, 11, 12, 10, 52, 320, DateTimeKind.Local), Text = "Dolorem eaque libero sit quod ea qui nesciunt quia eligendi.", UserId = "e630c5ba-9e5d-4767-871a-c57544ff7092", WasRead = false },
                        new { Id = 36, ChatId = 21, CreatedAt = new DateTime(2018, 8, 11, 0, 12, 53, 718, DateTimeKind.Local), Text = "Voluptas libero labore esse nesciunt architecto sint facere similique.", UserId = "2425fb21-d140-40cc-99a3-6dbdb921748e", WasRead = true },
                        new { Id = 37, ChatId = 29, CreatedAt = new DateTime(2018, 8, 11, 15, 31, 36, 152, DateTimeKind.Local), Text = "Incidunt quo aut enim asperiores laudantium.", UserId = "eb854e5a-dd61-4063-b49e-e95e570488b5", WasRead = true },
                        new { Id = 38, ChatId = 25, CreatedAt = new DateTime(2018, 8, 10, 21, 7, 25, 371, DateTimeKind.Local), Text = "Eos deleniti et incidunt sit laboriosam facere nisi sunt.", UserId = "067d80ea-b8ae-4b02-b94c-10408ba303f8", WasRead = true },
                        new { Id = 39, ChatId = 23, CreatedAt = new DateTime(2018, 8, 11, 9, 28, 2, 453, DateTimeKind.Local), Text = "At magnam quis aspernatur itaque.", UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793", WasRead = true },
                        new { Id = 40, ChatId = 29, CreatedAt = new DateTime(2018, 8, 11, 15, 2, 43, 691, DateTimeKind.Local), Text = "Reiciendis impedit delectus.", UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 11, 17, 35, 57, 948, DateTimeKind.Local), NotificationSettingId = 17, Text = "Illum qui fugiat dolores est dolores adipisci aliquid.", UserId = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 11, 0, 50, 0, 237, DateTimeKind.Local), NotificationSettingId = 17, Text = "Est delectus harum quidem rerum consectetur.", UserId = "e630c5ba-9e5d-4767-871a-c57544ff7092" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 11, 4, 47, 18, 953, DateTimeKind.Local), NotificationSettingId = 18, Text = "Iste et vero.", UserId = "e630c5ba-9e5d-4767-871a-c57544ff7092" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 11, 15, 58, 15, 355, DateTimeKind.Local), NotificationSettingId = 19, Text = "Illum et sit quod quia.", UserId = "72c46d3f-7f13-42d4-b700-7d7ec31b68ea" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 11, 2, 19, 10, 36, DateTimeKind.Local), NotificationSettingId = 18, Text = "Quis cum enim sit.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 11, 1, 16, 20, 878, DateTimeKind.Local), NotificationSettingId = 20, Text = "Quod reprehenderit quaerat magni praesentium et quibusdam perspiciatis eaque.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 11, 4, 43, 24, 28, DateTimeKind.Local), NotificationSettingId = 12, Text = "Tempora sunt et sit adipisci animi dignissimos facilis.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 11, 17, 40, 46, 358, DateTimeKind.Local), NotificationSettingId = 12, Text = "Quam qui aperiam quaerat enim rem eligendi odit.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 11, 2, 4, 9, 725, DateTimeKind.Local), NotificationSettingId = 16, Text = "Sed ea placeat iure adipisci dolores iure.", UserId = "2425fb21-d140-40cc-99a3-6dbdb921748e" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 11, 11, 34, 20, 231, DateTimeKind.Local), NotificationSettingId = 13, Text = "Odit quo enim blanditiis.", UserId = "d701dc50-7274-43b3-a28c-c0f6c0cbcecf" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "eb854e5a-dd61-4063-b49e-e95e570488b5" },
                        new { Id = 12, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793" },
                        new { Id = 13, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793" },
                        new { Id = 14, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "d701dc50-7274-43b3-a28c-c0f6c0cbcecf" },
                        new { Id = 15, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "eb854e5a-dd61-4063-b49e-e95e570488b5" },
                        new { Id = 16, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "067d80ea-b8ae-4b02-b94c-10408ba303f8" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793" },
                        new { Id = 19, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "d701dc50-7274-43b3-a28c-c0f6c0cbcecf" },
                        new { Id = 20, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "eb854e5a-dd61-4063-b49e-e95e570488b5" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-641-327-4993 x304", CreatedByUserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b", Description = "Explicabo voluptas quod consequatur.", Email = "Vance.Mohr@gmail.com", IsActive = true, Name = "Company736", ThemeId = 65, WebSite = "https://hadley.name" },
                        new { Id = 72, ContactNumber = "(785) 264-5534 x240", CreatedByUserId = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64", Description = "Deleniti corporis et alias eaque tempore fugit officia. Quod veniam animi non qui. Aut non quis iste est sit nemo. Quia sit vel aliquam vitae deleniti facilis.", Email = "Reymundo_Monahan36@yahoo.com", IsActive = true, Name = "Company956", ThemeId = 69, WebSite = "http://avery.org" },
                        new { Id = 73, ContactNumber = "1-886-477-6004 x051", CreatedByUserId = "e630c5ba-9e5d-4767-871a-c57544ff7092", Description = "Tempore tempora quam doloremque aut rerum. Deleniti nulla est nam excepturi corporis fugit. Possimus magnam soluta assumenda omnis at.", Email = "Annabell90@gmail.com", IsActive = true, Name = "Company751", ThemeId = 62, WebSite = "https://josiah.info" },
                        new { Id = 74, ContactNumber = "(534) 738-2898", CreatedByUserId = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64", Description = "", Email = "Kellie66@hotmail.com", IsActive = true, Name = "Company490", ThemeId = 64, WebSite = "https://wilson.biz" },
                        new { Id = 75, ContactNumber = "1-703-411-1612 x67372", CreatedByUserId = "e630c5ba-9e5d-4767-871a-c57544ff7092", Description = "Reiciendis natus suscipit reprehenderit inventore dignissimos. Dolorum dolorum eum fugiat culpa quis laudantium. Rerum blanditiis assumenda explicabo vel. Est dolor qui esse architecto quia enim autem suscipit quasi.", Email = "Robert_Schuppe@hotmail.com", IsActive = true, Name = "Company965", ThemeId = 66, WebSite = "https://calista.com" },
                        new { Id = 76, ContactNumber = "487.241.9920", CreatedByUserId = "2425fb21-d140-40cc-99a3-6dbdb921748e", Description = "Dolor id reiciendis voluptatibus voluptatem. Dolorem quis omnis nemo illo.", Email = "Mckayla_Lesch@yahoo.com", IsActive = true, Name = "Company466", ThemeId = 69, WebSite = "http://maritza.name" },
                        new { Id = 77, ContactNumber = "1-486-440-3493", CreatedByUserId = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64", Description = "Iste cum provident. Vero labore deserunt maiores. Voluptates molestiae id. Alias aut a qui.", Email = "Bert30@hotmail.com", IsActive = true, Name = "Company684", ThemeId = 61, WebSite = "http://hilario.info" },
                        new { Id = 78, ContactNumber = "988.534.7149 x842", CreatedByUserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793", Description = "Fugit ducimus velit consectetur consequatur id.", Email = "Minnie.Wolf@yahoo.com", IsActive = true, Name = "Company351", ThemeId = 64, WebSite = "https://marquise.org" },
                        new { Id = 79, ContactNumber = "536.842.5705 x73353", CreatedByUserId = "72c46d3f-7f13-42d4-b700-7d7ec31b68ea", Description = "Dolores laborum at adipisci consectetur esse. Rem atque sequi quos voluptas mollitia recusandae qui vel reprehenderit. Magnam vitae est maxime sed sit maiores quia rerum modi.", Email = "Velma_Luettgen36@hotmail.com", IsActive = true, Name = "Company458", ThemeId = 66, WebSite = "https://abraham.info" },
                        new { Id = 80, ContactNumber = "(300) 995-5259 x516", CreatedByUserId = "067d80ea-b8ae-4b02-b94c-10408ba303f8", Description = "Quos libero non maiores rem nobis reiciendis saepe sequi. Vel optio cupiditate illo. Et id et et.", Email = "Stacey_Jaskolski@hotmail.com", IsActive = true, Name = "Company997", ThemeId = 68, WebSite = "https://dejon.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 11, 3, 20, 8, 79, DateTimeKind.Local), FeedbackId = 42, Text = "Omnis dicta maiores natus est quia.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 11, 14, 29, 10, 644, DateTimeKind.Local), FeedbackId = 42, Text = "Qui culpa reiciendis omnis ex.", UserId = "5f349ebd-7d15-4a97-a913-ab6b168e87a6" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 11, 16, 0, 3, 314, DateTimeKind.Local), FeedbackId = 49, Text = "Esse voluptatibus illum sit nam et.", UserId = "72c46d3f-7f13-42d4-b700-7d7ec31b68ea" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 11, 13, 44, 42, 812, DateTimeKind.Local), FeedbackId = 42, Text = "Quo sed qui eos suscipit id.", UserId = "72c46d3f-7f13-42d4-b700-7d7ec31b68ea" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 11, 0, 23, 18, 182, DateTimeKind.Local), FeedbackId = 44, Text = "Eaque reiciendis ea accusantium id recusandae et velit.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 11, 6, 23, 2, 973, DateTimeKind.Local), FeedbackId = 48, Text = "Consequuntur iure sit.", UserId = "2425fb21-d140-40cc-99a3-6dbdb921748e" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 11, 11, 15, 59, 234, DateTimeKind.Local), FeedbackId = 50, Text = "Inventore similique rerum porro praesentium.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 11, 4, 2, 49, 59, DateTimeKind.Local), FeedbackId = 48, Text = "Facilis voluptatem sit quod earum qui vel iusto.", UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 10, 21, 37, 34, 929, DateTimeKind.Local), FeedbackId = 48, Text = "Cumque debitis facere repellat veritatis maxime velit veritatis.", UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 10, 23, 53, 13, 777, DateTimeKind.Local), FeedbackId = 50, Text = "Vitae aut aspernatur qui quaerat earum.", UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme82" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme621" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme580" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme586" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme718" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme880" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme762" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme981" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme931" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme46" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "eb854e5a-dd61-4063-b49e-e95e570488b5", CreatedAt = new DateTime(2018, 8, 10, 20, 8, 20, 569, DateTimeKind.Local), DisplayName = "Walker", Email = "Oliver.Klein@yahoo.com", FirstName = "Lilla", IsActive = true, LastName = "Connelly", RoleId = 1 },
                        new { Id = "5f349ebd-7d15-4a97-a913-ab6b168e87a6", CreatedAt = new DateTime(2018, 8, 10, 19, 21, 54, 90, DateTimeKind.Local), DisplayName = "Amie", Email = "Lon87@hotmail.com", FirstName = "Zoila", IsActive = true, LastName = "Rippin", RoleId = 2 },
                        new { Id = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64", CreatedAt = new DateTime(2018, 8, 11, 5, 48, 39, 843, DateTimeKind.Local), DisplayName = "Rickey", Email = "Malvina.Baumbach@gmail.com", FirstName = "Ada", IsActive = true, LastName = "Feil", RoleId = 1 },
                        new { Id = "d701dc50-7274-43b3-a28c-c0f6c0cbcecf", CreatedAt = new DateTime(2018, 8, 10, 23, 31, 25, 853, DateTimeKind.Local), DisplayName = "Monroe", Email = "Kasey80@hotmail.com", FirstName = "Sage", IsActive = true, LastName = "Lehner", RoleId = 2 },
                        new { Id = "72c46d3f-7f13-42d4-b700-7d7ec31b68ea", CreatedAt = new DateTime(2018, 8, 11, 4, 11, 40, 631, DateTimeKind.Local), DisplayName = "Viva", Email = "Erik.Rolfson11@hotmail.com", FirstName = "Marcelo", IsActive = true, LastName = "Lebsack", RoleId = 1 },
                        new { Id = "e630c5ba-9e5d-4767-871a-c57544ff7092", CreatedAt = new DateTime(2018, 8, 10, 19, 7, 59, 989, DateTimeKind.Local), DisplayName = "Iva", Email = "Geraldine_Hackett72@hotmail.com", FirstName = "Alex", IsActive = true, LastName = "Kiehn", RoleId = 1 },
                        new { Id = "067d80ea-b8ae-4b02-b94c-10408ba303f8", CreatedAt = new DateTime(2018, 8, 11, 14, 59, 27, 3, DateTimeKind.Local), DisplayName = "Keara", Email = "Adelia80@yahoo.com", FirstName = "Maybell", IsActive = true, LastName = "Legros", RoleId = 1 },
                        new { Id = "493926fd-7139-4f2e-9ba3-ff8d886bd793", CreatedAt = new DateTime(2018, 8, 11, 16, 51, 47, 110, DateTimeKind.Local), DisplayName = "Stanton", Email = "Dominic_White26@yahoo.com", FirstName = "Bert", IsActive = true, LastName = "Keebler", RoleId = 1 },
                        new { Id = "4c6b1005-0ade-482b-989a-53a21c60ec1b", CreatedAt = new DateTime(2018, 8, 11, 5, 3, 13, 480, DateTimeKind.Local), DisplayName = "Riley", Email = "Drake52@gmail.com", FirstName = "Torey", IsActive = true, LastName = "D'Amore", RoleId = 1 },
                        new { Id = "2425fb21-d140-40cc-99a3-6dbdb921748e", CreatedAt = new DateTime(2018, 8, 11, 14, 1, 37, 872, DateTimeKind.Local), DisplayName = "Cooper", Email = "Ian_Hand43@hotmail.com", FirstName = "Alfreda", IsActive = true, LastName = "Macejkovic", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "eb854e5a-dd61-4063-b49e-e95e570488b5", OrganizationId = 72 },
                        new { UserId = "5f349ebd-7d15-4a97-a913-ab6b168e87a6", OrganizationId = 75 },
                        new { UserId = "c4c22b94-a1fc-43ad-99a6-5b346ebc4e64", OrganizationId = 72 },
                        new { UserId = "d701dc50-7274-43b3-a28c-c0f6c0cbcecf", OrganizationId = 74 },
                        new { UserId = "72c46d3f-7f13-42d4-b700-7d7ec31b68ea", OrganizationId = 71 },
                        new { UserId = "e630c5ba-9e5d-4767-871a-c57544ff7092", OrganizationId = 71 },
                        new { UserId = "067d80ea-b8ae-4b02-b94c-10408ba303f8", OrganizationId = 77 },
                        new { UserId = "493926fd-7139-4f2e-9ba3-ff8d886bd793", OrganizationId = 73 },
                        new { UserId = "4c6b1005-0ade-482b-989a-53a21c60ec1b", OrganizationId = 77 },
                        new { UserId = "2425fb21-d140-40cc-99a3-6dbdb921748e", OrganizationId = 72 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
