// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180815090625_AddedTitleForInstanceModel")]
    partial class AddedTitleForInstanceModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 93, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source1", Threshold = 48, Type = 1 },
                        new { Id = 102, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 11, Type = 1 },
                        new { Id = 103, DashboardId = 92, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 52, Type = 0 },
                        new { Id = 104, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 85, Type = 1 },
                        new { Id = 105, DashboardId = 94, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 60, Type = 1 },
                        new { Id = 106, DashboardId = 98, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source2", Threshold = 84, Type = 2 },
                        new { Id = 107, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 1, Type = 2 },
                        new { Id = 108, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 47, Type = 0 },
                        new { Id = 109, DashboardId = 95, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 48, Type = 2 },
                        new { Id = 110, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 49, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "b5ac7258-7629-4c76-a03f-230bc1010fd5", Name = "in", Type = 0 },
                        new { Id = 22, CreatedById = "14105d91-1320-41b1-9fc4-b92c647b725a", Name = "possimus", Type = 0 },
                        new { Id = 23, CreatedById = "a8980cbb-75d9-40f1-b402-6b407eed99a4", Name = "aut", Type = 0 },
                        new { Id = 24, CreatedById = "48052434-ab0c-4e5b-8ec2-56425365e387", Name = "eius", Type = 0 },
                        new { Id = 25, CreatedById = "3d4a1813-a2c9-4727-ba38-ecab1951235a", Name = "omnis", Type = 0 },
                        new { Id = 26, CreatedById = "48052434-ab0c-4e5b-8ec2-56425365e387", Name = "ut", Type = 0 },
                        new { Id = 27, CreatedById = "4d60b58f-974f-4da9-8cec-61bdf80b937b", Name = "itaque", Type = 0 },
                        new { Id = 28, CreatedById = "3d4a1813-a2c9-4727-ba38-ecab1951235a", Name = "neque", Type = 0 },
                        new { Id = 29, CreatedById = "4d60b58f-974f-4da9-8cec-61bdf80b937b", Name = "temporibus", Type = 0 },
                        new { Id = 30, CreatedById = "4d60b58f-974f-4da9-8cec-61bdf80b937b", Name = "est", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 15, 5, 57, 42, 235, DateTimeKind.Local), InstanceId = 89, Title = "Title919" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 14, 19, 58, 25, 876, DateTimeKind.Local), InstanceId = 87, Title = "Title929" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 14, 22, 53, 27, 643, DateTimeKind.Local), InstanceId = 85, Title = "Title8" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 14, 23, 51, 2, 570, DateTimeKind.Local), InstanceId = 81, Title = "Title0" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 15, 9, 39, 11, 937, DateTimeKind.Local), InstanceId = 90, Title = "Title751" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 14, 18, 26, 52, 255, DateTimeKind.Local), InstanceId = 81, Title = "Title486" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 15, 4, 4, 20, 879, DateTimeKind.Local), InstanceId = 89, Title = "Title278" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 14, 20, 21, 22, 69, DateTimeKind.Local), InstanceId = 87, Title = "Title135" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 14, 14, 27, 47, 518, DateTimeKind.Local), InstanceId = 82, Title = "Title482" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 15, 6, 39, 20, 596, DateTimeKind.Local), InstanceId = 83, Title = "Title675" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 14, 23, 45, 33, 750, DateTimeKind.Local), Text = "Illo illo reiciendis saepe culpa eos ut molestiae sunt enim.", UserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 15, 10, 41, 16, 323, DateTimeKind.Local), Text = "Et molestiae dignissimos consequatur molestias recusandae.", UserId = "a8980cbb-75d9-40f1-b402-6b407eed99a4" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 14, 21, 13, 30, 718, DateTimeKind.Local), Text = "Recusandae corrupti ab ut.", UserId = "3199fe3c-63e6-4f62-a0ad-d4f32497b0a2" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 14, 23, 54, 35, 361, DateTimeKind.Local), Text = "Blanditiis et ut temporibus velit et sunt culpa expedita dolor.", UserId = "3199fe3c-63e6-4f62-a0ad-d4f32497b0a2" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 15, 1, 14, 49, 838, DateTimeKind.Local), Text = "Ut cumque voluptatum porro.", UserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 14, 15, 5, 55, 294, DateTimeKind.Local), Text = "Corrupti ipsa sit consequatur voluptates eveniet.", UserId = "c6c22843-72fc-4836-9297-d2590ed79141" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 14, 20, 41, 38, 465, DateTimeKind.Local), Text = "Voluptas ut occaecati tempora maiores sed.", UserId = "c6c22843-72fc-4836-9297-d2590ed79141" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 14, 15, 49, 5, 465, DateTimeKind.Local), Text = "Ut sit suscipit eos aliquid sit nihil nihil.", UserId = "a659adfa-4f86-42a1-84ce-ace552bc4559" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 14, 16, 24, 8, 989, DateTimeKind.Local), Text = "Perferendis suscipit dolor aut.", UserId = "4d60b58f-974f-4da9-8cec-61bdf80b937b" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 15, 9, 53, 40, 551, DateTimeKind.Local), Text = "Dignissimos ut debitis corporis quod ut.", UserId = "b5ac7258-7629-4c76-a03f-230bc1010fd5" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "4d:9e:24:de:b9:c3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Windows", Title = "Instance750" },
                        new { Id = 82, Address = "72:47:79:8c:1e:7f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 73, Platform = "Windows", Title = "Instance167" },
                        new { Id = 83, Address = "c0:07:04:25:01:54", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 75, Platform = "Linux", Title = "Instance777" },
                        new { Id = 84, Address = "04:7c:40:3a:3e:72", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 72, Platform = "Windows", Title = "Instance478" },
                        new { Id = 85, Address = "3b:a6:35:ec:36:e3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 72, Platform = "Windows", Title = "Instance815" },
                        new { Id = 86, Address = "fc:ce:96:80:1a:46", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Windows", Title = "Instance343" },
                        new { Id = 87, Address = "4f:b3:f4:4a:f2:f5", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 71, Platform = "Linux", Title = "Instance865" },
                        new { Id = 88, Address = "51:fa:14:09:04:19", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Windows", Title = "Instance304" },
                        new { Id = 89, Address = "27:35:ca:77:e3:35", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Windows", Title = "Instance931" },
                        new { Id = 90, Address = "d8:2e:5d:6c:6d:88", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Linux", Title = "Instance127" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 25, CreatedAt = new DateTime(2018, 8, 15, 9, 31, 53, 987, DateTimeKind.Local), Text = "Eligendi dolorem hic aut qui et ut.", UserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a", WasRead = true },
                        new { Id = 32, ChatId = 23, CreatedAt = new DateTime(2018, 8, 15, 11, 42, 16, 937, DateTimeKind.Local), Text = "Dignissimos omnis dolores animi quia officiis perferendis tenetur repellat repudiandae.", UserId = "48052434-ab0c-4e5b-8ec2-56425365e387", WasRead = false },
                        new { Id = 33, ChatId = 28, CreatedAt = new DateTime(2018, 8, 14, 19, 7, 19, 751, DateTimeKind.Local), Text = "Dolorum dolorem suscipit laudantium quasi.", UserId = "48052434-ab0c-4e5b-8ec2-56425365e387", WasRead = false },
                        new { Id = 34, ChatId = 27, CreatedAt = new DateTime(2018, 8, 14, 18, 55, 49, 23, DateTimeKind.Local), Text = "Aut veniam velit cum ea dignissimos odit perferendis qui.", UserId = "14105d91-1320-41b1-9fc4-b92c647b725a", WasRead = true },
                        new { Id = 35, ChatId = 24, CreatedAt = new DateTime(2018, 8, 14, 12, 59, 23, 425, DateTimeKind.Local), Text = "Natus deserunt sint omnis dolor quos recusandae.", UserId = "14105d91-1320-41b1-9fc4-b92c647b725a", WasRead = false },
                        new { Id = 36, ChatId = 28, CreatedAt = new DateTime(2018, 8, 15, 10, 28, 26, 942, DateTimeKind.Local), Text = "Est sapiente blanditiis dolor.", UserId = "48052434-ab0c-4e5b-8ec2-56425365e387", WasRead = false },
                        new { Id = 37, ChatId = 26, CreatedAt = new DateTime(2018, 8, 15, 0, 48, 10, 536, DateTimeKind.Local), Text = "Deserunt id minima.", UserId = "a8980cbb-75d9-40f1-b402-6b407eed99a4", WasRead = false },
                        new { Id = 38, ChatId = 30, CreatedAt = new DateTime(2018, 8, 15, 8, 25, 5, 763, DateTimeKind.Local), Text = "Enim culpa tenetur modi quisquam et voluptatum.", UserId = "a659adfa-4f86-42a1-84ce-ace552bc4559", WasRead = true },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 8, 14, 20, 33, 43, 644, DateTimeKind.Local), Text = "Et voluptatem sunt possimus ipsum libero ratione natus unde.", UserId = "c6c22843-72fc-4836-9297-d2590ed79141", WasRead = false },
                        new { Id = 40, ChatId = 28, CreatedAt = new DateTime(2018, 8, 14, 19, 27, 3, 903, DateTimeKind.Local), Text = "Ut doloribus labore sint nemo sint non.", UserId = "14105d91-1320-41b1-9fc4-b92c647b725a", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 15, 7, 52, 0, 441, DateTimeKind.Local), NotificationSettingId = 19, Text = "Provident delectus itaque qui fugit.", UserId = "4d60b58f-974f-4da9-8cec-61bdf80b937b" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 14, 23, 13, 25, 364, DateTimeKind.Local), NotificationSettingId = 16, Text = "Alias doloribus atque similique illum temporibus aliquid.", UserId = "3199fe3c-63e6-4f62-a0ad-d4f32497b0a2" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 14, 23, 40, 11, 714, DateTimeKind.Local), NotificationSettingId = 11, Text = "Qui ea dolorem occaecati voluptates dolorem deserunt quia.", UserId = "4d60b58f-974f-4da9-8cec-61bdf80b937b" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 15, 11, 27, 36, 273, DateTimeKind.Local), NotificationSettingId = 14, Text = "Corporis facere laudantium pariatur iste nostrum aut exercitationem autem.", UserId = "1e156360-6f98-48ec-8e6f-627f64ecbbd0" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 15, 9, 2, 22, 643, DateTimeKind.Local), NotificationSettingId = 15, Text = "Asperiores aut animi officiis et nobis dicta illum facere sed.", UserId = "48052434-ab0c-4e5b-8ec2-56425365e387" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 15, 3, 33, 53, 714, DateTimeKind.Local), NotificationSettingId = 18, Text = "Nostrum qui ipsam ipsam perferendis ut sequi sit vel.", UserId = "14105d91-1320-41b1-9fc4-b92c647b725a" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 14, 19, 2, 25, 249, DateTimeKind.Local), NotificationSettingId = 17, Text = "Sint nemo eos sed.", UserId = "48052434-ab0c-4e5b-8ec2-56425365e387" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 15, 10, 51, 51, 602, DateTimeKind.Local), NotificationSettingId = 15, Text = "Quisquam asperiores corporis mollitia et rerum voluptatem omnis quidem suscipit.", UserId = "c6c22843-72fc-4836-9297-d2590ed79141" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 15, 5, 9, 18, 4, DateTimeKind.Local), NotificationSettingId = 20, Text = "Impedit voluptatum quo cum velit qui vel.", UserId = "a659adfa-4f86-42a1-84ce-ace552bc4559" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 14, 12, 6, 38, 260, DateTimeKind.Local), NotificationSettingId = 11, Text = "Odio similique molestias necessitatibus.", UserId = "4d60b58f-974f-4da9-8cec-61bdf80b937b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "48052434-ab0c-4e5b-8ec2-56425365e387" },
                        new { Id = 12, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "1e156360-6f98-48ec-8e6f-627f64ecbbd0" },
                        new { Id = 13, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "1e156360-6f98-48ec-8e6f-627f64ecbbd0" },
                        new { Id = 14, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a" },
                        new { Id = 15, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "a8980cbb-75d9-40f1-b402-6b407eed99a4" },
                        new { Id = 16, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "48052434-ab0c-4e5b-8ec2-56425365e387" },
                        new { Id = 17, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "b5ac7258-7629-4c76-a03f-230bc1010fd5" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "a659adfa-4f86-42a1-84ce-ace552bc4559" },
                        new { Id = 19, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "48052434-ab0c-4e5b-8ec2-56425365e387" },
                        new { Id = 20, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "a659adfa-4f86-42a1-84ce-ace552bc4559" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-985-995-3812 x8603", CreatedByUserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a", Description = "Minus voluptatem corrupti blanditiis repellendus labore voluptatem pariatur. Itaque non velit accusamus ut rerum possimus dolorum. Sit et ducimus ut atque. Debitis temporibus hic voluptates eum deserunt laborum distinctio quia.", Email = "Wilmer70@yahoo.com", IsActive = true, Name = "Company279", ThemeId = 70, WebSite = "http://billy.biz" },
                        new { Id = 72, ContactNumber = "910.671.0248 x75922", CreatedByUserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a", Description = "Voluptas ut voluptatem. Voluptatem impedit consequuntur aut ex.", Email = "Verdie_Nitzsche93@hotmail.com", IsActive = true, Name = "Company932", ThemeId = 61, WebSite = "https://magnolia.biz" },
                        new { Id = 73, ContactNumber = "1-250-492-9355 x863", CreatedByUserId = "1e156360-6f98-48ec-8e6f-627f64ecbbd0", Description = "", Email = "Braeden.Parisian34@yahoo.com", IsActive = true, Name = "Company480", ThemeId = 67, WebSite = "http://kayla.org" },
                        new { Id = 74, ContactNumber = "(382) 454-7907 x61531", CreatedByUserId = "3199fe3c-63e6-4f62-a0ad-d4f32497b0a2", Description = "Voluptatum et minus quas dolorem voluptatem quos tempora quia corrupti. Aut qui autem est aliquid ut repellendus veritatis tempore ad.", Email = "Gerardo73@gmail.com", IsActive = true, Name = "Company855", ThemeId = 62, WebSite = "http://ephraim.name" },
                        new { Id = 75, ContactNumber = "(530) 893-9198 x8438", CreatedByUserId = "a659adfa-4f86-42a1-84ce-ace552bc4559", Description = "Est consequuntur eum nihil. Tempore dicta labore cupiditate. Dolore velit est et excepturi animi. Quisquam ipsam molestias tenetur est sunt enim minima ratione.", Email = "Tobin_Frami99@yahoo.com", IsActive = true, Name = "Company646", ThemeId = 69, WebSite = "http://jewell.net" },
                        new { Id = 76, ContactNumber = "1-814-851-5543 x256", CreatedByUserId = "14105d91-1320-41b1-9fc4-b92c647b725a", Description = "Quaerat quo eaque natus nihil. Odio voluptatem temporibus ullam quo voluptas odio consectetur sed incidunt.", Email = "Guy.Wisozk@yahoo.com", IsActive = true, Name = "Company451", ThemeId = 68, WebSite = "http://marco.com" },
                        new { Id = 77, ContactNumber = "1-388-761-5216 x534", CreatedByUserId = "3199fe3c-63e6-4f62-a0ad-d4f32497b0a2", Description = "Maxime enim ratione aliquid.", Email = "Precious.Goyette@hotmail.com", IsActive = true, Name = "Company199", ThemeId = 61, WebSite = "https://layla.net" },
                        new { Id = 78, ContactNumber = "756.899.8959", CreatedByUserId = "b5ac7258-7629-4c76-a03f-230bc1010fd5", Description = "Nam dolor magnam iusto. Voluptas consequatur perspiciatis. Nihil molestiae delectus vel. Rerum aperiam id maiores quo tempore.", Email = "Zetta_Medhurst@yahoo.com", IsActive = true, Name = "Company277", ThemeId = 62, WebSite = "https://hyman.net" },
                        new { Id = 79, ContactNumber = "(783) 804-7611 x235", CreatedByUserId = "4d60b58f-974f-4da9-8cec-61bdf80b937b", Description = "Quasi omnis quaerat officia enim ratione dolore. Et molestias et error sapiente blanditiis non. Est suscipit molestias dolores facilis quasi eligendi quo occaecati hic. Nihil aut et.", Email = "Julien.Schmitt@hotmail.com", IsActive = true, Name = "Company678", ThemeId = 63, WebSite = "http://oma.com" },
                        new { Id = 80, ContactNumber = "1-898-519-2590", CreatedByUserId = "c6c22843-72fc-4836-9297-d2590ed79141", Description = "Alias vitae unde et quia aut ut quas et. Autem rerum distinctio. Est autem laudantium excepturi.", Email = "Keeley82@gmail.com", IsActive = true, Name = "Company677", ThemeId = 67, WebSite = "http://hosea.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 15, 8, 21, 18, 450, DateTimeKind.Local), FeedbackId = 47, Text = "Doloribus consequuntur et at inventore nemo voluptatibus amet quia.", UserId = "1e156360-6f98-48ec-8e6f-627f64ecbbd0" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 15, 2, 22, 51, 38, DateTimeKind.Local), FeedbackId = 48, Text = "Eum sed illo libero rerum voluptatum molestias error voluptate.", UserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 15, 3, 15, 35, 974, DateTimeKind.Local), FeedbackId = 46, Text = "Fuga at sapiente dignissimos.", UserId = "48052434-ab0c-4e5b-8ec2-56425365e387" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 14, 21, 48, 3, 736, DateTimeKind.Local), FeedbackId = 47, Text = "Iusto in id ex dolor nihil aliquid.", UserId = "48052434-ab0c-4e5b-8ec2-56425365e387" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 15, 5, 42, 26, 235, DateTimeKind.Local), FeedbackId = 48, Text = "Quisquam deserunt sequi cum magnam architecto vitae et nemo.", UserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 15, 8, 21, 27, 190, DateTimeKind.Local), FeedbackId = 50, Text = "Ratione vero soluta magni modi aut temporibus at.", UserId = "3199fe3c-63e6-4f62-a0ad-d4f32497b0a2" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 14, 19, 10, 55, 599, DateTimeKind.Local), FeedbackId = 47, Text = "Ducimus enim impedit assumenda nesciunt ut dolorum quod.", UserId = "14105d91-1320-41b1-9fc4-b92c647b725a" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 15, 6, 27, 40, 214, DateTimeKind.Local), FeedbackId = 49, Text = "Dolor quo consequatur quis sequi incidunt.", UserId = "b5ac7258-7629-4c76-a03f-230bc1010fd5" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 15, 7, 7, 27, 775, DateTimeKind.Local), FeedbackId = 49, Text = "Non voluptatem accusantium eius quis et debitis aut error et.", UserId = "a8980cbb-75d9-40f1-b402-6b407eed99a4" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 15, 7, 1, 23, 627, DateTimeKind.Local), FeedbackId = 46, Text = "Autem pariatur ratione ullam sapiente voluptatibus alias neque magnam.", UserId = "14105d91-1320-41b1-9fc4-b92c647b725a" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme513" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme114" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme99" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme595" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme421" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme913" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme80" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme893" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme269" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme275" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "a8980cbb-75d9-40f1-b402-6b407eed99a4", CreatedAt = new DateTime(2018, 8, 15, 5, 0, 5, 489, DateTimeKind.Local), DisplayName = "Bell", Email = "Clementina90@yahoo.com", FirstName = "Lexie", IsActive = true, LastName = "Hilpert", RoleId = 2 },
                        new { Id = "c6c22843-72fc-4836-9297-d2590ed79141", CreatedAt = new DateTime(2018, 8, 15, 3, 19, 7, 528, DateTimeKind.Local), DisplayName = "Georgiana", Email = "Willie78@hotmail.com", FirstName = "Nayeli", IsActive = true, LastName = "Von", RoleId = 1 },
                        new { Id = "a659adfa-4f86-42a1-84ce-ace552bc4559", CreatedAt = new DateTime(2018, 8, 14, 13, 46, 41, 179, DateTimeKind.Local), DisplayName = "Johan", Email = "Frieda_Parker77@hotmail.com", FirstName = "Abbigail", IsActive = true, LastName = "Kohler", RoleId = 2 },
                        new { Id = "3199fe3c-63e6-4f62-a0ad-d4f32497b0a2", CreatedAt = new DateTime(2018, 8, 15, 10, 47, 21, 306, DateTimeKind.Local), DisplayName = "Kirstin", Email = "Cordelia.Stoltenberg@gmail.com", FirstName = "Evans", IsActive = true, LastName = "Kovacek", RoleId = 2 },
                        new { Id = "4d60b58f-974f-4da9-8cec-61bdf80b937b", CreatedAt = new DateTime(2018, 8, 15, 7, 4, 12, 966, DateTimeKind.Local), DisplayName = "Eda", Email = "Mervin.Bergstrom29@hotmail.com", FirstName = "Jamel", IsActive = true, LastName = "Graham", RoleId = 1 },
                        new { Id = "3d4a1813-a2c9-4727-ba38-ecab1951235a", CreatedAt = new DateTime(2018, 8, 14, 12, 40, 10, 611, DateTimeKind.Local), DisplayName = "Duncan", Email = "Sam51@gmail.com", FirstName = "Aurelie", IsActive = true, LastName = "Jakubowski", RoleId = 2 },
                        new { Id = "1e156360-6f98-48ec-8e6f-627f64ecbbd0", CreatedAt = new DateTime(2018, 8, 14, 20, 10, 27, 739, DateTimeKind.Local), DisplayName = "Nola", Email = "Irma_Schneider86@yahoo.com", FirstName = "Brent", IsActive = true, LastName = "Hickle", RoleId = 2 },
                        new { Id = "48052434-ab0c-4e5b-8ec2-56425365e387", CreatedAt = new DateTime(2018, 8, 15, 11, 32, 3, 12, DateTimeKind.Local), DisplayName = "Kailey", Email = "Dana_Rice@gmail.com", FirstName = "Elvera", IsActive = true, LastName = "Lockman", RoleId = 1 },
                        new { Id = "b5ac7258-7629-4c76-a03f-230bc1010fd5", CreatedAt = new DateTime(2018, 8, 15, 4, 0, 45, 170, DateTimeKind.Local), DisplayName = "Jerrold", Email = "Annamae.Gulgowski45@gmail.com", FirstName = "Jay", IsActive = true, LastName = "Reichel", RoleId = 2 },
                        new { Id = "14105d91-1320-41b1-9fc4-b92c647b725a", CreatedAt = new DateTime(2018, 8, 14, 15, 24, 39, 54, DateTimeKind.Local), DisplayName = "Esteban", Email = "Joyce26@hotmail.com", FirstName = "Aric", IsActive = true, LastName = "Ernser", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "a8980cbb-75d9-40f1-b402-6b407eed99a4", OrganizationId = 78 },
                        new { UserId = "c6c22843-72fc-4836-9297-d2590ed79141", OrganizationId = 79 },
                        new { UserId = "a659adfa-4f86-42a1-84ce-ace552bc4559", OrganizationId = 76 },
                        new { UserId = "3199fe3c-63e6-4f62-a0ad-d4f32497b0a2", OrganizationId = 76 },
                        new { UserId = "4d60b58f-974f-4da9-8cec-61bdf80b937b", OrganizationId = 71 },
                        new { UserId = "3d4a1813-a2c9-4727-ba38-ecab1951235a", OrganizationId = 77 },
                        new { UserId = "1e156360-6f98-48ec-8e6f-627f64ecbbd0", OrganizationId = 72 },
                        new { UserId = "48052434-ab0c-4e5b-8ec2-56425365e387", OrganizationId = 71 },
                        new { UserId = "b5ac7258-7629-4c76-a03f-230bc1010fd5", OrganizationId = 72 },
                        new { UserId = "14105d91-1320-41b1-9fc4-b92c647b725a", OrganizationId = 76 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
