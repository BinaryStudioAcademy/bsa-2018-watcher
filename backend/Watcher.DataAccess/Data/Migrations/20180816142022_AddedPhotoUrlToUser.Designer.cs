// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180816142022_AddedPhotoUrlToUser")]
    partial class AddedPhotoUrlToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source1", Threshold = 55, Type = 1 },
                        new { Id = 102, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 33, Type = 0 },
                        new { Id = 103, DashboardId = 100, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source2", Threshold = 19, Type = 0 },
                        new { Id = 104, DashboardId = 100, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 7, Type = 1 },
                        new { Id = 105, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 10, Type = 2 },
                        new { Id = 106, DashboardId = 94, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source2", Threshold = 79, Type = 0 },
                        new { Id = 107, DashboardId = 93, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source1", Threshold = 75, Type = 0 },
                        new { Id = 108, DashboardId = 98, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 52, Type = 1 },
                        new { Id = 109, DashboardId = 98, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 28, Type = 1 },
                        new { Id = 110, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source1", Threshold = 51, Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "0c18b481-63c3-4edb-9c6c-a96a4f4ef3be", Name = "eveniet", Type = 0 },
                        new { Id = 22, CreatedById = "51eb640e-60b6-48f0-89cb-6d3e6c19074c", Name = "non", Type = 0 },
                        new { Id = 23, CreatedById = "d0fcb793-4ae2-4b33-add9-580d3ec6f237", Name = "modi", Type = 0 },
                        new { Id = 24, CreatedById = "5aa34b99-8805-4234-9050-9e40616a7db4", Name = "adipisci", Type = 0 },
                        new { Id = 25, CreatedById = "f3d31655-6174-47c9-965a-2ec360683e18", Name = "animi", Type = 0 },
                        new { Id = 26, CreatedById = "58282afb-62fc-4591-8d86-7c86ec8cfff6", Name = "voluptatum", Type = 0 },
                        new { Id = 27, CreatedById = "1ae89fe2-ae8c-4d72-b924-40f3fda7f6f3", Name = "tenetur", Type = 0 },
                        new { Id = 28, CreatedById = "f3d31655-6174-47c9-965a-2ec360683e18", Name = "et", Type = 0 },
                        new { Id = 29, CreatedById = "5aa34b99-8805-4234-9050-9e40616a7db4", Name = "tenetur", Type = 0 },
                        new { Id = 30, CreatedById = "58282afb-62fc-4591-8d86-7c86ec8cfff6", Name = "vitae", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 16, 13, 47, 43, 927, DateTimeKind.Local), InstanceId = 89, Title = "Title736" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 16, 13, 54, 49, 376, DateTimeKind.Local), InstanceId = 86, Title = "Title684" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 16, 0, 38, 34, 479, DateTimeKind.Local), InstanceId = 82, Title = "Title522" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 16, 6, 15, 1, 590, DateTimeKind.Local), InstanceId = 87, Title = "Title786" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 16, 11, 35, 6, 218, DateTimeKind.Local), InstanceId = 86, Title = "Title807" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 16, 2, 26, 46, 746, DateTimeKind.Local), InstanceId = 83, Title = "Title65" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 15, 18, 43, 19, 481, DateTimeKind.Local), InstanceId = 81, Title = "Title130" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 16, 6, 45, 14, 481, DateTimeKind.Local), InstanceId = 82, Title = "Title991" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 16, 14, 55, 17, 546, DateTimeKind.Local), InstanceId = 87, Title = "Title334" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 16, 1, 27, 20, 455, DateTimeKind.Local), InstanceId = 85, Title = "Title192" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 16, 6, 26, 34, 247, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Doloribus sint quo.", UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 15, 20, 37, 20, 735, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Odio excepturi est rem neque odit.", UserId = "0c18b481-63c3-4edb-9c6c-a96a4f4ef3be", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 15, 18, 34, 36, 583, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "In et et odio nisi temporibus voluptas quia.", UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 16, 9, 24, 45, 362, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Sunt ut optio.", UserId = "d0fcb793-4ae2-4b33-add9-580d3ec6f237", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 16, 1, 20, 9, 741, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Minima blanditiis possimus qui saepe sed optio pariatur.", UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 16, 8, 1, 1, 693, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Iusto consectetur laudantium saepe qui occaecati in quos facere.", UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 16, 5, 38, 35, 536, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Voluptatem autem rerum quis.", UserId = "d0fcb793-4ae2-4b33-add9-580d3ec6f237", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 15, 17, 53, 2, 931, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Vel qui sunt non dolorem voluptate earum.", UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 16, 0, 25, 8, 765, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Dolorem deserunt cum et aut nobis possimus.", UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 15, 21, 22, 27, 88, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Vel ullam quo et dolore.", UserId = "1ae89fe2-ae8c-4d72-b924-40f3fda7f6f3", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "c9:82:f9:92:a8:84", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 74, Platform = "Windows", Title = "Instance100" },
                        new { Id = 82, Address = "63:ce:14:be:5c:dd", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 73, Platform = "Windows", Title = "Instance452" },
                        new { Id = 83, Address = "9e:16:ca:02:9f:58", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 76, Platform = "Linux", Title = "Instance613" },
                        new { Id = 84, Address = "4e:dd:23:c2:40:81", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 80, Platform = "Windows", Title = "Instance750" },
                        new { Id = 85, Address = "0e:23:3f:89:ab:7b", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 71, Platform = "Linux", Title = "Instance199" },
                        new { Id = 86, Address = "f7:0b:93:99:43:b2", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 78, Platform = "Linux", Title = "Instance1" },
                        new { Id = 87, Address = "fc:f2:58:83:e2:85", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Linux", Title = "Instance949" },
                        new { Id = 88, Address = "f2:72:54:e1:71:7a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Windows", Title = "Instance494" },
                        new { Id = 89, Address = "58:be:6a:47:f8:43", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 73, Platform = "Windows", Title = "Instance339" },
                        new { Id = 90, Address = "c9:f4:dd:e3:bf:1b", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 78, Platform = "Linux", Title = "Instance496" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 24, CreatedAt = new DateTime(2018, 8, 16, 3, 8, 0, 840, DateTimeKind.Local), Text = "Laborum ut laboriosam deserunt occaecati repudiandae aliquid.", UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7", WasRead = true },
                        new { Id = 32, ChatId = 25, CreatedAt = new DateTime(2018, 8, 16, 2, 6, 21, 1, DateTimeKind.Local), Text = "Ea quam libero dolorem et enim nihil ipsa.", UserId = "1ae89fe2-ae8c-4d72-b924-40f3fda7f6f3", WasRead = true },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 8, 16, 7, 30, 36, 279, DateTimeKind.Local), Text = "Earum asperiores maiores qui quae magni aspernatur.", UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7", WasRead = true },
                        new { Id = 34, ChatId = 28, CreatedAt = new DateTime(2018, 8, 15, 20, 33, 8, 970, DateTimeKind.Local), Text = "Qui nihil quam voluptas eligendi aut ipsam et ipsum.", UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7", WasRead = false },
                        new { Id = 35, ChatId = 30, CreatedAt = new DateTime(2018, 8, 16, 15, 14, 55, 532, DateTimeKind.Local), Text = "Cum expedita autem autem reiciendis.", UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7", WasRead = false },
                        new { Id = 36, ChatId = 21, CreatedAt = new DateTime(2018, 8, 16, 3, 41, 12, 386, DateTimeKind.Local), Text = "Consequatur eligendi unde et blanditiis nihil hic eos consectetur exercitationem.", UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c", WasRead = true },
                        new { Id = 37, ChatId = 28, CreatedAt = new DateTime(2018, 8, 16, 15, 29, 19, 656, DateTimeKind.Local), Text = "Fuga dolor sit ducimus aliquid consequuntur.", UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7", WasRead = true },
                        new { Id = 38, ChatId = 25, CreatedAt = new DateTime(2018, 8, 16, 5, 27, 53, 232, DateTimeKind.Local), Text = "Et aperiam corporis id dolor laborum.", UserId = "5aa34b99-8805-4234-9050-9e40616a7db4", WasRead = true },
                        new { Id = 39, ChatId = 22, CreatedAt = new DateTime(2018, 8, 16, 10, 37, 24, 820, DateTimeKind.Local), Text = "Quasi totam placeat facilis qui sunt.", UserId = "f3d31655-6174-47c9-965a-2ec360683e18", WasRead = true },
                        new { Id = 40, ChatId = 29, CreatedAt = new DateTime(2018, 8, 16, 2, 32, 32, 788, DateTimeKind.Local), Text = "Voluptates ex similique possimus occaecati tempora quibusdam.", UserId = "0c18b481-63c3-4edb-9c6c-a96a4f4ef3be", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 16, 9, 43, 52, 296, DateTimeKind.Local), NotificationSettingId = 12, Text = "Est non laudantium saepe culpa et quisquam.", UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 16, 13, 52, 17, 592, DateTimeKind.Local), NotificationSettingId = 13, Text = "Ad non facere aspernatur voluptatem accusamus quam possimus earum veritatis.", UserId = "58282afb-62fc-4591-8d86-7c86ec8cfff6" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 16, 15, 18, 55, 586, DateTimeKind.Local), NotificationSettingId = 19, Text = "Eum molestias nobis illo.", UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 15, 19, 41, 51, 598, DateTimeKind.Local), NotificationSettingId = 16, Text = "Consectetur et quia veniam voluptas earum ut.", UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 16, 15, 11, 8, 12, DateTimeKind.Local), NotificationSettingId = 15, Text = "Est alias porro quae consequatur aut ex dicta sint.", UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 16, 14, 41, 18, 917, DateTimeKind.Local), NotificationSettingId = 13, Text = "Ipsum quod facere.", UserId = "666f434f-7bc9-4276-abf0-723993d8ed27" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 15, 22, 42, 57, 701, DateTimeKind.Local), NotificationSettingId = 12, Text = "Sint sequi nam quod magnam.", UserId = "666f434f-7bc9-4276-abf0-723993d8ed27" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 16, 13, 40, 46, 324, DateTimeKind.Local), NotificationSettingId = 15, Text = "At eaque dolorum est ab soluta.", UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 16, 14, 38, 31, 30, DateTimeKind.Local), NotificationSettingId = 12, Text = "Quia qui et quis occaecati optio aperiam dolore.", UserId = "666f434f-7bc9-4276-abf0-723993d8ed27" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 15, 21, 1, 40, 773, DateTimeKind.Local), NotificationSettingId = 17, Text = "Et sit sed quis blanditiis laboriosam reiciendis autem tempora.", UserId = "1ae89fe2-ae8c-4d72-b924-40f3fda7f6f3" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c" },
                        new { Id = 12, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "f3d31655-6174-47c9-965a-2ec360683e18" },
                        new { Id = 13, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "58282afb-62fc-4591-8d86-7c86ec8cfff6" },
                        new { Id = 14, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "666f434f-7bc9-4276-abf0-723993d8ed27" },
                        new { Id = 15, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7" },
                        new { Id = 16, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "d0fcb793-4ae2-4b33-add9-580d3ec6f237" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c" },
                        new { Id = 19, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7" },
                        new { Id = 20, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "666f434f-7bc9-4276-abf0-723993d8ed27" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "789.983.9175 x2028", CreatedByUserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7", Description = "Sed eligendi tempore quod non expedita temporibus earum. Laborum sit voluptatum odio laborum cumque et dolores. Sunt officia adipisci impedit voluptates minus nisi dolores ex qui. Recusandae quo ut sed odio saepe ea.", Email = "Aubree.Becker9@hotmail.com", IsActive = true, Name = "Company365", ThemeId = 65, WebSite = "http://bryon.com" },
                        new { Id = 72, ContactNumber = "727-924-4793 x32937", CreatedByUserId = "0c18b481-63c3-4edb-9c6c-a96a4f4ef3be", Description = "Ea repellat quisquam exercitationem doloremque est quisquam doloremque et quaerat. Impedit natus pariatur qui dolore voluptatibus. Voluptatem error quas qui aut in fuga non perferendis et.", Email = "Tremayne17@gmail.com", IsActive = true, Name = "Company257", ThemeId = 62, WebSite = "http://myrtle.com" },
                        new { Id = 73, ContactNumber = "1-800-335-9094 x7245", CreatedByUserId = "d0fcb793-4ae2-4b33-add9-580d3ec6f237", Description = "", Email = "Dameon.Conn54@yahoo.com", IsActive = true, Name = "Company618", ThemeId = 67, WebSite = "https://clarabelle.name" },
                        new { Id = 74, ContactNumber = "(828) 508-9735 x1487", CreatedByUserId = "0c18b481-63c3-4edb-9c6c-a96a4f4ef3be", Description = "Fugiat eius omnis animi.", Email = "Donald_Feil@hotmail.com", IsActive = true, Name = "Company504", ThemeId = 61, WebSite = "http://euna.net" },
                        new { Id = 75, ContactNumber = "451-382-6529 x13295", CreatedByUserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7", Description = "", Email = "Maximilian_Keeling@yahoo.com", IsActive = true, Name = "Company872", ThemeId = 61, WebSite = "http://peter.com" },
                        new { Id = 76, ContactNumber = "1-371-365-5609", CreatedByUserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c", Description = "", Email = "Turner.Schaefer@gmail.com", IsActive = true, Name = "Company56", ThemeId = 61, WebSite = "http://elvis.info" },
                        new { Id = 77, ContactNumber = "(749) 505-8220 x732", CreatedByUserId = "666f434f-7bc9-4276-abf0-723993d8ed27", Description = "Veritatis ea ea aut eaque nihil. Quos optio vel. Quia mollitia molestias minus illo.", Email = "Ramona_Farrell60@hotmail.com", IsActive = true, Name = "Company451", ThemeId = 61, WebSite = "http://aubrey.net" },
                        new { Id = 78, ContactNumber = "1-562-682-7970", CreatedByUserId = "0c18b481-63c3-4edb-9c6c-a96a4f4ef3be", Description = "Quo dolorem aut qui nostrum omnis sint consequatur est nisi. Minus ipsam delectus tempore consequatur nam et. Enim aut qui nihil nihil occaecati suscipit.", Email = "Aurelia.Pfeffer13@gmail.com", IsActive = true, Name = "Company628", ThemeId = 65, WebSite = "https://oren.info" },
                        new { Id = 79, ContactNumber = "236-409-8985 x43753", CreatedByUserId = "666f434f-7bc9-4276-abf0-723993d8ed27", Description = "Quod aspernatur debitis a illo. Id in doloremque. Atque dicta qui. Sit dolorum quasi dignissimos.", Email = "Kiara38@gmail.com", IsActive = true, Name = "Company270", ThemeId = 68, WebSite = "https://christophe.com" },
                        new { Id = 80, ContactNumber = "1-570-218-0260 x08382", CreatedByUserId = "1ae89fe2-ae8c-4d72-b924-40f3fda7f6f3", Description = "Cumque est inventore quis. Provident commodi suscipit.", Email = "Luz_Howe85@hotmail.com", IsActive = true, Name = "Company783", ThemeId = 66, WebSite = "https://josiah.com" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 16, 6, 2, 14, 450, DateTimeKind.Local), FeedbackId = 47, Text = "Recusandae consequatur eum non molestias consequuntur quia.", UserId = "d0fcb793-4ae2-4b33-add9-580d3ec6f237" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 16, 3, 38, 8, 563, DateTimeKind.Local), FeedbackId = 42, Text = "Atque debitis perspiciatis saepe a qui quibusdam assumenda.", UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 16, 4, 58, 33, 470, DateTimeKind.Local), FeedbackId = 45, Text = "Culpa ex et nesciunt.", UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 16, 0, 29, 38, 98, DateTimeKind.Local), FeedbackId = 41, Text = "Asperiores quia suscipit ipsa et.", UserId = "5aa34b99-8805-4234-9050-9e40616a7db4" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 15, 21, 14, 27, 78, DateTimeKind.Local), FeedbackId = 49, Text = "Voluptas quas laboriosam explicabo quasi est reprehenderit.", UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 16, 6, 57, 54, 939, DateTimeKind.Local), FeedbackId = 49, Text = "Ducimus veritatis distinctio.", UserId = "58282afb-62fc-4591-8d86-7c86ec8cfff6" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 15, 19, 24, 44, 385, DateTimeKind.Local), FeedbackId = 44, Text = "Vero odio ut consequatur.", UserId = "58282afb-62fc-4591-8d86-7c86ec8cfff6" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 16, 11, 28, 39, 937, DateTimeKind.Local), FeedbackId = 48, Text = "Enim perspiciatis et reprehenderit aliquam et quo eius.", UserId = "f3d31655-6174-47c9-965a-2ec360683e18" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 16, 9, 38, 14, 591, DateTimeKind.Local), FeedbackId = 47, Text = "Excepturi nihil tempore.", UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 16, 6, 28, 33, 947, DateTimeKind.Local), FeedbackId = 47, Text = "Quo recusandae excepturi ut numquam fuga.", UserId = "666f434f-7bc9-4276-abf0-723993d8ed27" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme580" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme719" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme336" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme734" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme61" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme766" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme475" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme643" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme532" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme84" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "666f434f-7bc9-4276-abf0-723993d8ed27", CreatedAt = new DateTime(2018, 8, 15, 19, 20, 8, 693, DateTimeKind.Local), DisplayName = "Landen", Email = "Nora.Paucek@gmail.com", FirstName = "Chandler", IsActive = true, LastName = "Tremblay", RoleId = 1 },
                        new { Id = "51eb640e-60b6-48f0-89cb-6d3e6c19074c", CreatedAt = new DateTime(2018, 8, 15, 20, 44, 8, 716, DateTimeKind.Local), DisplayName = "Dejah", Email = "Turner_Hegmann56@gmail.com", FirstName = "Hilton", IsActive = true, LastName = "Gutmann", RoleId = 2 },
                        new { Id = "1ae89fe2-ae8c-4d72-b924-40f3fda7f6f3", CreatedAt = new DateTime(2018, 8, 15, 19, 50, 22, 785, DateTimeKind.Local), DisplayName = "Danielle", Email = "Audra.Hermiston34@hotmail.com", FirstName = "Ansel", IsActive = true, LastName = "Von", RoleId = 1 },
                        new { Id = "d0fcb793-4ae2-4b33-add9-580d3ec6f237", CreatedAt = new DateTime(2018, 8, 16, 17, 0, 40, 359, DateTimeKind.Local), DisplayName = "Harvey", Email = "Eudora_Hayes@hotmail.com", FirstName = "Zakary", IsActive = true, LastName = "Wisoky", RoleId = 2 },
                        new { Id = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7", CreatedAt = new DateTime(2018, 8, 16, 12, 21, 25, 361, DateTimeKind.Local), DisplayName = "Giuseppe", Email = "Alden22@hotmail.com", FirstName = "Ayden", IsActive = true, LastName = "Crist", RoleId = 2 },
                        new { Id = "2bd76fc2-f512-4341-9aed-06f434f095e7", CreatedAt = new DateTime(2018, 8, 16, 9, 29, 0, 150, DateTimeKind.Local), DisplayName = "Kameron", Email = "Wilford67@gmail.com", FirstName = "Vita", IsActive = true, LastName = "Herman", RoleId = 2 },
                        new { Id = "f3d31655-6174-47c9-965a-2ec360683e18", CreatedAt = new DateTime(2018, 8, 16, 3, 39, 38, 491, DateTimeKind.Local), DisplayName = "Braulio", Email = "Elvie.Gorczany1@gmail.com", FirstName = "Oscar", IsActive = true, LastName = "Mayer", RoleId = 1 },
                        new { Id = "0c18b481-63c3-4edb-9c6c-a96a4f4ef3be", CreatedAt = new DateTime(2018, 8, 16, 1, 33, 32, 328, DateTimeKind.Local), DisplayName = "Faustino", Email = "Norberto.Skiles51@hotmail.com", FirstName = "Abdul", IsActive = true, LastName = "Sporer", RoleId = 1 },
                        new { Id = "58282afb-62fc-4591-8d86-7c86ec8cfff6", CreatedAt = new DateTime(2018, 8, 15, 20, 5, 56, 31, DateTimeKind.Local), DisplayName = "Clotilde", Email = "Hester_Hackett15@yahoo.com", FirstName = "Brennan", IsActive = true, LastName = "Grant", RoleId = 1 },
                        new { Id = "5aa34b99-8805-4234-9050-9e40616a7db4", CreatedAt = new DateTime(2018, 8, 16, 12, 11, 58, 355, DateTimeKind.Local), DisplayName = "Jovanny", Email = "Brandon.Mosciski28@gmail.com", FirstName = "Eloisa", IsActive = true, LastName = "Rosenbaum", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "666f434f-7bc9-4276-abf0-723993d8ed27", OrganizationId = 76 },
                        new { UserId = "51eb640e-60b6-48f0-89cb-6d3e6c19074c", OrganizationId = 71 },
                        new { UserId = "1ae89fe2-ae8c-4d72-b924-40f3fda7f6f3", OrganizationId = 78 },
                        new { UserId = "d0fcb793-4ae2-4b33-add9-580d3ec6f237", OrganizationId = 78 },
                        new { UserId = "fa3093fa-39f2-4065-a2bc-1f27a0fe67d7", OrganizationId = 71 },
                        new { UserId = "2bd76fc2-f512-4341-9aed-06f434f095e7", OrganizationId = 75 },
                        new { UserId = "f3d31655-6174-47c9-965a-2ec360683e18", OrganizationId = 76 },
                        new { UserId = "0c18b481-63c3-4edb-9c6c-a96a4f4ef3be", OrganizationId = 76 },
                        new { UserId = "58282afb-62fc-4591-8d86-7c86ec8cfff6", OrganizationId = 76 },
                        new { UserId = "5aa34b99-8805-4234-9050-9e40616a7db4", OrganizationId = 74 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
