// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 92, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 83, Type = 0 },
                        new { Id = 102, DashboardId = 93, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 3, Type = 1 },
                        new { Id = 103, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 37, Type = 2 },
                        new { Id = 104, DashboardId = 97, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 39, Type = 0 },
                        new { Id = 105, DashboardId = 95, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source2", Threshold = 59, Type = 2 },
                        new { Id = 106, DashboardId = 93, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 96, Type = 1 },
                        new { Id = 107, DashboardId = 94, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 9, Type = 0 },
                        new { Id = 108, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source1", Threshold = 25, Type = 2 },
                        new { Id = 109, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 57, Type = 2 },
                        new { Id = 110, DashboardId = 97, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 12, Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "7a3d1395-bd4d-492c-ba90-76c148d7f559", Name = "velit", Type = 0 },
                        new { Id = 22, CreatedById = "b8493acc-5078-4e21-a205-74dc72d89ff8", Name = "ut", Type = 0 },
                        new { Id = 23, CreatedById = "683266fc-140c-4a5e-ac01-7ff8304a848b", Name = "maxime", Type = 0 },
                        new { Id = 24, CreatedById = "b8493acc-5078-4e21-a205-74dc72d89ff8", Name = "labore", Type = 0 },
                        new { Id = 25, CreatedById = "df57d25e-b21d-490a-8024-d1a04e56934b", Name = "nobis", Type = 0 },
                        new { Id = 26, CreatedById = "b8493acc-5078-4e21-a205-74dc72d89ff8", Name = "consequatur", Type = 0 },
                        new { Id = 27, CreatedById = "683266fc-140c-4a5e-ac01-7ff8304a848b", Name = "excepturi", Type = 0 },
                        new { Id = 28, CreatedById = "a436d9c3-ce62-4a1e-8293-5b17534d8398", Name = "velit", Type = 0 },
                        new { Id = 29, CreatedById = "14052a15-abbd-4257-8aa3-14b803de5241", Name = "molestias", Type = 0 },
                        new { Id = 30, CreatedById = "b8493acc-5078-4e21-a205-74dc72d89ff8", Name = "dolor", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 14, 20, 51, 6, 162, DateTimeKind.Local), InstanceId = 89, Title = "Title41" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 14, 4, 16, 53, 458, DateTimeKind.Local), InstanceId = 90, Title = "Title628" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 14, 0, 26, 10, 200, DateTimeKind.Local), InstanceId = 87, Title = "Title536" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 14, 0, 7, 46, 989, DateTimeKind.Local), InstanceId = 90, Title = "Title159" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 14, 0, 36, 34, 744, DateTimeKind.Local), InstanceId = 87, Title = "Title654" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 13, 22, 44, 14, 286, DateTimeKind.Local), InstanceId = 90, Title = "Title155" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 14, 21, 3, 58, 485, DateTimeKind.Local), InstanceId = 84, Title = "Title246" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 14, 9, 34, 11, 714, DateTimeKind.Local), InstanceId = 83, Title = "Title726" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 14, 16, 8, 46, 578, DateTimeKind.Local), InstanceId = 85, Title = "Title778" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 14, 15, 12, 28, 341, DateTimeKind.Local), InstanceId = 90, Title = "Title660" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 14, 19, 19, 45, 731, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Rerum mollitia natus a labore natus eum et aut.", UserId = "df57d25e-b21d-490a-8024-d1a04e56934b", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 14, 20, 21, 10, 657, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Impedit est aut et ut natus quia est cupiditate.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 14, 15, 56, 49, 147, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Placeat qui rerum quia assumenda quisquam nihil exercitationem eum.", UserId = "b8493acc-5078-4e21-a205-74dc72d89ff8", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 14, 10, 38, 44, 270, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Omnis tenetur dolorum odit aut assumenda aspernatur qui doloremque.", UserId = "310558b5-97d8-4ad0-a0c0-cc597712123b", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 14, 1, 15, 41, 535, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Fuga soluta ratione officia consequuntur voluptatem ullam.", UserId = "863baf8a-b306-4a9f-84f0-5df0a3e7b480", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 14, 10, 14, 2, 878, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Quia repellendus cum impedit exercitationem vel distinctio numquam.", UserId = "b8493acc-5078-4e21-a205-74dc72d89ff8", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 14, 2, 14, 31, 507, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Sequi quo ipsam earum numquam.", UserId = "70f945d0-f3c7-4587-9676-fc089b4451ce", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 14, 15, 51, 38, 940, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Eum dolor ullam nesciunt ut dolores dicta in quo ipsum.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 14, 4, 11, 3, 7, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Modi doloremque maxime quo et ut rem.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 14, 8, 25, 29, 126, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Voluptatibus vel ad totam nulla eum est voluptates aliquid.", UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "4d:9e:24:de:b9:c3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Windows", Title = "Instance750" },
                        new { Id = 82, Address = "72:47:79:8c:1e:7f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 73, Platform = "Windows", Title = "Instance167" },
                        new { Id = 83, Address = "c0:07:04:25:01:54", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 75, Platform = "Linux", Title = "Instance777" },
                        new { Id = 84, Address = "04:7c:40:3a:3e:72", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 72, Platform = "Windows", Title = "Instance478" },
                        new { Id = 85, Address = "3b:a6:35:ec:36:e3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 72, Platform = "Windows", Title = "Instance815" },
                        new { Id = 86, Address = "fc:ce:96:80:1a:46", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Windows", Title = "Instance343" },
                        new { Id = 87, Address = "4f:b3:f4:4a:f2:f5", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 71, Platform = "Linux", Title = "Instance865" },
                        new { Id = 88, Address = "51:fa:14:09:04:19", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Windows", Title = "Instance304" },
                        new { Id = 89, Address = "27:35:ca:77:e3:35", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Windows", Title = "Instance931" },
                        new { Id = 90, Address = "d8:2e:5d:6c:6d:88", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Linux", Title = "Instance127" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 21, CreatedAt = new DateTime(2018, 8, 14, 16, 19, 1, 249, DateTimeKind.Local), Text = "Ut aut odio ut maiores omnis.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241", WasRead = true },
                        new { Id = 32, ChatId = 25, CreatedAt = new DateTime(2018, 8, 14, 16, 19, 39, 394, DateTimeKind.Local), Text = "Aut voluptas est ut voluptatem.", UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b", WasRead = false },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 8, 14, 5, 4, 22, 834, DateTimeKind.Local), Text = "Qui qui amet vel incidunt.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241", WasRead = true },
                        new { Id = 34, ChatId = 21, CreatedAt = new DateTime(2018, 8, 14, 13, 27, 35, 716, DateTimeKind.Local), Text = "Autem qui ut dignissimos sit autem blanditiis.", UserId = "310558b5-97d8-4ad0-a0c0-cc597712123b", WasRead = false },
                        new { Id = 35, ChatId = 28, CreatedAt = new DateTime(2018, 8, 14, 4, 48, 8, 815, DateTimeKind.Local), Text = "Similique odio quas sit magni incidunt sint.", UserId = "df57d25e-b21d-490a-8024-d1a04e56934b", WasRead = true },
                        new { Id = 36, ChatId = 25, CreatedAt = new DateTime(2018, 8, 14, 19, 40, 44, 178, DateTimeKind.Local), Text = "Labore distinctio aliquam nesciunt.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241", WasRead = false },
                        new { Id = 37, ChatId = 24, CreatedAt = new DateTime(2018, 8, 14, 6, 8, 6, 130, DateTimeKind.Local), Text = "Quam asperiores in ea.", UserId = "a436d9c3-ce62-4a1e-8293-5b17534d8398", WasRead = true },
                        new { Id = 38, ChatId = 24, CreatedAt = new DateTime(2018, 8, 14, 20, 13, 36, 924, DateTimeKind.Local), Text = "Qui omnis quasi eos sunt maxime.", UserId = "b8493acc-5078-4e21-a205-74dc72d89ff8", WasRead = true },
                        new { Id = 39, ChatId = 26, CreatedAt = new DateTime(2018, 8, 14, 5, 18, 56, 113, DateTimeKind.Local), Text = "Voluptates vero libero aut fugiat.", UserId = "310558b5-97d8-4ad0-a0c0-cc597712123b", WasRead = true },
                        new { Id = 40, ChatId = 25, CreatedAt = new DateTime(2018, 8, 14, 17, 50, 25, 128, DateTimeKind.Local), Text = "Quaerat quidem ullam.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 14, 18, 44, 16, 752, DateTimeKind.Local), NotificationSettingId = 15, Text = "Aut voluptatem unde est.", UserId = "70f945d0-f3c7-4587-9676-fc089b4451ce" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 14, 14, 51, 50, 898, DateTimeKind.Local), NotificationSettingId = 15, Text = "Expedita iusto quidem iure occaecati assumenda ipsum beatae perspiciatis sed.", UserId = "863baf8a-b306-4a9f-84f0-5df0a3e7b480" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 14, 19, 52, 4, 886, DateTimeKind.Local), NotificationSettingId = 20, Text = "Voluptas vel eligendi rerum dicta cupiditate in facilis vel qui.", UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 14, 8, 27, 41, 864, DateTimeKind.Local), NotificationSettingId = 15, Text = "Omnis et quis dolores deleniti.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 14, 15, 5, 16, 182, DateTimeKind.Local), NotificationSettingId = 11, Text = "Dolor dolor quidem.", UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 14, 17, 52, 10, 274, DateTimeKind.Local), NotificationSettingId = 18, Text = "Doloremque reiciendis consequatur.", UserId = "7a3d1395-bd4d-492c-ba90-76c148d7f559" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 14, 8, 20, 34, 134, DateTimeKind.Local), NotificationSettingId = 17, Text = "Rem nam et.", UserId = "a436d9c3-ce62-4a1e-8293-5b17534d8398" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 14, 0, 6, 15, 537, DateTimeKind.Local), NotificationSettingId = 15, Text = "Quia expedita repellendus aut voluptatem fuga maxime omnis amet.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 14, 20, 10, 27, 565, DateTimeKind.Local), NotificationSettingId = 12, Text = "Sint praesentium qui quaerat cupiditate iste aut autem dicta.", UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 14, 7, 38, 8, 302, DateTimeKind.Local), NotificationSettingId = 20, Text = "Quo ut eum.", UserId = "14052a15-abbd-4257-8aa3-14b803de5241" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "7a3d1395-bd4d-492c-ba90-76c148d7f559" },
                        new { Id = 12, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "14052a15-abbd-4257-8aa3-14b803de5241" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "df57d25e-b21d-490a-8024-d1a04e56934b" },
                        new { Id = 14, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "b8493acc-5078-4e21-a205-74dc72d89ff8" },
                        new { Id = 15, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "df57d25e-b21d-490a-8024-d1a04e56934b" },
                        new { Id = 16, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "70f945d0-f3c7-4587-9676-fc089b4451ce" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "14052a15-abbd-4257-8aa3-14b803de5241" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "863baf8a-b306-4a9f-84f0-5df0a3e7b480" },
                        new { Id = 19, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b" },
                        new { Id = 20, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-430-508-8606 x675", CreatedByUserId = "863baf8a-b306-4a9f-84f0-5df0a3e7b480", Description = "Dolorum nulla eius quia temporibus vero est. Rerum culpa magni dolores asperiores esse aliquam modi aut et. Neque molestiae voluptas vitae. Aut vitae minima repudiandae enim sunt voluptatibus iure consequatur dolore.", Email = "Spencer.Quitzon22@hotmail.com", IsActive = true, Name = "Company998", ThemeId = 64, WebSite = "https://alene.biz" },
                        new { Id = 72, ContactNumber = "348-833-7077 x33756", CreatedByUserId = "863baf8a-b306-4a9f-84f0-5df0a3e7b480", Description = "Animi quod quia placeat omnis accusamus nihil eveniet ab. Deleniti itaque et error tenetur quae quaerat. Quia nulla nostrum.", Email = "Mariah.Parker@yahoo.com", IsActive = true, Name = "Company517", ThemeId = 61, WebSite = "https://tyson.net" },
                        new { Id = 73, ContactNumber = "940.349.7927 x213", CreatedByUserId = "76417ced-9632-4ebd-808d-717e70a270d2", Description = "", Email = "Lillian_Dooley@hotmail.com", IsActive = true, Name = "Company72", ThemeId = 63, WebSite = "http://yasmin.net" },
                        new { Id = 74, ContactNumber = "1-444-418-6761 x620", CreatedByUserId = "76417ced-9632-4ebd-808d-717e70a270d2", Description = "Ad illum asperiores excepturi nihil fugiat.", Email = "Robbie_Mann25@yahoo.com", IsActive = true, Name = "Company447", ThemeId = 63, WebSite = "https://terrance.biz" },
                        new { Id = 75, ContactNumber = "(637) 904-5662", CreatedByUserId = "a436d9c3-ce62-4a1e-8293-5b17534d8398", Description = "Placeat quia quos reprehenderit iusto. Ea dolorem tempore reiciendis qui voluptas architecto. Saepe expedita numquam molestiae. Odit non fugiat autem unde ut ab ut.", Email = "Winston.Zieme@hotmail.com", IsActive = true, Name = "Company580", ThemeId = 69, WebSite = "http://josiah.net" },
                        new { Id = 76, ContactNumber = "(256) 875-6858 x42578", CreatedByUserId = "683266fc-140c-4a5e-ac01-7ff8304a848b", Description = "Rerum quos eum harum ea rerum. Nemo dolor ratione accusantium molestiae dicta. Quasi cum fugiat asperiores. Magnam dolor consequatur consequatur ea explicabo voluptatum maiores.", Email = "Matilda80@hotmail.com", IsActive = true, Name = "Company217", ThemeId = 65, WebSite = "https://bud.net" },
                        new { Id = 77, ContactNumber = "(253) 469-4735 x77162", CreatedByUserId = "7a3d1395-bd4d-492c-ba90-76c148d7f559", Description = "", Email = "Eloise_Kautzer@gmail.com", IsActive = true, Name = "Company405", ThemeId = 61, WebSite = "http://dayna.net" },
                        new { Id = 78, ContactNumber = "427-618-2961 x924", CreatedByUserId = "14052a15-abbd-4257-8aa3-14b803de5241", Description = "Consequuntur ab facilis modi nihil non laboriosam cumque. Itaque deleniti odio repellendus voluptatem at voluptas eum ratione. Labore dolores perspiciatis autem provident suscipit aut qui suscipit iure. Quo nesciunt reiciendis explicabo odit voluptas reiciendis iusto ipsum necessitatibus.", Email = "Lucius.Stroman81@hotmail.com", IsActive = true, Name = "Company538", ThemeId = 69, WebSite = "https://maeve.name" },
                        new { Id = 79, ContactNumber = "661-685-3039 x2346", CreatedByUserId = "a436d9c3-ce62-4a1e-8293-5b17534d8398", Description = "", Email = "Hilda_Koss82@yahoo.com", IsActive = true, Name = "Company369", ThemeId = 64, WebSite = "http://barney.name" },
                        new { Id = 80, ContactNumber = "1-576-653-5508", CreatedByUserId = "310558b5-97d8-4ad0-a0c0-cc597712123b", Description = "Quas ut sunt in dolorum sit delectus omnis. Facere voluptatum assumenda consequuntur perspiciatis vel exercitationem voluptate qui.", Email = "Dion53@gmail.com", IsActive = true, Name = "Company390", ThemeId = 70, WebSite = "https://syble.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 14, 16, 20, 38, 452, DateTimeKind.Local), FeedbackId = 49, Text = "Delectus et fuga voluptas.", UserId = "310558b5-97d8-4ad0-a0c0-cc597712123b" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 14, 8, 37, 59, 716, DateTimeKind.Local), FeedbackId = 43, Text = "Ipsa ut unde quidem non aut similique odit repellendus.", UserId = "310558b5-97d8-4ad0-a0c0-cc597712123b" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 14, 3, 28, 38, 909, DateTimeKind.Local), FeedbackId = 43, Text = "Delectus voluptatem ut architecto accusantium et.", UserId = "7a3d1395-bd4d-492c-ba90-76c148d7f559" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 14, 19, 6, 2, 517, DateTimeKind.Local), FeedbackId = 48, Text = "Iure qui reiciendis et quo non aut illo voluptatem repudiandae.", UserId = "70f945d0-f3c7-4587-9676-fc089b4451ce" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 14, 18, 26, 35, 500, DateTimeKind.Local), FeedbackId = 43, Text = "Rerum sed eaque quaerat perspiciatis.", UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 14, 6, 11, 14, 132, DateTimeKind.Local), FeedbackId = 44, Text = "Repellendus repellat officia minima aliquam sit delectus illo.", UserId = "70f945d0-f3c7-4587-9676-fc089b4451ce" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 13, 23, 58, 55, 398, DateTimeKind.Local), FeedbackId = 45, Text = "Et tenetur quod minus.", UserId = "863baf8a-b306-4a9f-84f0-5df0a3e7b480" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 14, 7, 45, 39, 740, DateTimeKind.Local), FeedbackId = 45, Text = "Enim commodi amet.", UserId = "a436d9c3-ce62-4a1e-8293-5b17534d8398" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 14, 19, 53, 59, 149, DateTimeKind.Local), FeedbackId = 41, Text = "Sed corrupti est eos inventore magni.", UserId = "7a3d1395-bd4d-492c-ba90-76c148d7f559" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 14, 0, 48, 22, 23, DateTimeKind.Local), FeedbackId = 50, Text = "Recusandae pariatur accusamus exercitationem.", UserId = "b8493acc-5078-4e21-a205-74dc72d89ff8" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme392" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme299" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme342" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme811" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme695" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme642" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme763" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme834" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme901" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme699" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "a436d9c3-ce62-4a1e-8293-5b17534d8398", CreatedAt = new DateTime(2018, 8, 14, 17, 46, 28, 389, DateTimeKind.Local), DisplayName = "Jewell", Email = "Freeman_Dickinson71@yahoo.com", FirstName = "Van", IsActive = true, LastName = "Steuber", RoleId = 1 },
                        new { Id = "7a3d1395-bd4d-492c-ba90-76c148d7f559", CreatedAt = new DateTime(2018, 8, 14, 12, 47, 38, 792, DateTimeKind.Local), DisplayName = "Steve", Email = "Bernita.Kerluke@yahoo.com", FirstName = "Joy", IsActive = true, LastName = "Mraz", RoleId = 2 },
                        new { Id = "310558b5-97d8-4ad0-a0c0-cc597712123b", CreatedAt = new DateTime(2018, 8, 14, 1, 40, 40, 822, DateTimeKind.Local), DisplayName = "Markus", Email = "Santa_Conn@yahoo.com", FirstName = "Jamie", IsActive = true, LastName = "Cremin", RoleId = 1 },
                        new { Id = "76417ced-9632-4ebd-808d-717e70a270d2", CreatedAt = new DateTime(2018, 8, 13, 23, 28, 9, 101, DateTimeKind.Local), DisplayName = "Jamil", Email = "Melyssa27@gmail.com", FirstName = "Chris", IsActive = true, LastName = "Hintz", RoleId = 2 },
                        new { Id = "b8493acc-5078-4e21-a205-74dc72d89ff8", CreatedAt = new DateTime(2018, 8, 14, 2, 2, 13, 262, DateTimeKind.Local), DisplayName = "Milford", Email = "Opal.Schuppe@hotmail.com", FirstName = "Mohammed", IsActive = true, LastName = "Goldner", RoleId = 1 },
                        new { Id = "df57d25e-b21d-490a-8024-d1a04e56934b", CreatedAt = new DateTime(2018, 8, 14, 20, 6, 54, 675, DateTimeKind.Local), DisplayName = "Mike", Email = "Jazmyn.Prohaska50@hotmail.com", FirstName = "Emery", IsActive = true, LastName = "Marks", RoleId = 1 },
                        new { Id = "863baf8a-b306-4a9f-84f0-5df0a3e7b480", CreatedAt = new DateTime(2018, 8, 14, 16, 23, 3, 98, DateTimeKind.Local), DisplayName = "Allie", Email = "Caleb_Crist7@hotmail.com", FirstName = "Lonzo", IsActive = true, LastName = "Toy", RoleId = 1 },
                        new { Id = "70f945d0-f3c7-4587-9676-fc089b4451ce", CreatedAt = new DateTime(2018, 8, 14, 11, 3, 11, 128, DateTimeKind.Local), DisplayName = "Adriel", Email = "Hortense.Tremblay61@gmail.com", FirstName = "Garland", IsActive = true, LastName = "Rodriguez", RoleId = 1 },
                        new { Id = "683266fc-140c-4a5e-ac01-7ff8304a848b", CreatedAt = new DateTime(2018, 8, 14, 16, 55, 21, 957, DateTimeKind.Local), DisplayName = "Leonor", Email = "Misael22@yahoo.com", FirstName = "Fern", IsActive = true, LastName = "Schimmel", RoleId = 2 },
                        new { Id = "14052a15-abbd-4257-8aa3-14b803de5241", CreatedAt = new DateTime(2018, 8, 14, 4, 58, 17, 829, DateTimeKind.Local), DisplayName = "Augustine", Email = "Mariana_Schimmel@yahoo.com", FirstName = "Ryley", IsActive = true, LastName = "Halvorson", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "a436d9c3-ce62-4a1e-8293-5b17534d8398", OrganizationId = 78 },
                        new { UserId = "7a3d1395-bd4d-492c-ba90-76c148d7f559", OrganizationId = 72 },
                        new { UserId = "310558b5-97d8-4ad0-a0c0-cc597712123b", OrganizationId = 78 },
                        new { UserId = "76417ced-9632-4ebd-808d-717e70a270d2", OrganizationId = 75 },
                        new { UserId = "b8493acc-5078-4e21-a205-74dc72d89ff8", OrganizationId = 78 },
                        new { UserId = "df57d25e-b21d-490a-8024-d1a04e56934b", OrganizationId = 74 },
                        new { UserId = "863baf8a-b306-4a9f-84f0-5df0a3e7b480", OrganizationId = 75 },
                        new { UserId = "70f945d0-f3c7-4587-9676-fc089b4451ce", OrganizationId = 75 },
                        new { UserId = "683266fc-140c-4a5e-ac01-7ff8304a848b", OrganizationId = 73 },
                        new { UserId = "14052a15-abbd-4257-8aa3-14b803de5241", OrganizationId = 73 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
