// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    partial class WatcherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 34, Type = 2 },
                        new { Id = 102, DashboardId = 92, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 58, Type = 2 },
                        new { Id = 103, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source3", Threshold = 61, Type = 2 },
                        new { Id = 104, DashboardId = 93, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source3", Threshold = 42, Type = 1 },
                        new { Id = 105, DashboardId = 92, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source2", Threshold = 56, Type = 1 },
                        new { Id = 106, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 25, Type = 0 },
                        new { Id = 107, DashboardId = 96, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source1", Threshold = 32, Type = 0 },
                        new { Id = 108, DashboardId = 98, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source1", Threshold = 87, Type = 0 },
                        new { Id = 109, DashboardId = 91, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 44, Type = 2 },
                        new { Id = 110, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 92, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd", Name = "sed", Type = 0 },
                        new { Id = 22, CreatedById = "52d682db-3377-4f04-b118-9ee72fba6dca", Name = "voluptatem", Type = 0 },
                        new { Id = 23, CreatedById = "96235b10-9c99-4d76-8d35-454cbe4afd4b", Name = "est", Type = 0 },
                        new { Id = 24, CreatedById = "52d682db-3377-4f04-b118-9ee72fba6dca", Name = "consequatur", Type = 0 },
                        new { Id = 25, CreatedById = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", Name = "iure", Type = 0 },
                        new { Id = 26, CreatedById = "96235b10-9c99-4d76-8d35-454cbe4afd4b", Name = "distinctio", Type = 0 },
                        new { Id = 27, CreatedById = "69176035-4bb8-43e5-8a63-138d422223c3", Name = "ab", Type = 0 },
                        new { Id = 28, CreatedById = "52d682db-3377-4f04-b118-9ee72fba6dca", Name = "ab", Type = 0 },
                        new { Id = 29, CreatedById = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", Name = "adipisci", Type = 0 },
                        new { Id = 30, CreatedById = "5f18554c-a17d-43c9-b2f0-79a37c6ec81e", Name = "et", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 21, 12, 38, 55, 581, DateTimeKind.Local), InstanceId = 82, Title = "Title730" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 21, 3, 53, 1, 571, DateTimeKind.Local), InstanceId = 87, Title = "Title425" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 21, 9, 4, 22, 256, DateTimeKind.Local), InstanceId = 84, Title = "Title728" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 21, 7, 6, 53, 604, DateTimeKind.Local), InstanceId = 83, Title = "Title788" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 20, 20, 6, 16, 401, DateTimeKind.Local), InstanceId = 84, Title = "Title724" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 21, 5, 31, 18, 610, DateTimeKind.Local), InstanceId = 83, Title = "Title344" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 21, 4, 9, 34, 733, DateTimeKind.Local), InstanceId = 83, Title = "Title298" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 21, 17, 28, 29, 769, DateTimeKind.Local), InstanceId = 81, Title = "Title266" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 21, 13, 9, 31, 25, DateTimeKind.Local), InstanceId = 84, Title = "Title278" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 21, 4, 33, 0, 943, DateTimeKind.Local), InstanceId = 87, Title = "Title497" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 21, 12, 12, 14, 845, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Maxime excepturi ut.", UserId = "5f18554c-a17d-43c9-b2f0-79a37c6ec81e", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 21, 8, 3, 9, 798, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Nulla quasi voluptatem et necessitatibus unde aperiam quia beatae.", UserId = "69176035-4bb8-43e5-8a63-138d422223c3", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 20, 23, 51, 56, 918, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Autem occaecati placeat accusantium impedit.", UserId = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 21, 2, 45, 58, 6, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Iste consequuntur dignissimos minima ullam eius rerum.", UserId = "52d682db-3377-4f04-b118-9ee72fba6dca", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 21, 4, 1, 10, 408, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Quia sequi illum sed impedit.", UserId = "a0af6468-5fc7-47f4-a87d-71473658f8e6", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 21, 0, 33, 59, 678, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Eum aut eum voluptas.", UserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 21, 2, 32, 48, 63, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Atque blanditiis voluptatem quis quisquam aut quia.", UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 21, 4, 23, 42, 540, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Quisquam fuga maxime dolorum tempore.", UserId = "96235b10-9c99-4d76-8d35-454cbe4afd4b", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 21, 12, 43, 8, 76, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Porro dolore optio non.", UserId = "69176035-4bb8-43e5-8a63-138d422223c3", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 21, 14, 10, 43, 652, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Enim corrupti delectus autem.", UserId = "a0af6468-5fc7-47f4-a87d-71473658f8e6", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "82:9a:82:03:00:c6", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Linux", Title = "Instance899" },
                        new { Id = 82, Address = "dc:87:e3:4f:3f:14", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Linux", Title = "Instance705" },
                        new { Id = 83, Address = "5f:ac:78:74:88:ab", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 76, Platform = "Windows", Title = "Instance789" },
                        new { Id = 84, Address = "1d:6d:e5:aa:c4:96", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Windows", Title = "Instance61" },
                        new { Id = 85, Address = "21:e2:b3:d4:b2:c8", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 77, Platform = "Windows", Title = "Instance838" },
                        new { Id = 86, Address = "e2:2b:33:8f:47:d6", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 72, Platform = "Windows", Title = "Instance286" },
                        new { Id = 87, Address = "46:34:9e:f8:80:6f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 77, Platform = "Windows", Title = "Instance477" },
                        new { Id = 88, Address = "25:28:90:ca:34:7d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Windows", Title = "Instance544" },
                        new { Id = 89, Address = "06:53:d8:46:d9:f1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Linux", Title = "Instance758" },
                        new { Id = 90, Address = "74:e1:a2:81:b9:ed", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Windows", Title = "Instance388" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 28, CreatedAt = new DateTime(2018, 8, 21, 4, 59, 58, 35, DateTimeKind.Local), Text = "Delectus adipisci quo repellendus voluptate expedita cumque pariatur.", UserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", WasRead = false },
                        new { Id = 32, ChatId = 23, CreatedAt = new DateTime(2018, 8, 21, 10, 14, 9, 443, DateTimeKind.Local), Text = "Quia provident non et velit veniam tenetur inventore omnis.", UserId = "52d682db-3377-4f04-b118-9ee72fba6dca", WasRead = true },
                        new { Id = 33, ChatId = 29, CreatedAt = new DateTime(2018, 8, 21, 12, 2, 44, 163, DateTimeKind.Local), Text = "Rem nesciunt non voluptas.", UserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa", WasRead = false },
                        new { Id = 34, ChatId = 24, CreatedAt = new DateTime(2018, 8, 21, 8, 48, 26, 148, DateTimeKind.Local), Text = "Amet nemo et expedita nam.", UserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", WasRead = true },
                        new { Id = 35, ChatId = 27, CreatedAt = new DateTime(2018, 8, 21, 3, 21, 40, 546, DateTimeKind.Local), Text = "Consectetur distinctio occaecati nesciunt tenetur quibusdam.", UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", WasRead = true },
                        new { Id = 36, ChatId = 21, CreatedAt = new DateTime(2018, 8, 21, 3, 1, 50, 596, DateTimeKind.Local), Text = "Voluptatum unde consequatur atque incidunt eligendi odio vel.", UserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", WasRead = true },
                        new { Id = 37, ChatId = 24, CreatedAt = new DateTime(2018, 8, 20, 22, 21, 5, 968, DateTimeKind.Local), Text = "Quod itaque tenetur et.", UserId = "52d682db-3377-4f04-b118-9ee72fba6dca", WasRead = true },
                        new { Id = 38, ChatId = 27, CreatedAt = new DateTime(2018, 8, 21, 15, 1, 5, 714, DateTimeKind.Local), Text = "Et at excepturi hic repellat sunt.", UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", WasRead = false },
                        new { Id = 39, ChatId = 25, CreatedAt = new DateTime(2018, 8, 21, 14, 43, 9, 465, DateTimeKind.Local), Text = "Et impedit omnis.", UserId = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd", WasRead = false },
                        new { Id = 40, ChatId = 29, CreatedAt = new DateTime(2018, 8, 20, 23, 2, 34, 160, DateTimeKind.Local), Text = "Iste est omnis qui quisquam aliquid esse sit voluptas porro.", UserId = "5f18554c-a17d-43c9-b2f0-79a37c6ec81e", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 21, 5, 44, 35, 97, DateTimeKind.Local), NotificationSettingId = 16, Text = "Aperiam iusto repellendus dolor temporibus deleniti occaecati et non animi.", UserId = "5f18554c-a17d-43c9-b2f0-79a37c6ec81e", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 21, 17, 42, 25, 536, DateTimeKind.Local), NotificationSettingId = 13, Text = "Laudantium quia est deserunt soluta.", UserId = "96235b10-9c99-4d76-8d35-454cbe4afd4b", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 21, 8, 53, 20, 648, DateTimeKind.Local), NotificationSettingId = 12, Text = "Et ex consequatur nihil in suscipit qui sunt molestiae sint.", UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 21, 18, 8, 24, 798, DateTimeKind.Local), NotificationSettingId = 18, Text = "Et qui eum est minima explicabo.", UserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 21, 11, 14, 7, 645, DateTimeKind.Local), NotificationSettingId = 15, Text = "Est numquam et similique.", UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 21, 16, 39, 3, 660, DateTimeKind.Local), NotificationSettingId = 16, Text = "Est dignissimos sequi nihil quam omnis earum.", UserId = "a0af6468-5fc7-47f4-a87d-71473658f8e6", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 21, 10, 30, 49, 159, DateTimeKind.Local), NotificationSettingId = 18, Text = "Quod fugit nesciunt.", UserId = "a0af6468-5fc7-47f4-a87d-71473658f8e6", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 21, 10, 15, 32, 899, DateTimeKind.Local), NotificationSettingId = 19, Text = "Exercitationem ad sunt dolorem sapiente harum sunt ratione inventore.", UserId = "a0af6468-5fc7-47f4-a87d-71473658f8e6", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 20, 22, 56, 15, 850, DateTimeKind.Local), NotificationSettingId = 14, Text = "Voluptatem dolores rerum nihil libero corporis deleniti ea est.", UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 21, 5, 44, 18, 584, DateTimeKind.Local), NotificationSettingId = 12, Text = "Debitis ipsa odit corrupti et repudiandae repellendus.", UserId = "69176035-4bb8-43e5-8a63-138d422223c3", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "52d682db-3377-4f04-b118-9ee72fba6dca" },
                        new { Id = 12, IsDisable = false, IsEmailable = true, IsMute = true, Type = 0, UserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa" },
                        new { Id = 14, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "69176035-4bb8-43e5-8a63-138d422223c3" },
                        new { Id = 15, IsDisable = true, IsEmailable = true, IsMute = false, Type = 3, UserId = "52d682db-3377-4f04-b118-9ee72fba6dca" },
                        new { Id = 16, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "06a6f2af-515c-4700-85e9-f1fdc8ad48da" },
                        new { Id = 17, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "69176035-4bb8-43e5-8a63-138d422223c3" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "96235b10-9c99-4d76-8d35-454cbe4afd4b" },
                        new { Id = 19, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd" },
                        new { Id = 20, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "69176035-4bb8-43e5-8a63-138d422223c3" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "456.932.2618 x44946", CreatedByUserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", Description = "Omnis cumque rem in non et enim.", Email = "Loy.Erdman@hotmail.com", IsActive = true, Name = "Company336", ThemeId = 64, WebSite = "https://garnet.com" },
                        new { Id = 72, ContactNumber = "1-770-319-7819 x25287", CreatedByUserId = "06a6f2af-515c-4700-85e9-f1fdc8ad48da", Description = "Ea magni omnis minima expedita sapiente dolorem et. Iste quasi quae error provident. Quas qui rerum et a vel qui ullam facilis.", Email = "Levi_Roob@yahoo.com", IsActive = true, Name = "Company384", ThemeId = 68, WebSite = "http://leora.com" },
                        new { Id = 73, ContactNumber = "294-393-7864 x4089", CreatedByUserId = "a0af6468-5fc7-47f4-a87d-71473658f8e6", Description = "", Email = "Chad_Schneider24@gmail.com", IsActive = true, Name = "Company385", ThemeId = 63, WebSite = "http://jaylon.name" },
                        new { Id = 74, ContactNumber = "(453) 497-8409", CreatedByUserId = "5f18554c-a17d-43c9-b2f0-79a37c6ec81e", Description = "Molestiae qui dolores tenetur possimus itaque ea aut illum perferendis. Perferendis et distinctio repellendus ipsum officia voluptatem rerum aut animi.", Email = "Roy_Trantow@hotmail.com", IsActive = true, Name = "Company7", ThemeId = 66, WebSite = "https://bart.net" },
                        new { Id = 75, ContactNumber = "(976) 496-7823 x34629", CreatedByUserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa", Description = "Est sit soluta ut corporis veritatis eum eaque tempore. Nemo dolor sed suscipit expedita dolores assumenda soluta occaecati. Delectus commodi ut et qui nisi.", Email = "Carli69@gmail.com", IsActive = true, Name = "Company308", ThemeId = 70, WebSite = "https://evelyn.name" },
                        new { Id = 76, ContactNumber = "928-640-1960", CreatedByUserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", Description = "Qui ut et voluptate repellendus et et. Quo quo et quaerat eveniet tempora suscipit exercitationem molestiae sit. Ut repellat enim atque vel dolores commodi harum. Sit quaerat quia esse excepturi quis et non.", Email = "Arnaldo_King32@hotmail.com", IsActive = true, Name = "Company420", ThemeId = 66, WebSite = "https://kaia.net" },
                        new { Id = 77, ContactNumber = "833.665.1752 x4997", CreatedByUserId = "69176035-4bb8-43e5-8a63-138d422223c3", Description = "Velit maxime laborum mollitia quia vel molestiae. Et voluptatem minima earum qui velit neque iure nihil.", Email = "Minnie96@hotmail.com", IsActive = true, Name = "Company539", ThemeId = 64, WebSite = "https://watson.biz" },
                        new { Id = 78, ContactNumber = "975-972-3664", CreatedByUserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", Description = "Repudiandae ut ipsam velit ex fugit aut. Error sunt laudantium. Occaecati magni eveniet et odit distinctio maiores cumque cum.", Email = "Rosemary.Pollich@gmail.com", IsActive = true, Name = "Company723", ThemeId = 64, WebSite = "http://dane.com" },
                        new { Id = 79, ContactNumber = "(332) 612-1068 x490", CreatedByUserId = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd", Description = "Iusto quas aut quas voluptates. Porro ut voluptatibus ab ut rem quia alias facere. Quidem quod quasi aut qui unde illum iste nihil.", Email = "Ludie81@hotmail.com", IsActive = true, Name = "Company335", ThemeId = 66, WebSite = "http://rhea.com" },
                        new { Id = 80, ContactNumber = "1-345-632-5890", CreatedByUserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", Description = "Nulla sed maiores. Non necessitatibus est esse quibusdam voluptatem ad consectetur. Quia voluptas omnis totam error voluptate. Natus enim provident atque provident accusamus.", Email = "Cora61@hotmail.com", IsActive = true, Name = "Company524", ThemeId = 66, WebSite = "https://elmore.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 21, 9, 39, 9, 837, DateTimeKind.Local), FeedbackId = 46, Text = "Dolor est illum voluptas autem.", UserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 20, 19, 9, 19, 706, DateTimeKind.Local), FeedbackId = 41, Text = "Voluptatum nihil consequatur.", UserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 20, 19, 57, 58, 299, DateTimeKind.Local), FeedbackId = 44, Text = "Sequi velit voluptatem soluta ab sit consequatur.", UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 20, 20, 56, 6, 947, DateTimeKind.Local), FeedbackId = 44, Text = "Qui ipsam non necessitatibus.", UserId = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 21, 15, 9, 52, 125, DateTimeKind.Local), FeedbackId = 43, Text = "Aut aut voluptates consequatur aut officiis.", UserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 21, 11, 26, 7, 656, DateTimeKind.Local), FeedbackId = 50, Text = "Qui qui dolores voluptatem rerum consequatur mollitia quia aperiam.", UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 21, 3, 47, 7, 456, DateTimeKind.Local), FeedbackId = 41, Text = "Similique blanditiis tempora voluptas et qui officia temporibus non.", UserId = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 21, 6, 27, 25, 735, DateTimeKind.Local), FeedbackId = 42, Text = "Dolore iure quae consequatur saepe et officia dolores maxime.", UserId = "52d682db-3377-4f04-b118-9ee72fba6dca" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 21, 18, 37, 59, 135, DateTimeKind.Local), FeedbackId = 44, Text = "Ea nostrum quod error quae veniam.", UserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 21, 18, 8, 23, 376, DateTimeKind.Local), FeedbackId = 42, Text = "Placeat doloremque repudiandae qui quidem.", UserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme581" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme207" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme361" },
                        new { Id = 64, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme936" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme417" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme582" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme904" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme978" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme506" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme337" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "52d682db-3377-4f04-b118-9ee72fba6dca", CreatedAt = new DateTime(2018, 8, 21, 13, 35, 32, 925, DateTimeKind.Local), DisplayName = "Lora", Email = "Alisha.Abbott26@yahoo.com", FirstName = "Christina", IsActive = true, LastName = "D'Amore", RoleId = 2 },
                        new { Id = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", CreatedAt = new DateTime(2018, 8, 21, 9, 26, 57, 512, DateTimeKind.Local), DisplayName = "Nathaniel", Email = "Simone_Batz56@hotmail.com", FirstName = "Luz", IsActive = true, LastName = "Douglas", RoleId = 1 },
                        new { Id = "783ab59c-34ee-47dc-be3d-9d0cc68361aa", CreatedAt = new DateTime(2018, 8, 21, 9, 40, 25, 982, DateTimeKind.Local), DisplayName = "Hayley", Email = "Brendan45@yahoo.com", FirstName = "Elisa", IsActive = true, LastName = "Heathcote", RoleId = 2 },
                        new { Id = "96235b10-9c99-4d76-8d35-454cbe4afd4b", CreatedAt = new DateTime(2018, 8, 21, 4, 1, 6, 678, DateTimeKind.Local), DisplayName = "Ernesto", Email = "Roma15@hotmail.com", FirstName = "Donavon", IsActive = true, LastName = "Walsh", RoleId = 1 },
                        new { Id = "06a6f2af-515c-4700-85e9-f1fdc8ad48da", CreatedAt = new DateTime(2018, 8, 21, 7, 33, 43, 726, DateTimeKind.Local), DisplayName = "Jovan", Email = "Herbert.Gulgowski87@hotmail.com", FirstName = "Chad", IsActive = true, LastName = "O'Conner", RoleId = 2 },
                        new { Id = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd", CreatedAt = new DateTime(2018, 8, 21, 10, 8, 56, 773, DateTimeKind.Local), DisplayName = "Ollie", Email = "Edna_Walker@hotmail.com", FirstName = "Alec", IsActive = true, LastName = "Feil", RoleId = 2 },
                        new { Id = "5f18554c-a17d-43c9-b2f0-79a37c6ec81e", CreatedAt = new DateTime(2018, 8, 20, 21, 31, 12, 698, DateTimeKind.Local), DisplayName = "Bernie", Email = "Douglas5@yahoo.com", FirstName = "Rahul", IsActive = true, LastName = "Smith", RoleId = 2 },
                        new { Id = "a0af6468-5fc7-47f4-a87d-71473658f8e6", CreatedAt = new DateTime(2018, 8, 20, 22, 53, 30, 262, DateTimeKind.Local), DisplayName = "Una", Email = "Mabel.Senger83@gmail.com", FirstName = "Garrett", IsActive = true, LastName = "West", RoleId = 2 },
                        new { Id = "69176035-4bb8-43e5-8a63-138d422223c3", CreatedAt = new DateTime(2018, 8, 21, 3, 3, 28, 23, DateTimeKind.Local), DisplayName = "Derick", Email = "Marques_Luettgen22@gmail.com", FirstName = "Kris", IsActive = true, LastName = "Veum", RoleId = 1 },
                        new { Id = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", CreatedAt = new DateTime(2018, 8, 21, 6, 54, 56, 339, DateTimeKind.Local), DisplayName = "Frankie", Email = "Halle88@hotmail.com", FirstName = "Deron", IsActive = true, LastName = "Moen", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "52d682db-3377-4f04-b118-9ee72fba6dca", OrganizationId = 74 },
                        new { UserId = "ecaad6bf-6f0e-4bde-ae83-c5768f3f407a", OrganizationId = 76 },
                        new { UserId = "783ab59c-34ee-47dc-be3d-9d0cc68361aa", OrganizationId = 75 },
                        new { UserId = "96235b10-9c99-4d76-8d35-454cbe4afd4b", OrganizationId = 75 },
                        new { UserId = "06a6f2af-515c-4700-85e9-f1fdc8ad48da", OrganizationId = 78 },
                        new { UserId = "2bd2330f-9ce1-4edb-859a-b854bf6c80fd", OrganizationId = 73 },
                        new { UserId = "5f18554c-a17d-43c9-b2f0-79a37c6ec81e", OrganizationId = 77 },
                        new { UserId = "a0af6468-5fc7-47f4-a87d-71473658f8e6", OrganizationId = 76 },
                        new { UserId = "69176035-4bb8-43e5-8a63-138d422223c3", OrganizationId = 74 },
                        new { UserId = "eaba4a55-51f2-41fa-9fc7-2379e994cd1a", OrganizationId = 78 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
