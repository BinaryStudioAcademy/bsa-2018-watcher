// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180815060236_Added_OrganizationInvite")]
    partial class Added_OrganizationInvite
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source2", Threshold = 87, Type = 0 },
                        new { Id = 102, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 100, Type = 2 },
                        new { Id = 103, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 88, Type = 1 },
                        new { Id = 104, DashboardId = 91, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source1", Threshold = 26, Type = 1 },
                        new { Id = 105, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source3", Threshold = 83, Type = 2 },
                        new { Id = 106, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source3", Threshold = 100, Type = 1 },
                        new { Id = 107, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 73, Type = 0 },
                        new { Id = 108, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source3", Threshold = 37, Type = 1 },
                        new { Id = 109, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 70, Type = 2 },
                        new { Id = 110, DashboardId = 100, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 32, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "92a63027-26d6-44b3-846e-17e4bd460156", Name = "et", Type = 0 },
                        new { Id = 22, CreatedById = "57f36838-f431-4ef1-ade3-9b5a3d10435e", Name = "id", Type = 0 },
                        new { Id = 23, CreatedById = "224b945c-5404-4bb6-ae97-f066113c8ded", Name = "ullam", Type = 0 },
                        new { Id = 24, CreatedById = "d25b8525-424f-42dd-8138-c6257173b2fc", Name = "aspernatur", Type = 0 },
                        new { Id = 25, CreatedById = "2bd9b215-8fdb-4fa2-ad74-20dc2ce11865", Name = "expedita", Type = 0 },
                        new { Id = 26, CreatedById = "f211115d-c672-468a-bf02-00d805c1c9c1", Name = "dolorem", Type = 0 },
                        new { Id = 27, CreatedById = "224b945c-5404-4bb6-ae97-f066113c8ded", Name = "et", Type = 0 },
                        new { Id = 28, CreatedById = "57f36838-f431-4ef1-ade3-9b5a3d10435e", Name = "dicta", Type = 0 },
                        new { Id = 29, CreatedById = "0decc678-4722-4c87-8f83-60585819ed9a", Name = "voluptas", Type = 0 },
                        new { Id = 30, CreatedById = "46619219-9619-4d70-862d-7c039bc9d5a5", Name = "et", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 15, 4, 33, 30, 446, DateTimeKind.Local), InstanceId = 83, Title = "Title612" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 14, 15, 11, 54, 626, DateTimeKind.Local), InstanceId = 89, Title = "Title631" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 15, 6, 43, 12, 86, DateTimeKind.Local), InstanceId = 86, Title = "Title825" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 15, 1, 54, 32, 735, DateTimeKind.Local), InstanceId = 83, Title = "Title255" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 14, 15, 30, 4, 362, DateTimeKind.Local), InstanceId = 89, Title = "Title860" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 14, 10, 7, 50, 646, DateTimeKind.Local), InstanceId = 85, Title = "Title875" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 15, 2, 54, 54, 744, DateTimeKind.Local), InstanceId = 85, Title = "Title180" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 14, 23, 19, 10, 764, DateTimeKind.Local), InstanceId = 89, Title = "Title533" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 14, 11, 10, 47, 7, DateTimeKind.Local), InstanceId = 87, Title = "Title406" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 14, 10, 53, 36, 962, DateTimeKind.Local), InstanceId = 88, Title = "Title385" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 14, 19, 30, 10, 174, DateTimeKind.Local), Text = "Ut placeat doloremque suscipit similique cum occaecati voluptas enim.", UserId = "92a63027-26d6-44b3-846e-17e4bd460156" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 14, 15, 12, 45, 691, DateTimeKind.Local), Text = "Qui vitae omnis qui exercitationem magnam earum ut excepturi.", UserId = "46619219-9619-4d70-862d-7c039bc9d5a5" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 15, 4, 36, 17, 455, DateTimeKind.Local), Text = "Eos placeat et perferendis explicabo et ipsum.", UserId = "92a63027-26d6-44b3-846e-17e4bd460156" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 14, 18, 46, 46, 682, DateTimeKind.Local), Text = "Dolores tenetur voluptatem soluta aut et totam.", UserId = "224b945c-5404-4bb6-ae97-f066113c8ded" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 15, 0, 38, 26, 698, DateTimeKind.Local), Text = "A dolore consequuntur repudiandae illum quam quidem et assumenda aspernatur.", UserId = "f211115d-c672-468a-bf02-00d805c1c9c1" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 14, 14, 34, 28, 704, DateTimeKind.Local), Text = "Molestiae rem illum.", UserId = "92a63027-26d6-44b3-846e-17e4bd460156" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 14, 18, 18, 35, 137, DateTimeKind.Local), Text = "Nobis reprehenderit ea labore pariatur rerum dolorem et.", UserId = "224b945c-5404-4bb6-ae97-f066113c8ded" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 15, 4, 18, 13, 288, DateTimeKind.Local), Text = "Iusto sint sint voluptas facilis et fuga asperiores.", UserId = "2bd9b215-8fdb-4fa2-ad74-20dc2ce11865" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 14, 9, 59, 4, 980, DateTimeKind.Local), Text = "Iste esse molestiae aliquam facilis hic necessitatibus non nesciunt rem.", UserId = "d25b8525-424f-42dd-8138-c6257173b2fc" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 15, 8, 32, 39, 166, DateTimeKind.Local), Text = "Excepturi mollitia aut minima delectus asperiores sint.", UserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "1e:fb:24:0a:f2:9e", OrganizationId = 77, Platform = "Linux" },
                        new { Id = 82, Address = "9d:61:8e:6c:ef:4e", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 83, Address = "87:94:01:b9:40:44", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 84, Address = "84:bc:0c:5c:33:1e", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 85, Address = "42:ab:f2:40:a3:6c", OrganizationId = 76, Platform = "Linux" },
                        new { Id = 86, Address = "1a:62:3a:ea:cd:e7", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 87, Address = "25:91:5c:8d:bf:6e", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 88, Address = "bc:61:86:36:92:3e", OrganizationId = 76, Platform = "Linux" },
                        new { Id = 89, Address = "15:ed:29:44:5c:f7", OrganizationId = 79, Platform = "Windows" },
                        new { Id = 90, Address = "11:36:9e:de:0a:54", OrganizationId = 80, Platform = "Windows" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 23, CreatedAt = new DateTime(2018, 8, 15, 7, 40, 39, 853, DateTimeKind.Local), Text = "Inventore omnis ut et.", UserId = "224b945c-5404-4bb6-ae97-f066113c8ded", WasRead = false },
                        new { Id = 32, ChatId = 24, CreatedAt = new DateTime(2018, 8, 14, 16, 55, 21, 329, DateTimeKind.Local), Text = "In est molestiae consequatur.", UserId = "1bd314e2-35ea-40c2-a9bc-f32a88ff4226", WasRead = false },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 8, 14, 16, 19, 34, 991, DateTimeKind.Local), Text = "Sed suscipit ratione est sed labore ex alias.", UserId = "0decc678-4722-4c87-8f83-60585819ed9a", WasRead = true },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 8, 14, 16, 8, 6, 687, DateTimeKind.Local), Text = "Eum ut soluta quod.", UserId = "f211115d-c672-468a-bf02-00d805c1c9c1", WasRead = false },
                        new { Id = 35, ChatId = 22, CreatedAt = new DateTime(2018, 8, 14, 21, 8, 52, 527, DateTimeKind.Local), Text = "Rerum libero deleniti tempora.", UserId = "f211115d-c672-468a-bf02-00d805c1c9c1", WasRead = true },
                        new { Id = 36, ChatId = 27, CreatedAt = new DateTime(2018, 8, 15, 3, 17, 39, 374, DateTimeKind.Local), Text = "Architecto earum enim et dignissimos quasi.", UserId = "92a63027-26d6-44b3-846e-17e4bd460156", WasRead = true },
                        new { Id = 37, ChatId = 23, CreatedAt = new DateTime(2018, 8, 14, 22, 30, 32, 589, DateTimeKind.Local), Text = "Qui sint delectus magni non eveniet in consequuntur aspernatur officiis.", UserId = "d25b8525-424f-42dd-8138-c6257173b2fc", WasRead = false },
                        new { Id = 38, ChatId = 23, CreatedAt = new DateTime(2018, 8, 15, 2, 14, 29, 87, DateTimeKind.Local), Text = "Deleniti ipsum enim quibusdam vero rerum.", UserId = "88f2de3e-70c2-456e-8dd6-73a2567f8fcd", WasRead = false },
                        new { Id = 39, ChatId = 21, CreatedAt = new DateTime(2018, 8, 15, 0, 40, 23, 278, DateTimeKind.Local), Text = "Voluptas ut est sit natus eaque saepe non totam consequatur.", UserId = "92a63027-26d6-44b3-846e-17e4bd460156", WasRead = false },
                        new { Id = 40, ChatId = 28, CreatedAt = new DateTime(2018, 8, 14, 12, 12, 0, 392, DateTimeKind.Local), Text = "Maiores ea ut totam quas perferendis culpa asperiores deserunt labore.", UserId = "d25b8525-424f-42dd-8138-c6257173b2fc", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 15, 5, 56, 27, 353, DateTimeKind.Local), NotificationSettingId = 11, Text = "Et numquam ipsum nesciunt non.", UserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 14, 11, 24, 44, 23, DateTimeKind.Local), NotificationSettingId = 16, Text = "Totam voluptatum qui nemo.", UserId = "f211115d-c672-468a-bf02-00d805c1c9c1" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 14, 10, 35, 23, 632, DateTimeKind.Local), NotificationSettingId = 15, Text = "A fuga autem velit atque hic laudantium dolores quo.", UserId = "46619219-9619-4d70-862d-7c039bc9d5a5" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 15, 3, 8, 18, 602, DateTimeKind.Local), NotificationSettingId = 16, Text = "Beatae sed quaerat eum.", UserId = "1bd314e2-35ea-40c2-a9bc-f32a88ff4226" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 14, 17, 12, 6, 498, DateTimeKind.Local), NotificationSettingId = 17, Text = "Consequuntur labore dolor necessitatibus aspernatur sunt.", UserId = "224b945c-5404-4bb6-ae97-f066113c8ded" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 15, 0, 10, 47, 529, DateTimeKind.Local), NotificationSettingId = 12, Text = "Repellendus non necessitatibus.", UserId = "224b945c-5404-4bb6-ae97-f066113c8ded" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 15, 6, 51, 7, 183, DateTimeKind.Local), NotificationSettingId = 16, Text = "Voluptatem ut impedit voluptatem.", UserId = "88f2de3e-70c2-456e-8dd6-73a2567f8fcd" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 15, 8, 40, 58, 893, DateTimeKind.Local), NotificationSettingId = 19, Text = "Fugit reprehenderit enim consectetur et expedita et.", UserId = "f211115d-c672-468a-bf02-00d805c1c9c1" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 15, 5, 30, 42, 281, DateTimeKind.Local), NotificationSettingId = 20, Text = "Laborum enim eum vel aut necessitatibus.", UserId = "1bd314e2-35ea-40c2-a9bc-f32a88ff4226" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 15, 7, 58, 1, 531, DateTimeKind.Local), NotificationSettingId = 13, Text = "Dolore impedit rerum beatae labore molestiae similique eum ea aperiam.", UserId = "2bd9b215-8fdb-4fa2-ad74-20dc2ce11865" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "46619219-9619-4d70-862d-7c039bc9d5a5" },
                        new { Id = 12, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "d25b8525-424f-42dd-8138-c6257173b2fc" },
                        new { Id = 13, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "d25b8525-424f-42dd-8138-c6257173b2fc" },
                        new { Id = 14, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e" },
                        new { Id = 15, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "d25b8525-424f-42dd-8138-c6257173b2fc" },
                        new { Id = 16, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "46619219-9619-4d70-862d-7c039bc9d5a5" },
                        new { Id = 17, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "0decc678-4722-4c87-8f83-60585819ed9a" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "88f2de3e-70c2-456e-8dd6-73a2567f8fcd" },
                        new { Id = 19, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "46619219-9619-4d70-862d-7c039bc9d5a5" },
                        new { Id = 20, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "88f2de3e-70c2-456e-8dd6-73a2567f8fcd" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "802-895-5874", CreatedByUserId = "224b945c-5404-4bb6-ae97-f066113c8ded", Description = "Provident veritatis eveniet libero fuga sit quisquam aut. Voluptates similique consequatur officia qui illo a ratione sunt optio. Minima vel amet nisi aut soluta consequuntur aperiam id atque. Sit consequatur culpa non.", Email = "Estefania_Beer@hotmail.com", IsActive = true, Name = "Company337", ThemeId = 62, WebSite = "https://clovis.biz" },
                        new { Id = 72, ContactNumber = "(572) 670-3185 x598", CreatedByUserId = "88f2de3e-70c2-456e-8dd6-73a2567f8fcd", Description = "Excepturi quisquam eum quidem consequatur. Repellendus quibusdam quia velit. Velit sit consequatur voluptatem quia sunt aut expedita provident.", Email = "Jarrod86@hotmail.com", IsActive = true, Name = "Company975", ThemeId = 68, WebSite = "http://alaina.net" },
                        new { Id = 73, ContactNumber = "718.636.2775 x8962", CreatedByUserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e", Description = "Et totam recusandae ut sequi sed est. Et ex illum sit iure consectetur facere adipisci. Fuga qui et ipsum quis nihil nisi molestiae qui.", Email = "Clair_Beier@gmail.com", IsActive = true, Name = "Company979", ThemeId = 62, WebSite = "http://cullen.com" },
                        new { Id = 74, ContactNumber = "1-790-580-3586 x107", CreatedByUserId = "224b945c-5404-4bb6-ae97-f066113c8ded", Description = "Qui omnis officia consequatur suscipit dolorem. Natus in placeat quo ut ut sit. Repudiandae reiciendis doloribus molestiae eos omnis quis soluta et. Quos temporibus nisi sunt ut natus.", Email = "Wilfrid.Gorczany95@yahoo.com", IsActive = true, Name = "Company177", ThemeId = 64, WebSite = "http://paige.name" },
                        new { Id = 75, ContactNumber = "(275) 306-1087", CreatedByUserId = "f211115d-c672-468a-bf02-00d805c1c9c1", Description = "Beatae sunt molestiae voluptas aperiam voluptatem doloribus illo amet. Ut architecto maiores est eius repellat eligendi. Sit repudiandae vero in.", Email = "Matt70@gmail.com", IsActive = true, Name = "Company465", ThemeId = 63, WebSite = "http://rosemary.name" },
                        new { Id = 76, ContactNumber = "1-646-688-4036", CreatedByUserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e", Description = "Voluptate voluptatum velit commodi id possimus nihil. Soluta animi consectetur eos illum itaque fugit et nobis modi. Tempora est et et ducimus labore iste neque inventore in.", Email = "Seamus.Cormier@gmail.com", IsActive = true, Name = "Company703", ThemeId = 61, WebSite = "https://rose.biz" },
                        new { Id = 77, ContactNumber = "238-497-5416 x489", CreatedByUserId = "92a63027-26d6-44b3-846e-17e4bd460156", Description = "Consequuntur quae deserunt est excepturi quis quas natus. Sit sit porro a. Et consequuntur dicta vel et laborum sunt. Nihil dolore voluptatem nulla ut molestiae maiores quas est aut.", Email = "Terry.Hyatt78@yahoo.com", IsActive = true, Name = "Company632", ThemeId = 62, WebSite = "https://bruce.info" },
                        new { Id = 78, ContactNumber = "(287) 653-4826 x23336", CreatedByUserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e", Description = "Sunt facilis velit aut sit possimus provident. Eveniet deserunt perspiciatis consequatur fugit nostrum facere eaque.", Email = "Jermaine49@gmail.com", IsActive = true, Name = "Company12", ThemeId = 63, WebSite = "https://catharine.net" },
                        new { Id = 79, ContactNumber = "915.392.5288", CreatedByUserId = "1bd314e2-35ea-40c2-a9bc-f32a88ff4226", Description = "Quae fuga consequatur recusandae quo. Quis ducimus corporis asperiores. Esse et reprehenderit. Ut sed nulla.", Email = "Jamar16@gmail.com", IsActive = true, Name = "Company250", ThemeId = 63, WebSite = "http://kameron.net" },
                        new { Id = 80, ContactNumber = "(571) 582-3311 x308", CreatedByUserId = "46619219-9619-4d70-862d-7c039bc9d5a5", Description = "", Email = "Herta.Hodkiewicz@gmail.com", IsActive = true, Name = "Company723", ThemeId = 62, WebSite = "http://darius.net" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 15, 5, 11, 21, 509, DateTimeKind.Local), FeedbackId = 49, Text = "Nam iusto aut.", UserId = "46619219-9619-4d70-862d-7c039bc9d5a5" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 14, 12, 56, 27, 59, DateTimeKind.Local), FeedbackId = 49, Text = "Omnis nemo repellat est.", UserId = "d25b8525-424f-42dd-8138-c6257173b2fc" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 14, 9, 12, 30, 526, DateTimeKind.Local), FeedbackId = 44, Text = "Corporis debitis est ea sed tempora rem.", UserId = "d25b8525-424f-42dd-8138-c6257173b2fc" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 15, 4, 7, 59, 948, DateTimeKind.Local), FeedbackId = 50, Text = "Id nisi accusantium.", UserId = "46619219-9619-4d70-862d-7c039bc9d5a5" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 14, 14, 8, 16, 186, DateTimeKind.Local), FeedbackId = 44, Text = "Ut omnis qui libero.", UserId = "88f2de3e-70c2-456e-8dd6-73a2567f8fcd" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 15, 1, 38, 13, 209, DateTimeKind.Local), FeedbackId = 43, Text = "Optio et molestiae at tempore et velit est nam sed.", UserId = "2bd9b215-8fdb-4fa2-ad74-20dc2ce11865" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 15, 3, 17, 11, 152, DateTimeKind.Local), FeedbackId = 47, Text = "Consectetur odio alias eum id magnam pariatur facere aut.", UserId = "46619219-9619-4d70-862d-7c039bc9d5a5" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 14, 20, 16, 53, 576, DateTimeKind.Local), FeedbackId = 41, Text = "Quae assumenda harum dicta quas quae nesciunt.", UserId = "1bd314e2-35ea-40c2-a9bc-f32a88ff4226" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 14, 17, 14, 38, 591, DateTimeKind.Local), FeedbackId = 41, Text = "Expedita qui voluptate.", UserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 14, 10, 2, 34, 838, DateTimeKind.Local), FeedbackId = 42, Text = "Ex asperiores molestias similique eum nam.", UserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme111" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme141" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme917" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme569" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme374" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme843" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme791" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme477" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme136" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme270" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "0decc678-4722-4c87-8f83-60585819ed9a", CreatedAt = new DateTime(2018, 8, 14, 11, 59, 4, 850, DateTimeKind.Local), DisplayName = "Arvilla", Email = "Terry_Skiles45@hotmail.com", FirstName = "Elsa", IsActive = true, LastName = "Smitham", RoleId = 1 },
                        new { Id = "88f2de3e-70c2-456e-8dd6-73a2567f8fcd", CreatedAt = new DateTime(2018, 8, 15, 0, 52, 51, 365, DateTimeKind.Local), DisplayName = "Alia", Email = "Kareem_Haag21@yahoo.com", FirstName = "Osvaldo", IsActive = true, LastName = "Rodriguez", RoleId = 1 },
                        new { Id = "224b945c-5404-4bb6-ae97-f066113c8ded", CreatedAt = new DateTime(2018, 8, 14, 17, 7, 23, 237, DateTimeKind.Local), DisplayName = "Lauretta", Email = "Freda_Medhurst@hotmail.com", FirstName = "Elnora", IsActive = true, LastName = "Heathcote", RoleId = 2 },
                        new { Id = "57f36838-f431-4ef1-ade3-9b5a3d10435e", CreatedAt = new DateTime(2018, 8, 15, 0, 1, 57, 819, DateTimeKind.Local), DisplayName = "Ayla", Email = "Eliseo47@gmail.com", FirstName = "Jacinto", IsActive = true, LastName = "Pouros", RoleId = 2 },
                        new { Id = "f211115d-c672-468a-bf02-00d805c1c9c1", CreatedAt = new DateTime(2018, 8, 15, 4, 15, 2, 583, DateTimeKind.Local), DisplayName = "Kareem", Email = "Virgie.Ankunding@hotmail.com", FirstName = "Ansley", IsActive = true, LastName = "Jakubowski", RoleId = 2 },
                        new { Id = "92a63027-26d6-44b3-846e-17e4bd460156", CreatedAt = new DateTime(2018, 8, 14, 21, 46, 18, 534, DateTimeKind.Local), DisplayName = "Unique", Email = "Juston12@hotmail.com", FirstName = "Olin", IsActive = true, LastName = "Bergnaum", RoleId = 1 },
                        new { Id = "2bd9b215-8fdb-4fa2-ad74-20dc2ce11865", CreatedAt = new DateTime(2018, 8, 15, 6, 28, 24, 853, DateTimeKind.Local), DisplayName = "Cristian", Email = "Ericka.Bechtelar24@yahoo.com", FirstName = "Elenor", IsActive = true, LastName = "Rice", RoleId = 2 },
                        new { Id = "46619219-9619-4d70-862d-7c039bc9d5a5", CreatedAt = new DateTime(2018, 8, 15, 6, 11, 24, 805, DateTimeKind.Local), DisplayName = "Lenore", Email = "Stephan_Schmitt35@yahoo.com", FirstName = "Andres", IsActive = true, LastName = "Skiles", RoleId = 1 },
                        new { Id = "1bd314e2-35ea-40c2-a9bc-f32a88ff4226", CreatedAt = new DateTime(2018, 8, 15, 6, 20, 48, 274, DateTimeKind.Local), DisplayName = "Agustin", Email = "Nathan_Flatley@yahoo.com", FirstName = "Jude", IsActive = true, LastName = "Waelchi", RoleId = 2 },
                        new { Id = "d25b8525-424f-42dd-8138-c6257173b2fc", CreatedAt = new DateTime(2018, 8, 15, 7, 15, 42, 58, DateTimeKind.Local), DisplayName = "Hoyt", Email = "Claudine_Cruickshank@yahoo.com", FirstName = "Abagail", IsActive = true, LastName = "Fay", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "0decc678-4722-4c87-8f83-60585819ed9a", OrganizationId = 79 },
                        new { UserId = "88f2de3e-70c2-456e-8dd6-73a2567f8fcd", OrganizationId = 72 },
                        new { UserId = "224b945c-5404-4bb6-ae97-f066113c8ded", OrganizationId = 74 },
                        new { UserId = "57f36838-f431-4ef1-ade3-9b5a3d10435e", OrganizationId = 71 },
                        new { UserId = "f211115d-c672-468a-bf02-00d805c1c9c1", OrganizationId = 77 },
                        new { UserId = "92a63027-26d6-44b3-846e-17e4bd460156", OrganizationId = 74 },
                        new { UserId = "2bd9b215-8fdb-4fa2-ad74-20dc2ce11865", OrganizationId = 72 },
                        new { UserId = "46619219-9619-4d70-862d-7c039bc9d5a5", OrganizationId = 75 },
                        new { UserId = "1bd314e2-35ea-40c2-a9bc-f32a88ff4226", OrganizationId = 75 },
                        new { UserId = "d25b8525-424f-42dd-8138-c6257173b2fc", OrganizationId = 75 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
