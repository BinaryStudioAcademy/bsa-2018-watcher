// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180816113645_OrganizationInvite_added_InviteEmail_feald")]
    partial class OrganizationInvite_added_InviteEmail_feald
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 93, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source3", Threshold = 73, Type = 0 },
                        new { Id = 102, DashboardId = 95, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 22, Type = 2 },
                        new { Id = 103, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 90, Type = 1 },
                        new { Id = 104, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source2", Threshold = 82, Type = 0 },
                        new { Id = 105, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 99, Type = 0 },
                        new { Id = 106, DashboardId = 93, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source1", Threshold = 53, Type = 1 },
                        new { Id = 107, DashboardId = 96, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 22, Type = 1 },
                        new { Id = 108, DashboardId = 93, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source2", Threshold = 0, Type = 0 },
                        new { Id = 109, DashboardId = 98, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 93, Type = 1 },
                        new { Id = 110, DashboardId = 100, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 90, Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "809d33df-f119-43b0-8627-6553ccf484c8", Name = "unde", Type = 0 },
                        new { Id = 22, CreatedById = "920895bb-0bf8-46c8-996a-2730d14086fe", Name = "delectus", Type = 0 },
                        new { Id = 23, CreatedById = "4b0f0015-4592-4c6b-a021-e3eda54ced32", Name = "dolor", Type = 0 },
                        new { Id = 24, CreatedById = "920895bb-0bf8-46c8-996a-2730d14086fe", Name = "non", Type = 0 },
                        new { Id = 25, CreatedById = "4be27e39-6654-495c-b3f2-ba26be8cb54b", Name = "tenetur", Type = 0 },
                        new { Id = 26, CreatedById = "809d33df-f119-43b0-8627-6553ccf484c8", Name = "architecto", Type = 0 },
                        new { Id = 27, CreatedById = "920895bb-0bf8-46c8-996a-2730d14086fe", Name = "cum", Type = 0 },
                        new { Id = 28, CreatedById = "4be27e39-6654-495c-b3f2-ba26be8cb54b", Name = "praesentium", Type = 0 },
                        new { Id = 29, CreatedById = "2bc44d1c-425a-40ad-9fc4-76bcff6a8154", Name = "consequatur", Type = 0 },
                        new { Id = 30, CreatedById = "920895bb-0bf8-46c8-996a-2730d14086fe", Name = "sit", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 16, 10, 53, 53, 724, DateTimeKind.Local), InstanceId = 90, Title = "Title193" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 16, 4, 14, 11, 809, DateTimeKind.Local), InstanceId = 88, Title = "Title269" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 16, 9, 55, 4, 984, DateTimeKind.Local), InstanceId = 90, Title = "Title72" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 15, 22, 45, 30, 545, DateTimeKind.Local), InstanceId = 81, Title = "Title477" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 15, 17, 48, 42, 643, DateTimeKind.Local), InstanceId = 86, Title = "Title711" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 16, 3, 4, 14, 553, DateTimeKind.Local), InstanceId = 82, Title = "Title226" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 15, 17, 11, 31, 91, DateTimeKind.Local), InstanceId = 87, Title = "Title510" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 16, 3, 11, 14, 866, DateTimeKind.Local), InstanceId = 90, Title = "Title430" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 16, 7, 39, 56, 510, DateTimeKind.Local), InstanceId = 86, Title = "Title31" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 16, 3, 46, 56, 849, DateTimeKind.Local), InstanceId = 84, Title = "Title961" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 15, 18, 47, 20, 648, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Quisquam suscipit omnis ut quis dolorem.", UserId = "809d33df-f119-43b0-8627-6553ccf484c8", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 16, 5, 48, 2, 394, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Corrupti veniam doloribus sunt.", UserId = "c1db6f4c-aeb7-4d80-89b8-44d1849edda6", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 16, 4, 0, 44, 794, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Officiis totam quia voluptas et.", UserId = "920895bb-0bf8-46c8-996a-2730d14086fe", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 16, 14, 2, 24, 643, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Mollitia rerum ut enim.", UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 16, 2, 9, 57, 505, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Delectus est deserunt soluta temporibus reprehenderit rem dolor autem.", UserId = "301009ad-044d-4992-98d7-441cda647c1b", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 16, 13, 52, 17, 845, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Repellat necessitatibus in qui.", UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 15, 19, 19, 58, 995, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Sunt nulla et.", UserId = "c1db6f4c-aeb7-4d80-89b8-44d1849edda6", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 16, 2, 18, 24, 544, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Perspiciatis harum quidem molestiae non.", UserId = "809d33df-f119-43b0-8627-6553ccf484c8", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 16, 6, 53, 17, 839, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Porro voluptatem vel et nobis ab tenetur in est eum.", UserId = "301009ad-044d-4992-98d7-441cda647c1b", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 16, 9, 40, 6, 688, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Autem aliquam voluptatem commodi.", UserId = "4b0f0015-4592-4c6b-a021-e3eda54ced32", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "fd:8c:4e:fc:cf:bb", OrganizationId = 76, Platform = "Linux" },
                        new { Id = 82, Address = "5a:13:21:83:16:0f", OrganizationId = 77, Platform = "Windows" },
                        new { Id = 83, Address = "9a:d8:70:eb:80:78", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 84, Address = "81:47:9e:bc:6c:53", OrganizationId = 78, Platform = "Windows" },
                        new { Id = 85, Address = "81:3a:b7:53:69:dd", OrganizationId = 72, Platform = "Windows" },
                        new { Id = 86, Address = "85:e0:e5:ec:ec:4f", OrganizationId = 74, Platform = "Windows" },
                        new { Id = 87, Address = "cb:27:a0:45:b4:6f", OrganizationId = 72, Platform = "Windows" },
                        new { Id = 88, Address = "54:ef:7b:87:1d:cf", OrganizationId = 78, Platform = "Linux" },
                        new { Id = 89, Address = "5f:b2:02:dc:57:48", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 90, Address = "a8:46:65:a0:92:4c", OrganizationId = 75, Platform = "Linux" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 26, CreatedAt = new DateTime(2018, 8, 16, 3, 53, 32, 780, DateTimeKind.Local), Text = "Velit consequuntur non et est facere tempora optio.", UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc", WasRead = false },
                        new { Id = 32, ChatId = 27, CreatedAt = new DateTime(2018, 8, 15, 20, 55, 28, 317, DateTimeKind.Local), Text = "Ducimus ea et id voluptatem eaque sit qui ipsum quia.", UserId = "920895bb-0bf8-46c8-996a-2730d14086fe", WasRead = false },
                        new { Id = 33, ChatId = 22, CreatedAt = new DateTime(2018, 8, 15, 19, 18, 41, 480, DateTimeKind.Local), Text = "Voluptas eveniet et perferendis omnis sit aliquid delectus.", UserId = "d1ca79c3-d251-4d2e-8617-daa6e2c6322a", WasRead = true },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 8, 15, 20, 20, 30, 332, DateTimeKind.Local), Text = "Perferendis ipsam vitae iste delectus id ut aut.", UserId = "a4445bd2-b428-423a-9e33-e93bfa3a39b1", WasRead = true },
                        new { Id = 35, ChatId = 29, CreatedAt = new DateTime(2018, 8, 15, 20, 48, 10, 397, DateTimeKind.Local), Text = "Illo doloremque aut qui ipsum voluptates aut perspiciatis.", UserId = "4be27e39-6654-495c-b3f2-ba26be8cb54b", WasRead = false },
                        new { Id = 36, ChatId = 29, CreatedAt = new DateTime(2018, 8, 16, 0, 57, 1, 947, DateTimeKind.Local), Text = "Laborum aspernatur qui asperiores et dicta in.", UserId = "4b0f0015-4592-4c6b-a021-e3eda54ced32", WasRead = true },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 8, 16, 11, 21, 40, 316, DateTimeKind.Local), Text = "Est sapiente excepturi culpa.", UserId = "809d33df-f119-43b0-8627-6553ccf484c8", WasRead = false },
                        new { Id = 38, ChatId = 21, CreatedAt = new DateTime(2018, 8, 16, 8, 34, 9, 837, DateTimeKind.Local), Text = "Minima voluptatem nesciunt dolorum quidem voluptatem corrupti nesciunt vitae.", UserId = "d1ca79c3-d251-4d2e-8617-daa6e2c6322a", WasRead = false },
                        new { Id = 39, ChatId = 25, CreatedAt = new DateTime(2018, 8, 16, 6, 20, 33, 634, DateTimeKind.Local), Text = "Ipsum impedit sequi.", UserId = "301009ad-044d-4992-98d7-441cda647c1b", WasRead = false },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 8, 16, 7, 8, 9, 213, DateTimeKind.Local), Text = "Quia error tempore in hic laudantium.", UserId = "2bc44d1c-425a-40ad-9fc4-76bcff6a8154", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 15, 20, 14, 47, 496, DateTimeKind.Local), NotificationSettingId = 12, Text = "Dicta quaerat molestiae eos nulla.", UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 16, 14, 35, 15, 563, DateTimeKind.Local), NotificationSettingId = 18, Text = "Non impedit veritatis quia dolores voluptatem sed explicabo nobis facilis.", UserId = "2bc44d1c-425a-40ad-9fc4-76bcff6a8154" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 15, 22, 34, 29, 514, DateTimeKind.Local), NotificationSettingId = 20, Text = "Rerum nesciunt in sint alias corrupti qui laudantium.", UserId = "809d33df-f119-43b0-8627-6553ccf484c8" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 16, 11, 11, 47, 353, DateTimeKind.Local), NotificationSettingId = 19, Text = "Veniam eligendi veritatis molestias et quasi.", UserId = "301009ad-044d-4992-98d7-441cda647c1b" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 16, 9, 25, 39, 446, DateTimeKind.Local), NotificationSettingId = 20, Text = "Eos incidunt et ut sint in.", UserId = "d1ca79c3-d251-4d2e-8617-daa6e2c6322a" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 16, 5, 33, 27, 149, DateTimeKind.Local), NotificationSettingId = 11, Text = "Quis natus voluptatibus reiciendis dignissimos nulla ipsum et.", UserId = "809d33df-f119-43b0-8627-6553ccf484c8" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 15, 18, 47, 7, 374, DateTimeKind.Local), NotificationSettingId = 13, Text = "Corporis est voluptatibus excepturi doloremque dolor ea non ut voluptate.", UserId = "4be27e39-6654-495c-b3f2-ba26be8cb54b" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 16, 8, 37, 6, 325, DateTimeKind.Local), NotificationSettingId = 12, Text = "Ut id similique consequatur.", UserId = "4b0f0015-4592-4c6b-a021-e3eda54ced32" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 16, 5, 8, 49, 445, DateTimeKind.Local), NotificationSettingId = 15, Text = "Architecto quisquam quo vitae veritatis.", UserId = "a4445bd2-b428-423a-9e33-e93bfa3a39b1" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 15, 15, 17, 17, 597, DateTimeKind.Local), NotificationSettingId = 20, Text = "Consequatur autem accusamus non delectus quis voluptate perspiciatis eaque doloremque.", UserId = "809d33df-f119-43b0-8627-6553ccf484c8" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "c1db6f4c-aeb7-4d80-89b8-44d1849edda6" },
                        new { Id = 12, IsDisable = false, IsEmailable = false, IsMute = true, Type = 4, UserId = "920895bb-0bf8-46c8-996a-2730d14086fe" },
                        new { Id = 13, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "4b0f0015-4592-4c6b-a021-e3eda54ced32" },
                        new { Id = 14, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "301009ad-044d-4992-98d7-441cda647c1b" },
                        new { Id = 15, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "809d33df-f119-43b0-8627-6553ccf484c8" },
                        new { Id = 16, IsDisable = false, IsEmailable = true, IsMute = false, Type = 4, UserId = "a4445bd2-b428-423a-9e33-e93bfa3a39b1" },
                        new { Id = 17, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "809d33df-f119-43b0-8627-6553ccf484c8" },
                        new { Id = 18, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "c1db6f4c-aeb7-4d80-89b8-44d1849edda6" },
                        new { Id = 19, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc" },
                        new { Id = 20, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "4b0f0015-4592-4c6b-a021-e3eda54ced32" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-280-719-5102", CreatedByUserId = "809d33df-f119-43b0-8627-6553ccf484c8", Description = "In nulla odit cumque rerum deserunt quas. Fugiat laborum ad voluptatum.", Email = "Phoebe.McCullough27@gmail.com", IsActive = true, Name = "Company495", ThemeId = 69, WebSite = "https://carol.com" },
                        new { Id = 72, ContactNumber = "(220) 842-1637 x73306", CreatedByUserId = "4be27e39-6654-495c-b3f2-ba26be8cb54b", Description = "Atque totam suscipit asperiores numquam vitae. Et quo minima soluta voluptatem tempora in perferendis velit quae. Est hic consequatur nesciunt architecto ullam qui. Aut voluptates voluptas et hic dolorem.", Email = "Dennis.Ankunding17@gmail.com", IsActive = true, Name = "Company841", ThemeId = 67, WebSite = "http://aubrey.biz" },
                        new { Id = 73, ContactNumber = "1-379-325-0963 x305", CreatedByUserId = "2bc44d1c-425a-40ad-9fc4-76bcff6a8154", Description = "Maiores et repudiandae sit excepturi quidem omnis temporibus iure praesentium. Nobis officiis et optio. Voluptatem aut necessitatibus voluptas earum dolor necessitatibus.", Email = "Susana.Stamm11@hotmail.com", IsActive = true, Name = "Company785", ThemeId = 65, WebSite = "https://thea.info" },
                        new { Id = 74, ContactNumber = "1-686-933-4181 x3972", CreatedByUserId = "4be27e39-6654-495c-b3f2-ba26be8cb54b", Description = "Iure eaque consequatur quia ad sint aliquid inventore.", Email = "Jaeden.Feeney13@hotmail.com", IsActive = true, Name = "Company160", ThemeId = 64, WebSite = "https://fausto.com" },
                        new { Id = 75, ContactNumber = "784-645-0206", CreatedByUserId = "d1ca79c3-d251-4d2e-8617-daa6e2c6322a", Description = "Id maxime possimus ut officiis nihil libero quidem. Veritatis ipsa amet rerum nemo corporis inventore ab laboriosam. Cum voluptate est cum rem aut est omnis ea quia. Unde expedita neque at tempora aut voluptatem qui est.", Email = "Kathleen64@hotmail.com", IsActive = true, Name = "Company156", ThemeId = 69, WebSite = "https://kelton.net" },
                        new { Id = 76, ContactNumber = "(729) 402-5163 x3053", CreatedByUserId = "809d33df-f119-43b0-8627-6553ccf484c8", Description = "", Email = "Julian.OConner@yahoo.com", IsActive = true, Name = "Company186", ThemeId = 61, WebSite = "http://vivien.biz" },
                        new { Id = 77, ContactNumber = "1-635-289-8537", CreatedByUserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc", Description = "", Email = "Kendall.Lemke48@gmail.com", IsActive = true, Name = "Company499", ThemeId = 67, WebSite = "http://tyra.biz" },
                        new { Id = 78, ContactNumber = "915-204-0327", CreatedByUserId = "4b0f0015-4592-4c6b-a021-e3eda54ced32", Description = "", Email = "Clarabelle63@hotmail.com", IsActive = true, Name = "Company767", ThemeId = 70, WebSite = "http://bernadine.net" },
                        new { Id = 79, ContactNumber = "488-469-4317", CreatedByUserId = "301009ad-044d-4992-98d7-441cda647c1b", Description = "Voluptatem occaecati officiis eligendi nobis repudiandae saepe impedit. Sint assumenda corrupti nobis praesentium nulla. Asperiores cupiditate quisquam numquam molestiae.", Email = "Celia_Larkin70@yahoo.com", IsActive = true, Name = "Company419", ThemeId = 68, WebSite = "http://silas.net" },
                        new { Id = 80, ContactNumber = "1-880-902-9084 x5412", CreatedByUserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc", Description = "", Email = "Kaylin_Schumm@yahoo.com", IsActive = true, Name = "Company141", ThemeId = 64, WebSite = "https://melody.org" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 15, 17, 56, 33, 417, DateTimeKind.Local), FeedbackId = 43, Text = "Aut molestiae sed aut possimus in et omnis fugiat aliquid.", UserId = "809d33df-f119-43b0-8627-6553ccf484c8" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 16, 13, 11, 7, 835, DateTimeKind.Local), FeedbackId = 47, Text = "Minima sunt adipisci dicta ut.", UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 15, 20, 39, 29, 684, DateTimeKind.Local), FeedbackId = 47, Text = "Quae deleniti cupiditate vitae.", UserId = "301009ad-044d-4992-98d7-441cda647c1b" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 15, 18, 4, 50, 446, DateTimeKind.Local), FeedbackId = 48, Text = "Est enim nesciunt.", UserId = "920895bb-0bf8-46c8-996a-2730d14086fe" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 16, 7, 1, 44, 883, DateTimeKind.Local), FeedbackId = 50, Text = "Quod veniam aut consectetur error suscipit cupiditate.", UserId = "809d33df-f119-43b0-8627-6553ccf484c8" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 15, 20, 5, 59, 150, DateTimeKind.Local), FeedbackId = 44, Text = "Nobis dolorem minima eos qui id velit.", UserId = "d1ca79c3-d251-4d2e-8617-daa6e2c6322a" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 16, 7, 41, 51, 154, DateTimeKind.Local), FeedbackId = 47, Text = "Voluptatem dolores iure numquam.", UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 15, 23, 47, 36, 749, DateTimeKind.Local), FeedbackId = 41, Text = "Molestiae quos temporibus.", UserId = "301009ad-044d-4992-98d7-441cda647c1b" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 16, 3, 30, 20, 236, DateTimeKind.Local), FeedbackId = 43, Text = "Reiciendis consequuntur qui occaecati dolorem.", UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 16, 8, 32, 4, 835, DateTimeKind.Local), FeedbackId = 50, Text = "Autem repellendus et dolorem quam dignissimos sit exercitationem.", UserId = "4be27e39-6654-495c-b3f2-ba26be8cb54b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme309" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme386" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme24" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme798" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme951" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme153" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme501" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme984" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme831" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme779" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "809d33df-f119-43b0-8627-6553ccf484c8", CreatedAt = new DateTime(2018, 8, 15, 17, 23, 2, 594, DateTimeKind.Local), DisplayName = "Liana", Email = "Elisha59@gmail.com", FirstName = "Anya", IsActive = true, LastName = "Brown", RoleId = 1 },
                        new { Id = "9688f885-30a2-43b1-9cd8-25f5c0c962dc", CreatedAt = new DateTime(2018, 8, 16, 5, 6, 49, 427, DateTimeKind.Local), DisplayName = "Laura", Email = "Ena.Effertz23@gmail.com", FirstName = "Yazmin", IsActive = true, LastName = "Hauck", RoleId = 1 },
                        new { Id = "4b0f0015-4592-4c6b-a021-e3eda54ced32", CreatedAt = new DateTime(2018, 8, 15, 15, 31, 38, 64, DateTimeKind.Local), DisplayName = "Ally", Email = "Madie_Dietrich@hotmail.com", FirstName = "Dean", IsActive = true, LastName = "Prosacco", RoleId = 1 },
                        new { Id = "301009ad-044d-4992-98d7-441cda647c1b", CreatedAt = new DateTime(2018, 8, 16, 5, 24, 42, 488, DateTimeKind.Local), DisplayName = "Shanny", Email = "Gardner_Russel@gmail.com", FirstName = "Marshall", IsActive = true, LastName = "Farrell", RoleId = 2 },
                        new { Id = "d1ca79c3-d251-4d2e-8617-daa6e2c6322a", CreatedAt = new DateTime(2018, 8, 15, 17, 3, 11, 347, DateTimeKind.Local), DisplayName = "Shirley", Email = "Chelsie_Wyman@gmail.com", FirstName = "Eddie", IsActive = true, LastName = "Torp", RoleId = 2 },
                        new { Id = "4be27e39-6654-495c-b3f2-ba26be8cb54b", CreatedAt = new DateTime(2018, 8, 15, 23, 6, 30, 578, DateTimeKind.Local), DisplayName = "Augustine", Email = "Rigoberto.Jakubowski@yahoo.com", FirstName = "Bessie", IsActive = true, LastName = "Quigley", RoleId = 1 },
                        new { Id = "2bc44d1c-425a-40ad-9fc4-76bcff6a8154", CreatedAt = new DateTime(2018, 8, 16, 4, 3, 45, 903, DateTimeKind.Local), DisplayName = "Theresa", Email = "Eliza.Brown94@hotmail.com", FirstName = "Kamron", IsActive = true, LastName = "Wunsch", RoleId = 1 },
                        new { Id = "920895bb-0bf8-46c8-996a-2730d14086fe", CreatedAt = new DateTime(2018, 8, 15, 20, 37, 13, 352, DateTimeKind.Local), DisplayName = "Rae", Email = "Florence_Schultz67@hotmail.com", FirstName = "Floy", IsActive = true, LastName = "Stark", RoleId = 2 },
                        new { Id = "c1db6f4c-aeb7-4d80-89b8-44d1849edda6", CreatedAt = new DateTime(2018, 8, 16, 9, 53, 44, 491, DateTimeKind.Local), DisplayName = "Ambrose", Email = "Briana96@hotmail.com", FirstName = "Merle", IsActive = true, LastName = "Flatley", RoleId = 1 },
                        new { Id = "a4445bd2-b428-423a-9e33-e93bfa3a39b1", CreatedAt = new DateTime(2018, 8, 16, 4, 13, 36, 724, DateTimeKind.Local), DisplayName = "Alysson", Email = "Vida.Turner27@gmail.com", FirstName = "Emilie", IsActive = true, LastName = "White", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "809d33df-f119-43b0-8627-6553ccf484c8", OrganizationId = 77 },
                        new { UserId = "9688f885-30a2-43b1-9cd8-25f5c0c962dc", OrganizationId = 75 },
                        new { UserId = "4b0f0015-4592-4c6b-a021-e3eda54ced32", OrganizationId = 77 },
                        new { UserId = "301009ad-044d-4992-98d7-441cda647c1b", OrganizationId = 73 },
                        new { UserId = "d1ca79c3-d251-4d2e-8617-daa6e2c6322a", OrganizationId = 76 },
                        new { UserId = "4be27e39-6654-495c-b3f2-ba26be8cb54b", OrganizationId = 74 },
                        new { UserId = "2bc44d1c-425a-40ad-9fc4-76bcff6a8154", OrganizationId = 71 },
                        new { UserId = "920895bb-0bf8-46c8-996a-2730d14086fe", OrganizationId = 74 },
                        new { UserId = "c1db6f4c-aeb7-4d80-89b8-44d1849edda6", OrganizationId = 78 },
                        new { UserId = "a4445bd2-b428-423a-9e33-e93bfa3a39b1", OrganizationId = 78 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
