// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180829233118_AddedUsersSettingsToChat")]
    partial class AddedUsersSettingsToChat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 92, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 14, Type = 0 },
                        new { Id = 102, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 5, Type = 0 },
                        new { Id = 103, DashboardId = 95, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 40, Type = 2 },
                        new { Id = 104, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 45, Type = 0 },
                        new { Id = 105, DashboardId = 100, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source1", Threshold = 89, Type = 2 },
                        new { Id = 106, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 87, Type = 2 },
                        new { Id = 107, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source1", Threshold = 99, Type = 2 },
                        new { Id = 108, DashboardId = 93, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 26, Type = 1 },
                        new { Id = 109, DashboardId = 93, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 55, Type = 2 },
                        new { Id = 110, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 17, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", IsActive = false, Name = "reiciendis", Type = 0 },
                        new { Id = 22, CreatedById = "f3b4c548-be18-49c1-a2e7-e11f2355e621", IsActive = false, Name = "officiis", Type = 0 },
                        new { Id = 23, CreatedById = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", IsActive = false, Name = "ut", Type = 0 },
                        new { Id = 24, CreatedById = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", IsActive = false, Name = "est", Type = 0 },
                        new { Id = 25, CreatedById = "2ca00e2e-c335-4921-be38-be5f7edd679b", IsActive = false, Name = "non", Type = 0 },
                        new { Id = 26, CreatedById = "c204f301-0b97-49fa-b5e4-4254848fa6e6", IsActive = false, Name = "dolorem", Type = 0 },
                        new { Id = 27, CreatedById = "9b8f17ee-e708-4072-8404-f37c90801a6d", IsActive = false, Name = "assumenda", Type = 0 },
                        new { Id = 28, CreatedById = "6be48c54-e679-4ec1-9c83-c4fe60b63535", IsActive = false, Name = "asperiores", Type = 0 },
                        new { Id = 29, CreatedById = "f3b4c548-be18-49c1-a2e7-e11f2355e621", IsActive = false, Name = "voluptas", Type = 0 },
                        new { Id = 30, CreatedById = "f3b4c548-be18-49c1-a2e7-e11f2355e621", IsActive = false, Name = "eaque", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 29, 18, 43, 47, 666, DateTimeKind.Local), InstanceId = 83, Title = "Title736" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 29, 21, 34, 42, 444, DateTimeKind.Local), InstanceId = 88, Title = "Title556" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 29, 10, 37, 28, 263, DateTimeKind.Local), InstanceId = 82, Title = "Title987" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 29, 9, 53, 34, 805, DateTimeKind.Local), InstanceId = 84, Title = "Title6" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 29, 13, 42, 57, 663, DateTimeKind.Local), InstanceId = 82, Title = "Title715" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 29, 3, 51, 59, 538, DateTimeKind.Local), InstanceId = 89, Title = "Title7" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 29, 3, 54, 39, 272, DateTimeKind.Local), InstanceId = 88, Title = "Title180" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 29, 3, 55, 21, 603, DateTimeKind.Local), InstanceId = 88, Title = "Title752" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 29, 17, 22, 37, 85, DateTimeKind.Local), InstanceId = 88, Title = "Title518" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 29, 8, 47, 16, 861, DateTimeKind.Local), InstanceId = 87, Title = "Title982" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 30, 2, 30, 12, 236, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "A excepturi quam nam voluptatem enim dolor natus dolore at.", UserId = "6be48c54-e679-4ec1-9c83-c4fe60b63535", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 29, 13, 30, 48, 445, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Dolore fugiat excepturi asperiores possimus saepe accusantium eius quibusdam.", UserId = "6be48c54-e679-4ec1-9c83-c4fe60b63535", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 29, 9, 40, 26, 941, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Veniam non rerum.", UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 29, 20, 51, 45, 933, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Deleniti esse ut modi autem in molestiae molestias consequatur.", UserId = "6be48c54-e679-4ec1-9c83-c4fe60b63535", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 29, 4, 49, 9, 995, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Culpa exercitationem excepturi inventore aut quia.", UserId = "6739075a-d110-47dd-aa10-e77085b38762", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 29, 8, 38, 56, 674, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Atque architecto impedit nesciunt ut expedita dolorum quod.", UserId = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 29, 20, 31, 53, 602, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Eius consequatur occaecati commodi saepe voluptatem blanditiis fugit quasi.", UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 29, 7, 27, 43, 685, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Ducimus consequatur sapiente laudantium sed modi facilis sint quibusdam.", UserId = "f3b4c548-be18-49c1-a2e7-e11f2355e621", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 29, 21, 25, 0, 207, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Laboriosam voluptatem veritatis voluptate quod nemo assumenda veritatis optio repudiandae.", UserId = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 29, 20, 15, 41, 241, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Ratione neque eos libero temporibus dolorem qui qui veniam.", UserId = "6be48c54-e679-4ec1-9c83-c4fe60b63535", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "9c:db:13:e3:a8:a7", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Windows", Title = "Instance67" },
                        new { Id = 82, Address = "ce:08:64:28:10:27", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 76, Platform = "Linux", Title = "Instance392" },
                        new { Id = 83, Address = "f1:4a:97:71:fb:2d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 75, Platform = "Windows", Title = "Instance267" },
                        new { Id = 84, Address = "25:fe:7d:11:44:49", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 71, Platform = "Windows", Title = "Instance306" },
                        new { Id = 85, Address = "fb:1e:2c:03:22:ca", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 79, Platform = "Linux", Title = "Instance348" },
                        new { Id = 86, Address = "d9:e7:13:20:d4:51", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 73, Platform = "Linux", Title = "Instance984" },
                        new { Id = 87, Address = "2a:8a:6b:70:2e:cf", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 76, Platform = "Linux", Title = "Instance905" },
                        new { Id = 88, Address = "22:dc:ce:69:f5:d2", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 72, Platform = "Windows", Title = "Instance890" },
                        new { Id = 89, Address = "4b:a2:65:69:1a:3d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 80, Platform = "Linux", Title = "Instance307" },
                        new { Id = 90, Address = "04:62:d0:dd:b0:70", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 78, Platform = "Windows", Title = "Instance236" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 26, CreatedAt = new DateTime(2018, 8, 30, 1, 26, 7, 27, DateTimeKind.Local), Text = "Nobis sint sed.", UserId = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", WasRead = true },
                        new { Id = 32, ChatId = 22, CreatedAt = new DateTime(2018, 8, 29, 11, 28, 30, 568, DateTimeKind.Local), Text = "Inventore ea eos ab.", UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", WasRead = true },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 8, 30, 1, 15, 9, 939, DateTimeKind.Local), Text = "Et natus libero similique non sint necessitatibus non enim accusamus.", UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", WasRead = true },
                        new { Id = 34, ChatId = 21, CreatedAt = new DateTime(2018, 8, 29, 21, 59, 49, 113, DateTimeKind.Local), Text = "Fuga quis exercitationem deserunt possimus.", UserId = "f3b4c548-be18-49c1-a2e7-e11f2355e621", WasRead = true },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 8, 29, 18, 9, 47, 19, DateTimeKind.Local), Text = "Voluptatem qui nobis iste cum placeat illum.", UserId = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40", WasRead = false },
                        new { Id = 36, ChatId = 22, CreatedAt = new DateTime(2018, 8, 29, 14, 21, 13, 990, DateTimeKind.Local), Text = "Corrupti voluptatum repellat tempora molestiae est.", UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", WasRead = false },
                        new { Id = 37, ChatId = 25, CreatedAt = new DateTime(2018, 8, 29, 3, 10, 30, 303, DateTimeKind.Local), Text = "Omnis molestiae quisquam sit officia.", UserId = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", WasRead = true },
                        new { Id = 38, ChatId = 24, CreatedAt = new DateTime(2018, 8, 29, 20, 19, 27, 8, DateTimeKind.Local), Text = "Reiciendis inventore suscipit quia expedita mollitia.", UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", WasRead = true },
                        new { Id = 39, ChatId = 27, CreatedAt = new DateTime(2018, 8, 29, 18, 33, 27, 99, DateTimeKind.Local), Text = "Eveniet sit rerum illum deserunt non beatae.", UserId = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40", WasRead = true },
                        new { Id = 40, ChatId = 24, CreatedAt = new DateTime(2018, 8, 29, 15, 29, 1, 674, DateTimeKind.Local), Text = "Quis et consequuntur tenetur esse.", UserId = "f3b4c548-be18-49c1-a2e7-e11f2355e621", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 29, 18, 30, 17, 14, DateTimeKind.Local), NotificationSettingId = 12, Text = "Ut non vel quo voluptas incidunt nostrum.", UserId = "9b8f17ee-e708-4072-8404-f37c90801a6d", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 29, 6, 38, 35, 828, DateTimeKind.Local), NotificationSettingId = 14, Text = "Et vitae est.", UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 29, 21, 21, 28, 631, DateTimeKind.Local), NotificationSettingId = 11, Text = "Saepe consequatur nihil qui quo sunt quibusdam eveniet quia numquam.", UserId = "c204f301-0b97-49fa-b5e4-4254848fa6e6", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 29, 5, 6, 52, 972, DateTimeKind.Local), NotificationSettingId = 19, Text = "Ipsam odio excepturi voluptatem inventore voluptatibus et doloremque minima.", UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 29, 23, 33, 32, 423, DateTimeKind.Local), NotificationSettingId = 11, Text = "Placeat autem nam qui minus nisi quia sunt hic.", UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 29, 11, 5, 28, 5, DateTimeKind.Local), NotificationSettingId = 13, Text = "Sint molestiae illo beatae sed.", UserId = "f3b4c548-be18-49c1-a2e7-e11f2355e621", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 29, 5, 48, 38, 545, DateTimeKind.Local), NotificationSettingId = 16, Text = "Facilis explicabo error tenetur voluptas vel.", UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 29, 17, 4, 51, 83, DateTimeKind.Local), NotificationSettingId = 14, Text = "Eaque ipsam quae odit excepturi.", UserId = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 29, 21, 41, 48, 14, DateTimeKind.Local), NotificationSettingId = 15, Text = "Est commodi ipsam dolorum ipsum assumenda et consectetur aut.", UserId = "6be48c54-e679-4ec1-9c83-c4fe60b63535", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 29, 21, 2, 33, 883, DateTimeKind.Local), NotificationSettingId = 16, Text = "Molestias voluptatem ratione sunt aliquam omnis perferendis quibusdam.", UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52" },
                        new { Id = 12, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "2ca00e2e-c335-4921-be38-be5f7edd679b" },
                        new { Id = 13, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "f3b4c548-be18-49c1-a2e7-e11f2355e621" },
                        new { Id = 14, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52" },
                        new { Id = 15, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7" },
                        new { Id = 16, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e" },
                        new { Id = 17, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52" },
                        new { Id = 18, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52" },
                        new { Id = 19, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7" },
                        new { Id = 20, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "6be48c54-e679-4ec1-9c83-c4fe60b63535" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "225.934.0605 x11883", CreatedByUserId = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", Description = "Dolor eveniet quibusdam tenetur voluptatem ullam omnis eligendi rem. Deleniti repellendus consequatur dolores. Sit autem voluptates unde consectetur ex sed a. Voluptatum inventore beatae.", Email = "Zack_Hessel9@gmail.com", IsActive = true, Name = "Company626", ThemeId = 62, WebSite = "http://felton.org" },
                        new { Id = 72, ContactNumber = "582.868.0440 x097", CreatedByUserId = "c204f301-0b97-49fa-b5e4-4254848fa6e6", Description = "Rerum itaque quod voluptatum voluptatem eius labore. Exercitationem nihil eum dolor assumenda sunt aliquam. Voluptas magni ut qui corrupti tempore facere qui et aut.", Email = "Abelardo45@yahoo.com", IsActive = true, Name = "Company175", ThemeId = 61, WebSite = "http://alexander.net" },
                        new { Id = 73, ContactNumber = "355.470.2311", CreatedByUserId = "f3b4c548-be18-49c1-a2e7-e11f2355e621", Description = "Aut maiores perferendis delectus amet quis nulla aliquam omnis.", Email = "Serena.Grant51@yahoo.com", IsActive = true, Name = "Company44", ThemeId = 66, WebSite = "http://kaylee.name" },
                        new { Id = 74, ContactNumber = "1-326-257-3898 x703", CreatedByUserId = "2ca00e2e-c335-4921-be38-be5f7edd679b", Description = "Sit perferendis impedit quaerat consequatur inventore. Nihil ea qui sunt et harum ducimus ducimus ab. Adipisci voluptatum voluptas eos.", Email = "Jeremie_Barton67@hotmail.com", IsActive = true, Name = "Company144", ThemeId = 67, WebSite = "http://lexie.name" },
                        new { Id = 75, ContactNumber = "(543) 774-3688", CreatedByUserId = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40", Description = "Quo dignissimos deleniti nulla iste aut. Debitis sunt reprehenderit ea et id id temporibus numquam. Ut earum vel non. Ipsa temporibus omnis quo qui voluptatem.", Email = "Domenick39@gmail.com", IsActive = true, Name = "Company280", ThemeId = 62, WebSite = "https://claudia.biz" },
                        new { Id = 76, ContactNumber = "720-261-6159 x965", CreatedByUserId = "9b8f17ee-e708-4072-8404-f37c90801a6d", Description = "Est exercitationem porro corrupti aut esse.", Email = "Alfreda.Kuhn40@gmail.com", IsActive = true, Name = "Company51", ThemeId = 64, WebSite = "https://zoila.info" },
                        new { Id = 77, ContactNumber = "(754) 221-3361 x864", CreatedByUserId = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40", Description = "", Email = "Bettye76@hotmail.com", IsActive = true, Name = "Company651", ThemeId = 65, WebSite = "http://tyrell.com" },
                        new { Id = 78, ContactNumber = "(777) 295-0631", CreatedByUserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", Description = "Quis dignissimos odit quisquam quia consequatur. Modi delectus perspiciatis eligendi expedita aut. Blanditiis rem voluptate ut itaque iste. Quia nam quaerat non ut.", Email = "Kelley67@yahoo.com", IsActive = true, Name = "Company111", ThemeId = 61, WebSite = "https://tiara.org" },
                        new { Id = 79, ContactNumber = "(861) 513-0751 x520", CreatedByUserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", Description = "Consectetur neque omnis nulla autem.", Email = "Dianna.Gusikowski@gmail.com", IsActive = true, Name = "Company415", ThemeId = 70, WebSite = "http://taya.name" },
                        new { Id = 80, ContactNumber = "906-305-9853 x98200", CreatedByUserId = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40", Description = "", Email = "Jessika.Keeling@yahoo.com", IsActive = true, Name = "Company383", ThemeId = 61, WebSite = "http://ethan.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 30, 0, 8, 25, 551, DateTimeKind.Local), FeedbackId = 41, Text = "Adipisci vitae sint.", UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 29, 17, 35, 35, 207, DateTimeKind.Local), FeedbackId = 45, Text = "Et cupiditate voluptatem harum a quae.", UserId = "6be48c54-e679-4ec1-9c83-c4fe60b63535" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 29, 17, 12, 30, 534, DateTimeKind.Local), FeedbackId = 44, Text = "Explicabo provident sequi.", UserId = "c204f301-0b97-49fa-b5e4-4254848fa6e6" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 29, 11, 25, 25, 949, DateTimeKind.Local), FeedbackId = 47, Text = "Repellendus pariatur consequatur.", UserId = "c204f301-0b97-49fa-b5e4-4254848fa6e6" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 29, 13, 21, 52, 476, DateTimeKind.Local), FeedbackId = 43, Text = "Alias ut ea.", UserId = "6739075a-d110-47dd-aa10-e77085b38762" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 29, 16, 50, 45, 315, DateTimeKind.Local), FeedbackId = 44, Text = "Cum at repellendus impedit magnam quia provident ut dolorum quam.", UserId = "2ca00e2e-c335-4921-be38-be5f7edd679b" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 29, 9, 50, 24, 179, DateTimeKind.Local), FeedbackId = 44, Text = "Qui rerum dolorum quas.", UserId = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 29, 3, 17, 15, 442, DateTimeKind.Local), FeedbackId = 47, Text = "Illo quibusdam ipsum et.", UserId = "c204f301-0b97-49fa-b5e4-4254848fa6e6" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 29, 15, 58, 38, 240, DateTimeKind.Local), FeedbackId = 46, Text = "Dolorem ut tempora inventore quam cum consequatur soluta.", UserId = "6739075a-d110-47dd-aa10-e77085b38762" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 29, 13, 50, 9, 314, DateTimeKind.Local), FeedbackId = 47, Text = "Tempora officia tempora quisquam tempora et ad et dolor quae.", UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme504" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme329" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme976" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme315" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme940" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme430" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme452" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme61" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme424" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme377" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", CreatedAt = new DateTime(2018, 8, 29, 21, 11, 4, 968, DateTimeKind.Local), DisplayName = "Bridie", Email = "Maeve_Weber@gmail.com", FirstName = "Broderick", IsActive = true, LastName = "Brown", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg", RoleId = 2 },
                        new { Id = "f3b4c548-be18-49c1-a2e7-e11f2355e621", CreatedAt = new DateTime(2018, 8, 30, 1, 53, 10, 143, DateTimeKind.Local), DisplayName = "Khalid", Email = "Brett35@gmail.com", FirstName = "Pasquale", IsActive = true, LastName = "Christiansen", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/laasli/128.jpg", RoleId = 2 },
                        new { Id = "6739075a-d110-47dd-aa10-e77085b38762", CreatedAt = new DateTime(2018, 8, 29, 5, 1, 39, 960, DateTimeKind.Local), DisplayName = "Tia", Email = "Jaren.Flatley@hotmail.com", FirstName = "Rodrick", IsActive = true, LastName = "Jakubowski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/marklamb/128.jpg", RoleId = 1 },
                        new { Id = "9b8f17ee-e708-4072-8404-f37c90801a6d", CreatedAt = new DateTime(2018, 8, 29, 10, 27, 42, 48, DateTimeKind.Local), DisplayName = "Jettie", Email = "Roman_Predovic83@hotmail.com", FirstName = "Jamey", IsActive = true, LastName = "Franecki", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dimaposnyy/128.jpg", RoleId = 2 },
                        new { Id = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40", CreatedAt = new DateTime(2018, 8, 29, 11, 27, 28, 697, DateTimeKind.Local), DisplayName = "Savanah", Email = "Jillian_Dooley41@hotmail.com", FirstName = "Summer", IsActive = true, LastName = "Johnson", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/romanbulah/128.jpg", RoleId = 1 },
                        new { Id = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", CreatedAt = new DateTime(2018, 8, 29, 10, 17, 22, 511, DateTimeKind.Local), DisplayName = "Rigoberto", Email = "Georgette.Kassulke@yahoo.com", FirstName = "Monte", IsActive = true, LastName = "Hills", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/souperphly/128.jpg", RoleId = 2 },
                        new { Id = "c204f301-0b97-49fa-b5e4-4254848fa6e6", CreatedAt = new DateTime(2018, 8, 29, 22, 28, 10, 398, DateTimeKind.Local), DisplayName = "Dameon", Email = "Haskell19@yahoo.com", FirstName = "Enrique", IsActive = true, LastName = "Parker", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg", RoleId = 1 },
                        new { Id = "6be48c54-e679-4ec1-9c83-c4fe60b63535", CreatedAt = new DateTime(2018, 8, 29, 2, 58, 54, 411, DateTimeKind.Local), DisplayName = "Leanna", Email = "Shane37@yahoo.com", FirstName = "Akeem", IsActive = true, LastName = "Jaskolski", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/desastrozo/128.jpg", RoleId = 2 },
                        new { Id = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", CreatedAt = new DateTime(2018, 8, 29, 18, 39, 15, 544, DateTimeKind.Local), DisplayName = "Janet", Email = "Darion.Fahey@hotmail.com", FirstName = "Danyka", IsActive = true, LastName = "Deckow", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg", RoleId = 1 },
                        new { Id = "2ca00e2e-c335-4921-be38-be5f7edd679b", CreatedAt = new DateTime(2018, 8, 30, 0, 2, 26, 538, DateTimeKind.Local), DisplayName = "Winnifred", Email = "Kian.Goyette29@gmail.com", FirstName = "Nickolas", IsActive = true, LastName = "Lockman", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "d4b1b17f-aa16-40be-bc50-e59759bc9cb7", OrganizationId = 75 },
                        new { UserId = "f3b4c548-be18-49c1-a2e7-e11f2355e621", OrganizationId = 71 },
                        new { UserId = "6739075a-d110-47dd-aa10-e77085b38762", OrganizationId = 79 },
                        new { UserId = "9b8f17ee-e708-4072-8404-f37c90801a6d", OrganizationId = 78 },
                        new { UserId = "5c1251fb-ba57-4ccf-90bb-08f87ded1a40", OrganizationId = 73 },
                        new { UserId = "8880d06a-4f1c-4adc-a4c5-f0a901c7509e", OrganizationId = 75 },
                        new { UserId = "c204f301-0b97-49fa-b5e4-4254848fa6e6", OrganizationId = 77 },
                        new { UserId = "6be48c54-e679-4ec1-9c83-c4fe60b63535", OrganizationId = 76 },
                        new { UserId = "0cacfc5d-8b3d-49d5-b6f4-c357d25e4e52", OrganizationId = 73 },
                        new { UserId = "2ca00e2e-c335-4921-be38-be5f7edd679b", OrganizationId = 73 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
