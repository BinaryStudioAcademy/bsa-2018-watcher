// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180813212027_UserToChatManyToMany")]
    partial class UserToChatManyToMany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 39, Type = 0 },
                        new { Id = 102, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 30, Type = 2 },
                        new { Id = 103, DashboardId = 99, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source2", Threshold = 25, Type = 1 },
                        new { Id = 104, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source2", Threshold = 18, Type = 0 },
                        new { Id = 105, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 52, Type = 0 },
                        new { Id = 106, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 64, Type = 2 },
                        new { Id = 107, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 82, Type = 1 },
                        new { Id = 108, DashboardId = 97, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source2", Threshold = 48, Type = 1 },
                        new { Id = 109, DashboardId = 100, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 52, Type = 1 },
                        new { Id = 110, DashboardId = 96, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 55, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "23afff5a-f0d1-42e6-978c-09b263e132ac", Name = "dignissimos", Type = 0 },
                        new { Id = 22, CreatedById = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1", Name = "est", Type = 0 },
                        new { Id = 23, CreatedById = "2694f6d1-632b-4ed0-b323-bcb9a0fa0f59", Name = "dignissimos", Type = 0 },
                        new { Id = 24, CreatedById = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d", Name = "aut", Type = 0 },
                        new { Id = 25, CreatedById = "94cfe29d-5887-4ceb-8edc-c75c7b2cc5ab", Name = "eveniet", Type = 0 },
                        new { Id = 26, CreatedById = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d", Name = "modi", Type = 0 },
                        new { Id = 27, CreatedById = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc", Name = "enim", Type = 0 },
                        new { Id = 28, CreatedById = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec", Name = "enim", Type = 0 },
                        new { Id = 29, CreatedById = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d", Name = "magnam", Type = 0 },
                        new { Id = 30, CreatedById = "a6e636ed-f426-40e7-a563-781ab2935614", Name = "non", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 13, 6, 19, 2, 503, DateTimeKind.Local), InstanceId = 85, Title = "Title988" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 13, 0, 43, 12, 168, DateTimeKind.Local), InstanceId = 89, Title = "Title397" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 13, 4, 46, 44, 217, DateTimeKind.Local), InstanceId = 87, Title = "Title446" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 13, 6, 47, 28, 802, DateTimeKind.Local), InstanceId = 88, Title = "Title785" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 13, 9, 8, 12, 339, DateTimeKind.Local), InstanceId = 89, Title = "Title418" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 13, 15, 4, 30, 11, DateTimeKind.Local), InstanceId = 89, Title = "Title354" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 13, 21, 56, 37, 816, DateTimeKind.Local), InstanceId = 88, Title = "Title820" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 13, 21, 49, 47, 507, DateTimeKind.Local), InstanceId = 82, Title = "Title744" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 13, 12, 25, 41, 467, DateTimeKind.Local), InstanceId = 84, Title = "Title40" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 13, 12, 5, 35, 948, DateTimeKind.Local), InstanceId = 90, Title = "Title411" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 13, 4, 20, 44, 346, DateTimeKind.Local), Text = "Sapiente ut ipsam debitis tempora sint.", UserId = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 13, 4, 42, 13, 264, DateTimeKind.Local), Text = "Rerum rem in.", UserId = "94cfe29d-5887-4ceb-8edc-c75c7b2cc5ab" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 13, 11, 23, 44, 597, DateTimeKind.Local), Text = "Soluta saepe fuga delectus quam officiis magni dicta eos.", UserId = "a6e636ed-f426-40e7-a563-781ab2935614" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 13, 20, 6, 1, 439, DateTimeKind.Local), Text = "Sit voluptas et voluptatum iste animi consectetur dolorum velit atque.", UserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 13, 15, 22, 14, 785, DateTimeKind.Local), Text = "Molestiae sed ut architecto velit necessitatibus enim aut.", UserId = "a6e636ed-f426-40e7-a563-781ab2935614" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 13, 16, 14, 45, 120, DateTimeKind.Local), Text = "Veniam cum dolor excepturi eum voluptatem blanditiis.", UserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 13, 11, 57, 16, 883, DateTimeKind.Local), Text = "Et quia sit rem repudiandae et et.", UserId = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 13, 16, 16, 53, 27, DateTimeKind.Local), Text = "Porro libero nemo asperiores.", UserId = "23afff5a-f0d1-42e6-978c-09b263e132ac" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 13, 2, 14, 35, 324, DateTimeKind.Local), Text = "Ducimus est aperiam.", UserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 13, 23, 28, 44, 911, DateTimeKind.Local), Text = "Quia consectetur aut illum cum autem ratione accusantium voluptas eaque.", UserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "55:55:be:e4:c7:d7", OrganizationId = 75, Platform = "Linux" },
                        new { Id = 82, Address = "14:bf:f7:36:a3:2e", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 83, Address = "c2:cd:0f:45:87:09", OrganizationId = 71, Platform = "Windows" },
                        new { Id = 84, Address = "67:9f:ad:e7:6c:d4", OrganizationId = 77, Platform = "Linux" },
                        new { Id = 85, Address = "89:3d:1c:e1:f6:48", OrganizationId = 79, Platform = "Linux" },
                        new { Id = 86, Address = "f0:68:e1:e6:a9:6a", OrganizationId = 78, Platform = "Linux" },
                        new { Id = 87, Address = "77:06:94:b6:d8:17", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 88, Address = "3c:2d:7c:28:29:85", OrganizationId = 80, Platform = "Windows" },
                        new { Id = 89, Address = "0d:4e:ad:66:11:a5", OrganizationId = 72, Platform = "Windows" },
                        new { Id = 90, Address = "ea:1a:54:1e:27:32", OrganizationId = 80, Platform = "Windows" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 24, CreatedAt = new DateTime(2018, 8, 13, 2, 26, 45, 15, DateTimeKind.Local), Text = "Animi culpa voluptas qui laboriosam fuga adipisci saepe.", UserId = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc", WasRead = false },
                        new { Id = 32, ChatId = 28, CreatedAt = new DateTime(2018, 8, 13, 5, 56, 7, 718, DateTimeKind.Local), Text = "Quis nobis facilis commodi odio et rerum.", UserId = "a6e636ed-f426-40e7-a563-781ab2935614", WasRead = true },
                        new { Id = 33, ChatId = 24, CreatedAt = new DateTime(2018, 8, 13, 4, 4, 59, 501, DateTimeKind.Local), Text = "Et voluptas enim facilis iure praesentium corporis ipsam.", UserId = "23afff5a-f0d1-42e6-978c-09b263e132ac", WasRead = false },
                        new { Id = 34, ChatId = 28, CreatedAt = new DateTime(2018, 8, 13, 9, 17, 35, 508, DateTimeKind.Local), Text = "Odit voluptatibus nobis qui quae non eos possimus aut.", UserId = "23afff5a-f0d1-42e6-978c-09b263e132ac", WasRead = false },
                        new { Id = 35, ChatId = 28, CreatedAt = new DateTime(2018, 8, 13, 13, 50, 54, 340, DateTimeKind.Local), Text = "Iste corrupti atque fugiat repellendus.", UserId = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d", WasRead = false },
                        new { Id = 36, ChatId = 23, CreatedAt = new DateTime(2018, 8, 13, 8, 11, 47, 454, DateTimeKind.Local), Text = "Dolore laudantium qui veritatis nihil fuga non consequatur quibusdam sint.", UserId = "a6e636ed-f426-40e7-a563-781ab2935614", WasRead = true },
                        new { Id = 37, ChatId = 29, CreatedAt = new DateTime(2018, 8, 13, 6, 28, 18, 246, DateTimeKind.Local), Text = "Qui deleniti rerum consequatur eos soluta eos quas.", UserId = "a6e636ed-f426-40e7-a563-781ab2935614", WasRead = true },
                        new { Id = 38, ChatId = 29, CreatedAt = new DateTime(2018, 8, 13, 19, 33, 18, 763, DateTimeKind.Local), Text = "Provident ut velit.", UserId = "9cb75417-2d81-4a82-83e1-ce586bbdf6b6", WasRead = true },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 8, 13, 23, 49, 49, 865, DateTimeKind.Local), Text = "Possimus quibusdam illo sit quia voluptatem maiores.", UserId = "021c0ca4-7514-4eed-b6b8-8d80120af65d", WasRead = true },
                        new { Id = 40, ChatId = 27, CreatedAt = new DateTime(2018, 8, 13, 2, 29, 13, 620, DateTimeKind.Local), Text = "Fugit velit sit.", UserId = "021c0ca4-7514-4eed-b6b8-8d80120af65d", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 13, 3, 6, 37, 256, DateTimeKind.Local), NotificationSettingId = 17, Text = "Officiis vel est sint culpa et.", UserId = "9cb75417-2d81-4a82-83e1-ce586bbdf6b6" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 13, 14, 10, 18, 367, DateTimeKind.Local), NotificationSettingId = 20, Text = "Qui quis quibusdam sunt minus similique fuga voluptas.", UserId = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 13, 11, 49, 45, 835, DateTimeKind.Local), NotificationSettingId = 15, Text = "Illo perspiciatis et vero accusantium temporibus ut nihil sapiente.", UserId = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 13, 23, 51, 21, 456, DateTimeKind.Local), NotificationSettingId = 15, Text = "Eaque voluptas occaecati ut vero id eos.", UserId = "9cb75417-2d81-4a82-83e1-ce586bbdf6b6" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 13, 4, 56, 41, 740, DateTimeKind.Local), NotificationSettingId = 11, Text = "Cum officiis fugit enim.", UserId = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 13, 22, 2, 9, 247, DateTimeKind.Local), NotificationSettingId = 13, Text = "Quos architecto voluptas incidunt illo quisquam animi.", UserId = "2694f6d1-632b-4ed0-b323-bcb9a0fa0f59" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 13, 16, 52, 1, 690, DateTimeKind.Local), NotificationSettingId = 18, Text = "Non voluptatem autem quas optio est aut in similique.", UserId = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 13, 18, 7, 7, 1, DateTimeKind.Local), NotificationSettingId = 15, Text = "Consequuntur harum sit sequi cum deserunt et.", UserId = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 13, 12, 41, 15, 869, DateTimeKind.Local), NotificationSettingId = 14, Text = "Excepturi impedit laborum totam perspiciatis aliquam rerum deleniti placeat qui.", UserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 13, 19, 3, 34, 448, DateTimeKind.Local), NotificationSettingId = 13, Text = "Esse qui nihil consequuntur corrupti.", UserId = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "a6e636ed-f426-40e7-a563-781ab2935614" },
                        new { Id = 12, IsDisable = true, IsEmailable = true, IsMute = true, Type = 4, UserId = "23afff5a-f0d1-42e6-978c-09b263e132ac" },
                        new { Id = 13, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec" },
                        new { Id = 14, IsDisable = false, IsEmailable = true, IsMute = true, Type = 3, UserId = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec" },
                        new { Id = 15, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1" },
                        new { Id = 16, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc" },
                        new { Id = 17, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "23afff5a-f0d1-42e6-978c-09b263e132ac" },
                        new { Id = 18, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1" },
                        new { Id = 19, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "2694f6d1-632b-4ed0-b323-bcb9a0fa0f59" },
                        new { Id = 20, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "2694f6d1-632b-4ed0-b323-bcb9a0fa0f59" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "874-752-4800 x10226", CreatedByUserId = "021c0ca4-7514-4eed-b6b8-8d80120af65d", Description = "", Email = "Luis32@gmail.com", IsActive = true, Name = "Company970", ThemeId = 64, WebSite = "http://maximus.net" },
                        new { Id = 72, ContactNumber = "663.619.8203 x36238", CreatedByUserId = "23afff5a-f0d1-42e6-978c-09b263e132ac", Description = "", Email = "Letha.McKenzie83@yahoo.com", IsActive = true, Name = "Company350", ThemeId = 64, WebSite = "https://agustina.name" },
                        new { Id = 73, ContactNumber = "1-820-545-3906 x1039", CreatedByUserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1", Description = "Reprehenderit enim eaque blanditiis doloribus dolores iusto voluptate sapiente aut. Facere inventore aut rerum.", Email = "Quinten.Heidenreich22@gmail.com", IsActive = true, Name = "Company579", ThemeId = 63, WebSite = "http://sydnie.org" },
                        new { Id = 74, ContactNumber = "233-538-7857", CreatedByUserId = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc", Description = "Eos ab libero. Quidem aut explicabo quibusdam quia. Et vel porro in quia quam qui vel.", Email = "Freeda.Eichmann64@hotmail.com", IsActive = true, Name = "Company306", ThemeId = 69, WebSite = "https://elouise.org" },
                        new { Id = 75, ContactNumber = "685.911.8002 x0823", CreatedByUserId = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec", Description = "Quod distinctio autem ab quo quidem qui deleniti. Aspernatur exercitationem excepturi magnam qui tenetur. Fugit tenetur atque et rerum quasi aut labore. Consequatur inventore laborum odio ut nam aut pariatur quod alias.", Email = "Gail_Stanton@hotmail.com", IsActive = true, Name = "Company540", ThemeId = 68, WebSite = "http://ashlynn.com" },
                        new { Id = 76, ContactNumber = "(473) 585-7661 x09520", CreatedByUserId = "021c0ca4-7514-4eed-b6b8-8d80120af65d", Description = "Veniam distinctio excepturi eos voluptatum repellat. Eveniet sed nemo. Ab earum aliquid et illo quia aliquid. Dolorem sit magni.", Email = "Braden6@hotmail.com", IsActive = true, Name = "Company40", ThemeId = 70, WebSite = "https://eva.net" },
                        new { Id = 77, ContactNumber = "777-336-4322 x6774", CreatedByUserId = "94cfe29d-5887-4ceb-8edc-c75c7b2cc5ab", Description = "Vero maiores sed aut sequi vel. Consequatur facilis nihil fugit maxime ipsum qui. Aut nemo maxime hic. Et similique distinctio amet eveniet temporibus voluptatem placeat nihil.", Email = "Victor_Cremin@yahoo.com", IsActive = true, Name = "Company329", ThemeId = 68, WebSite = "http://araceli.name" },
                        new { Id = 78, ContactNumber = "1-961-680-6304", CreatedByUserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1", Description = "", Email = "Andre_Hane44@hotmail.com", IsActive = true, Name = "Company511", ThemeId = 63, WebSite = "http://merl.org" },
                        new { Id = 79, ContactNumber = "407-926-1446", CreatedByUserId = "2694f6d1-632b-4ed0-b323-bcb9a0fa0f59", Description = "Et nesciunt maxime inventore. Quod perferendis enim doloribus assumenda repellat accusantium sit. Rerum non eum.", Email = "Freddy.Hermann51@gmail.com", IsActive = true, Name = "Company328", ThemeId = 64, WebSite = "https://leda.info" },
                        new { Id = 80, ContactNumber = "(829) 771-0079 x512", CreatedByUserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1", Description = "Asperiores dignissimos numquam impedit ipsum libero et consequatur quod sapiente. Et harum nihil odit repellat dolorem laboriosam sint.", Email = "Justen_Brown@hotmail.com", IsActive = true, Name = "Company921", ThemeId = 64, WebSite = "https://rosella.org" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 13, 1, 22, 50, 290, DateTimeKind.Local), FeedbackId = 49, Text = "Vitae animi dolores sunt rerum praesentium.", UserId = "94cfe29d-5887-4ceb-8edc-c75c7b2cc5ab" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 13, 3, 7, 22, 824, DateTimeKind.Local), FeedbackId = 46, Text = "Consequatur temporibus dolor sapiente magnam aut est.", UserId = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 13, 1, 26, 55, 134, DateTimeKind.Local), FeedbackId = 43, Text = "Vero veniam aperiam voluptatibus.", UserId = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 13, 2, 11, 0, 715, DateTimeKind.Local), FeedbackId = 45, Text = "Debitis harum enim et.", UserId = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 13, 4, 22, 37, 844, DateTimeKind.Local), FeedbackId = 41, Text = "Natus qui praesentium alias pariatur dignissimos sunt excepturi doloremque dolores.", UserId = "23afff5a-f0d1-42e6-978c-09b263e132ac" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 13, 18, 57, 44, 675, DateTimeKind.Local), FeedbackId = 45, Text = "Sequi suscipit eum ad.", UserId = "a6e636ed-f426-40e7-a563-781ab2935614" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 13, 1, 12, 15, 534, DateTimeKind.Local), FeedbackId = 50, Text = "Est id est.", UserId = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 13, 4, 5, 10, 607, DateTimeKind.Local), FeedbackId = 42, Text = "Quisquam aliquam dolor.", UserId = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 13, 1, 29, 32, 965, DateTimeKind.Local), FeedbackId = 49, Text = "Labore ut quis velit impedit occaecati.", UserId = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 13, 8, 49, 0, 732, DateTimeKind.Local), FeedbackId = 41, Text = "Nesciunt est deleniti itaque soluta.", UserId = "9cb75417-2d81-4a82-83e1-ce586bbdf6b6" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme489" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme314" },
                        new { Id = 63, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme416" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme51" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme95" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme611" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme846" },
                        new { Id = 68, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme506" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme618" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme783" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc", CreatedAt = new DateTime(2018, 8, 13, 11, 56, 33, 5, DateTimeKind.Local), DisplayName = "Sylvan", Email = "Myrna.Conn33@hotmail.com", FirstName = "Hiram", IsActive = true, LastName = "Wyman", RoleId = 1 },
                        new { Id = "94cfe29d-5887-4ceb-8edc-c75c7b2cc5ab", CreatedAt = new DateTime(2018, 8, 13, 6, 46, 32, 810, DateTimeKind.Local), DisplayName = "Kristoffer", Email = "Marlee.Schuster@yahoo.com", FirstName = "Maurine", IsActive = true, LastName = "Mayer", RoleId = 2 },
                        new { Id = "021c0ca4-7514-4eed-b6b8-8d80120af65d", CreatedAt = new DateTime(2018, 8, 13, 19, 43, 34, 182, DateTimeKind.Local), DisplayName = "Amina", Email = "Casimer.Thiel9@yahoo.com", FirstName = "Nedra", IsActive = true, LastName = "Maggio", RoleId = 2 },
                        new { Id = "a6e636ed-f426-40e7-a563-781ab2935614", CreatedAt = new DateTime(2018, 8, 13, 13, 50, 18, 123, DateTimeKind.Local), DisplayName = "Abbey", Email = "Franco.Bahringer86@gmail.com", FirstName = "Liza", IsActive = true, LastName = "Zboncak", RoleId = 1 },
                        new { Id = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec", CreatedAt = new DateTime(2018, 8, 13, 21, 6, 31, 630, DateTimeKind.Local), DisplayName = "Carter", Email = "Edyth47@gmail.com", FirstName = "Alfreda", IsActive = true, LastName = "Bogan", RoleId = 1 },
                        new { Id = "9cb75417-2d81-4a82-83e1-ce586bbdf6b6", CreatedAt = new DateTime(2018, 8, 13, 3, 11, 14, 255, DateTimeKind.Local), DisplayName = "Mark", Email = "Russ.Dickens@yahoo.com", FirstName = "Vinnie", IsActive = true, LastName = "Balistreri", RoleId = 2 },
                        new { Id = "2694f6d1-632b-4ed0-b323-bcb9a0fa0f59", CreatedAt = new DateTime(2018, 8, 13, 5, 9, 53, 631, DateTimeKind.Local), DisplayName = "Maudie", Email = "Kylee.McClure@gmail.com", FirstName = "Dedrick", IsActive = true, LastName = "Hand", RoleId = 2 },
                        new { Id = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d", CreatedAt = new DateTime(2018, 8, 13, 10, 12, 42, 995, DateTimeKind.Local), DisplayName = "Kamryn", Email = "June_Wisoky@gmail.com", FirstName = "Asa", IsActive = true, LastName = "Stracke", RoleId = 1 },
                        new { Id = "23afff5a-f0d1-42e6-978c-09b263e132ac", CreatedAt = new DateTime(2018, 8, 13, 12, 9, 53, 987, DateTimeKind.Local), DisplayName = "Anastasia", Email = "Malachi80@gmail.com", FirstName = "Jaleel", IsActive = true, LastName = "Monahan", RoleId = 2 },
                        new { Id = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1", CreatedAt = new DateTime(2018, 8, 13, 9, 39, 56, 732, DateTimeKind.Local), DisplayName = "Wyman", Email = "Cortney.Rath@hotmail.com", FirstName = "Delores", IsActive = true, LastName = "Walker", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "9ef82bb3-bf25-4e1e-871d-296cfe4d22fc", OrganizationId = 78 },
                        new { UserId = "94cfe29d-5887-4ceb-8edc-c75c7b2cc5ab", OrganizationId = 71 },
                        new { UserId = "021c0ca4-7514-4eed-b6b8-8d80120af65d", OrganizationId = 74 },
                        new { UserId = "a6e636ed-f426-40e7-a563-781ab2935614", OrganizationId = 75 },
                        new { UserId = "f1ecbf2e-6a6e-40af-beeb-acfc328fc9ec", OrganizationId = 75 },
                        new { UserId = "9cb75417-2d81-4a82-83e1-ce586bbdf6b6", OrganizationId = 74 },
                        new { UserId = "2694f6d1-632b-4ed0-b323-bcb9a0fa0f59", OrganizationId = 71 },
                        new { UserId = "efca6a8e-e5bb-4257-a8b9-ab6045880b0d", OrganizationId = 76 },
                        new { UserId = "23afff5a-f0d1-42e6-978c-09b263e132ac", OrganizationId = 75 },
                        new { UserId = "cbfcb26c-f544-482a-9e85-fc51a5d0d0d1", OrganizationId = 75 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
