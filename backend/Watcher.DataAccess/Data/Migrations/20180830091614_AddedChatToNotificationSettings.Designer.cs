// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180830091614_AddedChatToNotificationSettings")]
    partial class AddedChatToNotificationSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 93, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 4, Type = 1 },
                        new { Id = 102, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source3", Threshold = 97, Type = 1 },
                        new { Id = 103, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 55, Type = 0 },
                        new { Id = 104, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 5, Type = 2 },
                        new { Id = 105, DashboardId = 97, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 25, Type = 2 },
                        new { Id = 106, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 27, Type = 1 },
                        new { Id = 107, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 85, Type = 0 },
                        new { Id = 108, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 72, Type = 0 },
                        new { Id = 109, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source1", Threshold = 85, Type = 0 },
                        new { Id = 110, DashboardId = 93, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 47, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "360ebffe-bf69-4a55-a09a-83d6b102cf8f", IsActive = false, Name = "asperiores", Type = 0 },
                        new { Id = 22, CreatedById = "96f6c674-f860-4a6e-a8a6-d9c45813f59b", IsActive = false, Name = "ex", Type = 0 },
                        new { Id = 23, CreatedById = "bad80758-fd2c-41f8-a2b3-b5504d67a428", IsActive = false, Name = "quod", Type = 0 },
                        new { Id = 24, CreatedById = "37826b87-5f58-4272-9d9c-d47055ca4861", IsActive = false, Name = "eius", Type = 0 },
                        new { Id = 25, CreatedById = "18d545be-dd14-41ae-98a2-79f8255d49ec", IsActive = false, Name = "aspernatur", Type = 0 },
                        new { Id = 26, CreatedById = "ef62f575-a324-4529-867e-0de67899f25d", IsActive = false, Name = "illum", Type = 0 },
                        new { Id = 27, CreatedById = "68f4084e-f443-4968-92ae-4a11b5f3bec9", IsActive = false, Name = "facilis", Type = 0 },
                        new { Id = 28, CreatedById = "37826b87-5f58-4272-9d9c-d47055ca4861", IsActive = false, Name = "tempora", Type = 0 },
                        new { Id = 29, CreatedById = "ef62f575-a324-4529-867e-0de67899f25d", IsActive = false, Name = "quo", Type = 0 },
                        new { Id = 30, CreatedById = "37826b87-5f58-4272-9d9c-d47055ca4861", IsActive = false, Name = "occaecati", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 30, 7, 29, 38, 163, DateTimeKind.Local), InstanceId = 82, Title = "Title561" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 29, 20, 56, 32, 301, DateTimeKind.Local), InstanceId = 89, Title = "Title104" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 30, 5, 6, 44, 134, DateTimeKind.Local), InstanceId = 82, Title = "Title80" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 30, 4, 49, 43, 679, DateTimeKind.Local), InstanceId = 88, Title = "Title111" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 30, 9, 5, 4, 480, DateTimeKind.Local), InstanceId = 88, Title = "Title543" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 29, 16, 13, 27, 360, DateTimeKind.Local), InstanceId = 88, Title = "Title275" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 29, 15, 52, 28, 643, DateTimeKind.Local), InstanceId = 86, Title = "Title104" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 30, 3, 24, 39, 671, DateTimeKind.Local), InstanceId = 82, Title = "Title830" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 29, 16, 17, 14, 359, DateTimeKind.Local), InstanceId = 87, Title = "Title443" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 30, 9, 7, 22, 687, DateTimeKind.Local), InstanceId = 89, Title = "Title347" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 30, 1, 23, 54, 748, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Nulla nesciunt cupiditate.", UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 29, 14, 22, 18, 114, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Id sint eaque quas.", UserId = "37826b87-5f58-4272-9d9c-d47055ca4861", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 30, 5, 44, 45, 84, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Et excepturi voluptatem accusamus voluptas sed reiciendis.", UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 30, 10, 47, 41, 100, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Saepe quos minus id exercitationem.", UserId = "3b7e00aa-778b-409b-ac76-89da0c106903", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 29, 19, 34, 32, 551, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Quia assumenda sit est exercitationem velit et exercitationem.", UserId = "3a8570bc-6d2c-4ef2-a84e-ed83c7322b30", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 29, 15, 1, 30, 576, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Assumenda aspernatur voluptatem sunt similique sequi sed.", UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 29, 13, 10, 7, 38, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Consequatur earum nulla aut temporibus et.", UserId = "3a8570bc-6d2c-4ef2-a84e-ed83c7322b30", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 30, 3, 5, 23, 895, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Dignissimos blanditiis voluptates aut quod ut.", UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 29, 19, 43, 35, 853, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Dolorem fuga unde molestias.", UserId = "360ebffe-bf69-4a55-a09a-83d6b102cf8f", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 30, 8, 16, 39, 996, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Ut maxime et.", UserId = "ef62f575-a324-4529-867e-0de67899f25d", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "23:da:84:2d:c4:a1", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 79, Platform = "Linux", Title = "Instance129" },
                        new { Id = 82, Address = "bb:f5:c8:c3:7f:8d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Linux", Title = "Instance858" },
                        new { Id = 83, Address = "40:27:ba:38:23:65", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 77, Platform = "Windows", Title = "Instance232" },
                        new { Id = 84, Address = "06:41:7b:ba:f3:85", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 71, Platform = "Windows", Title = "Instance854" },
                        new { Id = 85, Address = "09:93:c2:e8:ac:a3", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 72, Platform = "Linux", Title = "Instance156" },
                        new { Id = 86, Address = "79:11:7a:1b:ca:fc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 72, Platform = "Linux", Title = "Instance614" },
                        new { Id = 87, Address = "fa:7d:c2:32:ca:79", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 75, Platform = "Windows", Title = "Instance41" },
                        new { Id = 88, Address = "8b:64:28:2e:fc:ad", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 74, Platform = "Windows", Title = "Instance815" },
                        new { Id = 89, Address = "3c:d8:c4:7b:2f:f4", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 78, Platform = "Linux", Title = "Instance546" },
                        new { Id = 90, Address = "64:b6:f3:c9:12:8b", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, OrganizationId = 79, Platform = "Windows", Title = "Instance936" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 24, CreatedAt = new DateTime(2018, 8, 30, 9, 35, 10, 596, DateTimeKind.Local), Text = "Voluptatibus velit sequi occaecati soluta sit.", UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428", WasRead = true },
                        new { Id = 32, ChatId = 25, CreatedAt = new DateTime(2018, 8, 29, 13, 27, 40, 320, DateTimeKind.Local), Text = "Delectus facilis dolores.", UserId = "3b7e00aa-778b-409b-ac76-89da0c106903", WasRead = false },
                        new { Id = 33, ChatId = 24, CreatedAt = new DateTime(2018, 8, 30, 4, 19, 10, 116, DateTimeKind.Local), Text = "Omnis recusandae laudantium quasi tempore suscipit et molestiae eligendi.", UserId = "96f6c674-f860-4a6e-a8a6-d9c45813f59b", WasRead = false },
                        new { Id = 34, ChatId = 28, CreatedAt = new DateTime(2018, 8, 29, 22, 29, 32, 837, DateTimeKind.Local), Text = "Omnis perferendis culpa sed aut inventore nobis.", UserId = "3b7e00aa-778b-409b-ac76-89da0c106903", WasRead = false },
                        new { Id = 35, ChatId = 26, CreatedAt = new DateTime(2018, 8, 30, 0, 49, 37, 981, DateTimeKind.Local), Text = "Animi repellat et nobis expedita iure eum nihil.", UserId = "3b7e00aa-778b-409b-ac76-89da0c106903", WasRead = false },
                        new { Id = 36, ChatId = 24, CreatedAt = new DateTime(2018, 8, 29, 20, 32, 45, 145, DateTimeKind.Local), Text = "Amet illum possimus placeat corrupti voluptatibus.", UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428", WasRead = true },
                        new { Id = 37, ChatId = 21, CreatedAt = new DateTime(2018, 8, 30, 9, 3, 53, 32, DateTimeKind.Local), Text = "Delectus maxime similique.", UserId = "41878c18-40ac-4565-bdcb-9c9789b1c2d0", WasRead = true },
                        new { Id = 38, ChatId = 27, CreatedAt = new DateTime(2018, 8, 29, 18, 26, 40, 80, DateTimeKind.Local), Text = "Ut a minus et occaecati aut ut rerum.", UserId = "41878c18-40ac-4565-bdcb-9c9789b1c2d0", WasRead = false },
                        new { Id = 39, ChatId = 27, CreatedAt = new DateTime(2018, 8, 29, 16, 56, 44, 917, DateTimeKind.Local), Text = "Qui est optio et non accusantium.", UserId = "68f4084e-f443-4968-92ae-4a11b5f3bec9", WasRead = true },
                        new { Id = 40, ChatId = 26, CreatedAt = new DateTime(2018, 8, 30, 5, 7, 16, 7, DateTimeKind.Local), Text = "Dolores dolor porro voluptates.", UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 30, 6, 54, 28, 528, DateTimeKind.Local), NotificationSettingId = 17, Text = "In et rem natus sed et nam.", UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec", WasRead = false },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 29, 21, 48, 15, 246, DateTimeKind.Local), NotificationSettingId = 11, Text = "Ad quia est nam omnis consequuntur.", UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428", WasRead = false },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 29, 22, 56, 28, 904, DateTimeKind.Local), NotificationSettingId = 19, Text = "Non deleniti velit.", UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec", WasRead = false },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 29, 15, 39, 18, 839, DateTimeKind.Local), NotificationSettingId = 14, Text = "Cupiditate a et exercitationem recusandae ut quisquam.", UserId = "68f4084e-f443-4968-92ae-4a11b5f3bec9", WasRead = false },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 30, 11, 6, 13, 468, DateTimeKind.Local), NotificationSettingId = 16, Text = "Inventore quas in in et et sunt architecto praesentium.", UserId = "ef62f575-a324-4529-867e-0de67899f25d", WasRead = false },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 30, 9, 51, 38, 724, DateTimeKind.Local), NotificationSettingId = 20, Text = "Libero ut non est eos ad alias minima et.", UserId = "37826b87-5f58-4272-9d9c-d47055ca4861", WasRead = false },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 29, 16, 54, 10, 731, DateTimeKind.Local), NotificationSettingId = 19, Text = "Adipisci nisi itaque ut.", UserId = "ef62f575-a324-4529-867e-0de67899f25d", WasRead = false },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 29, 23, 56, 20, 991, DateTimeKind.Local), NotificationSettingId = 15, Text = "Assumenda sint et non pariatur ad voluptatibus pariatur qui.", UserId = "68f4084e-f443-4968-92ae-4a11b5f3bec9", WasRead = false },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 29, 22, 59, 38, 131, DateTimeKind.Local), NotificationSettingId = 15, Text = "Et libero quod architecto quisquam possimus nemo.", UserId = "3a8570bc-6d2c-4ef2-a84e-ed83c7322b30", WasRead = false },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 29, 19, 2, 48, 230, DateTimeKind.Local), NotificationSettingId = 19, Text = "Et velit qui incidunt eos corrupti et repellat.", UserId = "68f4084e-f443-4968-92ae-4a11b5f3bec9", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "ef62f575-a324-4529-867e-0de67899f25d" },
                        new { Id = 12, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "3b7e00aa-778b-409b-ac76-89da0c106903" },
                        new { Id = 13, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "3a8570bc-6d2c-4ef2-a84e-ed83c7322b30" },
                        new { Id = 14, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "37826b87-5f58-4272-9d9c-d47055ca4861" },
                        new { Id = 15, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "41878c18-40ac-4565-bdcb-9c9789b1c2d0" },
                        new { Id = 16, IsDisable = false, IsEmailable = true, IsMute = true, Type = 0, UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428" },
                        new { Id = 18, IsDisable = false, IsEmailable = false, IsMute = false, Type = 2, UserId = "68f4084e-f443-4968-92ae-4a11b5f3bec9" },
                        new { Id = 19, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec" },
                        new { Id = 20, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "41878c18-40ac-4565-bdcb-9c9789b1c2d0" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "432.633.4642 x00873", CreatedByUserId = "3b7e00aa-778b-409b-ac76-89da0c106903", Description = "Dolor nemo architecto perferendis et accusamus aut. Tempore aut odio ipsam minus nulla at illum ad.", Email = "Emilie22@yahoo.com", IsActive = true, Name = "Company56", ThemeId = 70, WebSite = "https://green.org" },
                        new { Id = 72, ContactNumber = "(656) 470-7947 x2361", CreatedByUserId = "37826b87-5f58-4272-9d9c-d47055ca4861", Description = "Placeat vel et ut culpa. Odio et atque dolores dicta ad quibusdam. Error voluptatem fugit sit sint odit. Et beatae voluptas eaque corporis assumenda non perspiciatis.", Email = "Damion51@gmail.com", IsActive = true, Name = "Company763", ThemeId = 64, WebSite = "http://vesta.net" },
                        new { Id = 73, ContactNumber = "751.201.0266", CreatedByUserId = "96f6c674-f860-4a6e-a8a6-d9c45813f59b", Description = "Nobis ullam deleniti incidunt minima assumenda incidunt. Autem minus veritatis voluptatum molestiae. Harum iusto distinctio hic praesentium quia aut debitis. Omnis provident magni maxime veritatis voluptatum.", Email = "Norene.Ward7@hotmail.com", IsActive = true, Name = "Company23", ThemeId = 68, WebSite = "http://spencer.net" },
                        new { Id = 74, ContactNumber = "1-590-923-5666 x266", CreatedByUserId = "360ebffe-bf69-4a55-a09a-83d6b102cf8f", Description = "Quisquam optio ratione accusantium dolorem dolor quis sapiente est. Est unde consequatur velit iusto sequi ipsum. Praesentium corrupti perspiciatis illum quas aut ut. Nulla vel sunt fugit incidunt et minima.", Email = "Armando22@gmail.com", IsActive = true, Name = "Company339", ThemeId = 66, WebSite = "https://edward.net" },
                        new { Id = 75, ContactNumber = "615-501-1339 x12669", CreatedByUserId = "ef62f575-a324-4529-867e-0de67899f25d", Description = "Est suscipit repellat enim incidunt nobis voluptates excepturi voluptates. Est totam id.", Email = "Jewell93@gmail.com", IsActive = true, Name = "Company526", ThemeId = 61, WebSite = "http://jamel.name" },
                        new { Id = 76, ContactNumber = "(635) 487-4061 x552", CreatedByUserId = "41878c18-40ac-4565-bdcb-9c9789b1c2d0", Description = "Perferendis ratione aut iusto pariatur. Corporis voluptatem reiciendis ipsum in occaecati et nemo. Dolore excepturi enim assumenda architecto sunt dolores.", Email = "Harvey.Nienow@gmail.com", IsActive = true, Name = "Company284", ThemeId = 62, WebSite = "http://jedidiah.org" },
                        new { Id = 77, ContactNumber = "1-917-231-3432 x57080", CreatedByUserId = "3b7e00aa-778b-409b-ac76-89da0c106903", Description = "Tempore eligendi debitis dolorem hic molestias voluptas.", Email = "Yoshiko_Upton76@yahoo.com", IsActive = true, Name = "Company928", ThemeId = 64, WebSite = "https://gaetano.name" },
                        new { Id = 78, ContactNumber = "237-898-6479", CreatedByUserId = "ef62f575-a324-4529-867e-0de67899f25d", Description = "", Email = "Ramona_Stark@gmail.com", IsActive = true, Name = "Company243", ThemeId = 67, WebSite = "https://dino.info" },
                        new { Id = 79, ContactNumber = "1-244-390-4660 x49319", CreatedByUserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428", Description = "", Email = "Margie54@hotmail.com", IsActive = true, Name = "Company256", ThemeId = 64, WebSite = "http://kolby.org" },
                        new { Id = 80, ContactNumber = "947-946-7324", CreatedByUserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428", Description = "Voluptate delectus laborum assumenda sunt autem non. Et nobis et amet. Quisquam voluptate animi rerum sunt aut et.", Email = "Maxime_Marks@gmail.com", IsActive = true, Name = "Company390", ThemeId = 64, WebSite = "https://arlo.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 29, 16, 52, 51, 931, DateTimeKind.Local), FeedbackId = 44, Text = "Quia dolor et.", UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 30, 5, 10, 2, 527, DateTimeKind.Local), FeedbackId = 47, Text = "Quas similique veniam beatae velit nulla fugit vero.", UserId = "96f6c674-f860-4a6e-a8a6-d9c45813f59b" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 29, 14, 29, 42, 698, DateTimeKind.Local), FeedbackId = 43, Text = "Ipsum voluptatibus veritatis voluptatem.", UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 30, 11, 4, 48, 969, DateTimeKind.Local), FeedbackId = 44, Text = "Accusamus cupiditate rerum ipsa.", UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 30, 4, 56, 39, 264, DateTimeKind.Local), FeedbackId = 43, Text = "Qui natus non architecto quae.", UserId = "360ebffe-bf69-4a55-a09a-83d6b102cf8f" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 29, 12, 57, 53, 997, DateTimeKind.Local), FeedbackId = 43, Text = "Rem nemo nulla officia et.", UserId = "41878c18-40ac-4565-bdcb-9c9789b1c2d0" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 29, 19, 51, 0, 127, DateTimeKind.Local), FeedbackId = 41, Text = "Esse aut fugit eos suscipit hic in adipisci aut reiciendis.", UserId = "3a8570bc-6d2c-4ef2-a84e-ed83c7322b30" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 29, 22, 1, 14, 588, DateTimeKind.Local), FeedbackId = 49, Text = "Dolores fugiat consequuntur id deleniti.", UserId = "3b7e00aa-778b-409b-ac76-89da0c106903" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 29, 22, 55, 14, 897, DateTimeKind.Local), FeedbackId = 46, Text = "Aut reiciendis iusto unde voluptate.", UserId = "37826b87-5f58-4272-9d9c-d47055ca4861" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 29, 12, 44, 3, 459, DateTimeKind.Local), FeedbackId = 49, Text = "Autem et dolores labore neque accusamus modi.", UserId = "96f6c674-f860-4a6e-a8a6-d9c45813f59b" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme499" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme442" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme116" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme842" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme884" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme636" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme448" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Univers", Name = "Theme670" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme94" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme234" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "68f4084e-f443-4968-92ae-4a11b5f3bec9", CreatedAt = new DateTime(2018, 8, 29, 22, 6, 12, 309, DateTimeKind.Local), DisplayName = "Quinn", Email = "Lucius_Hessel@yahoo.com", FirstName = "Kariane", IsActive = true, LastName = "Walter", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg", RoleId = 1 },
                        new { Id = "3b7e00aa-778b-409b-ac76-89da0c106903", CreatedAt = new DateTime(2018, 8, 29, 17, 42, 44, 529, DateTimeKind.Local), DisplayName = "Katelynn", Email = "Caroline83@gmail.com", FirstName = "Nat", IsActive = true, LastName = "Herman", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg", RoleId = 2 },
                        new { Id = "3a8570bc-6d2c-4ef2-a84e-ed83c7322b30", CreatedAt = new DateTime(2018, 8, 29, 13, 42, 10, 844, DateTimeKind.Local), DisplayName = "Nikolas", Email = "Rosetta_McClure@gmail.com", FirstName = "Vicente", IsActive = true, LastName = "Pouros", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg", RoleId = 2 },
                        new { Id = "41878c18-40ac-4565-bdcb-9c9789b1c2d0", CreatedAt = new DateTime(2018, 8, 30, 0, 10, 56, 759, DateTimeKind.Local), DisplayName = "Ludwig", Email = "Zaria7@hotmail.com", FirstName = "Izaiah", IsActive = true, LastName = "Hansen", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/panghal0/128.jpg", RoleId = 2 },
                        new { Id = "96f6c674-f860-4a6e-a8a6-d9c45813f59b", CreatedAt = new DateTime(2018, 8, 30, 6, 42, 1, 734, DateTimeKind.Local), DisplayName = "Garret", Email = "Darrell.Lowe@yahoo.com", FirstName = "Jon", IsActive = true, LastName = "Krajcik", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/wake_gs/128.jpg", RoleId = 1 },
                        new { Id = "ef62f575-a324-4529-867e-0de67899f25d", CreatedAt = new DateTime(2018, 8, 29, 23, 39, 37, 297, DateTimeKind.Local), DisplayName = "Bertram", Email = "Hershel_Langosh12@hotmail.com", FirstName = "Aiyana", IsActive = true, LastName = "Wisoky", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg", RoleId = 2 },
                        new { Id = "37826b87-5f58-4272-9d9c-d47055ca4861", CreatedAt = new DateTime(2018, 8, 30, 8, 44, 0, 93, DateTimeKind.Local), DisplayName = "Frida", Email = "Gussie_Gleason7@gmail.com", FirstName = "Stephanie", IsActive = true, LastName = "Erdman", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg", RoleId = 1 },
                        new { Id = "360ebffe-bf69-4a55-a09a-83d6b102cf8f", CreatedAt = new DateTime(2018, 8, 30, 3, 51, 36, 534, DateTimeKind.Local), DisplayName = "Jazmin", Email = "Benny4@yahoo.com", FirstName = "Easter", IsActive = true, LastName = "Spencer", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/turkutuuli/128.jpg", RoleId = 1 },
                        new { Id = "bad80758-fd2c-41f8-a2b3-b5504d67a428", CreatedAt = new DateTime(2018, 8, 29, 21, 1, 20, 490, DateTimeKind.Local), DisplayName = "Clyde", Email = "Lura.Corkery72@yahoo.com", FirstName = "Maria", IsActive = true, LastName = "Schumm", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/VMilescu/128.jpg", RoleId = 1 },
                        new { Id = "18d545be-dd14-41ae-98a2-79f8255d49ec", CreatedAt = new DateTime(2018, 8, 29, 16, 34, 56, 975, DateTimeKind.Local), DisplayName = "Emmanuel", Email = "Xzavier.Emard@gmail.com", FirstName = "Bryon", IsActive = true, LastName = "Stracke", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "68f4084e-f443-4968-92ae-4a11b5f3bec9", OrganizationId = 77 },
                        new { UserId = "3b7e00aa-778b-409b-ac76-89da0c106903", OrganizationId = 78 },
                        new { UserId = "3a8570bc-6d2c-4ef2-a84e-ed83c7322b30", OrganizationId = 72 },
                        new { UserId = "41878c18-40ac-4565-bdcb-9c9789b1c2d0", OrganizationId = 73 },
                        new { UserId = "96f6c674-f860-4a6e-a8a6-d9c45813f59b", OrganizationId = 79 },
                        new { UserId = "ef62f575-a324-4529-867e-0de67899f25d", OrganizationId = 71 },
                        new { UserId = "37826b87-5f58-4272-9d9c-d47055ca4861", OrganizationId = 74 },
                        new { UserId = "360ebffe-bf69-4a55-a09a-83d6b102cf8f", OrganizationId = 74 },
                        new { UserId = "bad80758-fd2c-41f8-a2b3-b5504d67a428", OrganizationId = 76 },
                        new { UserId = "18d545be-dd14-41ae-98a2-79f8255d49ec", OrganizationId = 77 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
