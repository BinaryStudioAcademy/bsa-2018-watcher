// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180820205434_AddedToOrganizationColumn")]
    partial class AddedToOrganizationColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 97, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source2", Threshold = 88, Type = 2 },
                        new { Id = 102, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source3", Threshold = 96, Type = 0 },
                        new { Id = 103, DashboardId = 94, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 8, Type = 0 },
                        new { Id = 104, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 29, Type = 2 },
                        new { Id = 105, DashboardId = 99, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 43, Type = 2 },
                        new { Id = 106, DashboardId = 94, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 57, Type = 0 },
                        new { Id = 107, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source2", Threshold = 100, Type = 1 },
                        new { Id = 108, DashboardId = 96, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 57, Type = 0 },
                        new { Id = 109, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 15, Type = 0 },
                        new { Id = 110, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source1", Threshold = 15, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "5bad4243-e775-4bbd-9263-6c8e5fe999c9", Name = "dolores", Type = 0 },
                        new { Id = 22, CreatedById = "db8fa606-d6b2-4abc-bb25-7329d8392793", Name = "magnam", Type = 0 },
                        new { Id = 23, CreatedById = "0070dff4-5df2-46a8-9fdc-55d3e943dfae", Name = "ullam", Type = 0 },
                        new { Id = 24, CreatedById = "5bad4243-e775-4bbd-9263-6c8e5fe999c9", Name = "architecto", Type = 0 },
                        new { Id = 25, CreatedById = "35c8b495-2eca-4826-ac63-e76acaa26be4", Name = "ut", Type = 0 },
                        new { Id = 26, CreatedById = "db8fa606-d6b2-4abc-bb25-7329d8392793", Name = "incidunt", Type = 0 },
                        new { Id = 27, CreatedById = "db8fa606-d6b2-4abc-bb25-7329d8392793", Name = "consectetur", Type = 0 },
                        new { Id = 28, CreatedById = "5ea7ee6c-848f-4c20-bed2-8a1384bb79f9", Name = "cupiditate", Type = 0 },
                        new { Id = 29, CreatedById = "334105ba-6abf-4bc4-9fc4-a0a87a22deab", Name = "aspernatur", Type = 0 },
                        new { Id = 30, CreatedById = "dc889918-2400-4afb-8e4b-1739f54b1909", Name = "velit", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 20, 15, 9, 58, 911, DateTimeKind.Local), InstanceId = 83, Title = "Title693" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 20, 15, 12, 26, 449, DateTimeKind.Local), InstanceId = 86, Title = "Title228" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 20, 10, 18, 55, 781, DateTimeKind.Local), InstanceId = 89, Title = "Title424" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 20, 14, 33, 23, 83, DateTimeKind.Local), InstanceId = 90, Title = "Title988" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 20, 11, 47, 30, 409, DateTimeKind.Local), InstanceId = 87, Title = "Title463" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 20, 16, 17, 48, 320, DateTimeKind.Local), InstanceId = 81, Title = "Title657" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 20, 23, 48, 15, 537, DateTimeKind.Local), InstanceId = 81, Title = "Title656" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 20, 22, 25, 27, 426, DateTimeKind.Local), InstanceId = 82, Title = "Title598" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 20, 17, 11, 37, 544, DateTimeKind.Local), InstanceId = 86, Title = "Title107" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 20, 18, 59, 10, 962, DateTimeKind.Local), InstanceId = 90, Title = "Title480" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 20, 16, 2, 37, 400, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Laboriosam cupiditate eius voluptate aut earum blanditiis.", UserId = "db8fa606-d6b2-4abc-bb25-7329d8392793", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 20, 2, 10, 17, 334, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Delectus praesentium sed sapiente a dolorem sit reiciendis.", UserId = "5ea7ee6c-848f-4c20-bed2-8a1384bb79f9", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 20, 1, 17, 13, 572, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Velit dolore impedit ut explicabo quam.", UserId = "35c8b495-2eca-4826-ac63-e76acaa26be4", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 20, 20, 2, 4, 630, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Laudantium quia omnis dolorem numquam numquam laudantium qui.", UserId = "0070dff4-5df2-46a8-9fdc-55d3e943dfae", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 20, 22, 16, 24, 894, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Commodi neque eligendi tempore.", UserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 20, 20, 1, 54, 449, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Dolor sed repudiandae qui numquam.", UserId = "b986e454-4e45-4fca-ae3b-2b66c6568f38", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 20, 11, 23, 29, 411, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Minima excepturi accusamus aut.", UserId = "dc889918-2400-4afb-8e4b-1739f54b1909", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 20, 0, 57, 20, 444, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Autem ipsum rerum soluta consequatur placeat maxime nihil adipisci vel.", UserId = "dc889918-2400-4afb-8e4b-1739f54b1909", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 20, 12, 35, 4, 156, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Eaque iste eaque.", UserId = "0070dff4-5df2-46a8-9fdc-55d3e943dfae", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 20, 16, 16, 48, 609, DateTimeKind.Local), Friendliness = 0, Informatively = 0, Quickness = 0, Text = "Neque vero maxime.", UserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "b9:74:72:80:2e:7e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 75, Platform = "Linux", Title = "Instance268" },
                        new { Id = 82, Address = "34:cd:b1:75:99:1d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 75, Platform = "Windows", Title = "Instance157" },
                        new { Id = 83, Address = "f8:a5:01:ae:34:9c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 73, Platform = "Linux", Title = "Instance517" },
                        new { Id = 84, Address = "0b:bb:a7:be:c4:fc", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 77, Platform = "Linux", Title = "Instance846" },
                        new { Id = 85, Address = "c5:f8:ac:f2:d6:5f", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 72, Platform = "Windows", Title = "Instance199" },
                        new { Id = 86, Address = "cc:ee:4a:29:fd:13", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 75, Platform = "Windows", Title = "Instance975" },
                        new { Id = 87, Address = "3f:8c:85:fb:6d:79", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 72, Platform = "Linux", Title = "Instance297" },
                        new { Id = 88, Address = "79:60:b1:b9:55:00", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 80, Platform = "Linux", Title = "Instance693" },
                        new { Id = 89, Address = "6f:be:eb:dd:60:1c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 75, Platform = "Windows", Title = "Instance844" },
                        new { Id = 90, Address = "8a:e0:bf:a1:8a:39", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = false, OrganizationId = 75, Platform = "Windows", Title = "Instance751" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 23, CreatedAt = new DateTime(2018, 8, 20, 1, 21, 29, 326, DateTimeKind.Local), Text = "Nemo aut expedita ut est qui quaerat quis et.", UserId = "0070dff4-5df2-46a8-9fdc-55d3e943dfae", WasRead = false },
                        new { Id = 32, ChatId = 26, CreatedAt = new DateTime(2018, 8, 20, 5, 40, 15, 150, DateTimeKind.Local), Text = "Est veniam quaerat quasi iure.", UserId = "e801f449-f5d7-482a-b2e0-a2f448175b94", WasRead = true },
                        new { Id = 33, ChatId = 29, CreatedAt = new DateTime(2018, 8, 20, 4, 3, 37, 835, DateTimeKind.Local), Text = "Provident aspernatur sapiente accusantium quis eum sed quia fugit.", UserId = "dc889918-2400-4afb-8e4b-1739f54b1909", WasRead = true },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 8, 20, 16, 21, 59, 909, DateTimeKind.Local), Text = "Est assumenda illum.", UserId = "b986e454-4e45-4fca-ae3b-2b66c6568f38", WasRead = true },
                        new { Id = 35, ChatId = 29, CreatedAt = new DateTime(2018, 8, 20, 23, 19, 14, 48, DateTimeKind.Local), Text = "Dolore impedit repudiandae in voluptas fugit vel perspiciatis eaque.", UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118", WasRead = false },
                        new { Id = 36, ChatId = 28, CreatedAt = new DateTime(2018, 8, 20, 12, 28, 31, 106, DateTimeKind.Local), Text = "Sit incidunt repudiandae ut eligendi minus aspernatur.", UserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9", WasRead = false },
                        new { Id = 37, ChatId = 26, CreatedAt = new DateTime(2018, 8, 20, 16, 25, 13, 225, DateTimeKind.Local), Text = "Quam et numquam ea.", UserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9", WasRead = true },
                        new { Id = 38, ChatId = 27, CreatedAt = new DateTime(2018, 8, 20, 5, 57, 18, 194, DateTimeKind.Local), Text = "Magnam aut autem ut dicta qui sunt nisi et.", UserId = "db8fa606-d6b2-4abc-bb25-7329d8392793", WasRead = false },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 8, 20, 20, 39, 14, 724, DateTimeKind.Local), Text = "Qui odio est est iste id nobis.", UserId = "e801f449-f5d7-482a-b2e0-a2f448175b94", WasRead = true },
                        new { Id = 40, ChatId = 22, CreatedAt = new DateTime(2018, 8, 20, 21, 0, 37, 47, DateTimeKind.Local), Text = "Adipisci voluptas quidem non quo sit quod cumque.", UserId = "0070dff4-5df2-46a8-9fdc-55d3e943dfae", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 20, 5, 44, 13, 891, DateTimeKind.Local), NotificationSettingId = 16, Text = "Voluptas omnis ullam excepturi et similique rem provident quos et.", UserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 20, 7, 47, 50, 462, DateTimeKind.Local), NotificationSettingId = 16, Text = "Eum commodi ut qui laborum labore numquam.", UserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 20, 11, 50, 46, 708, DateTimeKind.Local), NotificationSettingId = 17, Text = "Consequatur facere molestiae quibusdam at.", UserId = "e801f449-f5d7-482a-b2e0-a2f448175b94" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 20, 20, 47, 27, 469, DateTimeKind.Local), NotificationSettingId = 20, Text = "Odit expedita fuga.", UserId = "0070dff4-5df2-46a8-9fdc-55d3e943dfae" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 20, 2, 8, 0, 717, DateTimeKind.Local), NotificationSettingId = 18, Text = "Reiciendis enim omnis culpa voluptatibus rem culpa possimus.", UserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 20, 20, 45, 50, 70, DateTimeKind.Local), NotificationSettingId = 13, Text = "Magnam quisquam expedita.", UserId = "e801f449-f5d7-482a-b2e0-a2f448175b94" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 20, 11, 39, 2, 738, DateTimeKind.Local), NotificationSettingId = 18, Text = "Vel ipsa id quidem non consequatur dolores.", UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 20, 16, 28, 6, 509, DateTimeKind.Local), NotificationSettingId = 12, Text = "Dolores ut laborum similique ut in accusamus recusandae.", UserId = "35c8b495-2eca-4826-ac63-e76acaa26be4" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 20, 3, 42, 51, 751, DateTimeKind.Local), NotificationSettingId = 13, Text = "Necessitatibus tempore et tempore nihil laboriosam ducimus cupiditate.", UserId = "0070dff4-5df2-46a8-9fdc-55d3e943dfae" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 20, 10, 7, 56, 389, DateTimeKind.Local), NotificationSettingId = 20, Text = "Et et quidem fugiat.", UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = true, IsMute = false, Type = 3, UserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9" },
                        new { Id = 12, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 3, UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118" },
                        new { Id = 14, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9" },
                        new { Id = 15, IsDisable = false, IsEmailable = false, IsMute = true, Type = 2, UserId = "dc889918-2400-4afb-8e4b-1739f54b1909" },
                        new { Id = 16, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab" },
                        new { Id = 17, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "35c8b495-2eca-4826-ac63-e76acaa26be4" },
                        new { Id = 18, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab" },
                        new { Id = 19, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "dc889918-2400-4afb-8e4b-1739f54b1909" },
                        new { Id = 20, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "664.692.2176 x90831", CreatedByUserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9", Description = "", Email = "Krystina44@yahoo.com", IsActive = true, Name = "Company557", ThemeId = 64, WebSite = "https://madalyn.biz" },
                        new { Id = 72, ContactNumber = "459.832.7201 x309", CreatedByUserId = "b986e454-4e45-4fca-ae3b-2b66c6568f38", Description = "Officia expedita sunt.", Email = "Jefferey58@gmail.com", IsActive = true, Name = "Company365", ThemeId = 69, WebSite = "http://madie.name" },
                        new { Id = 73, ContactNumber = "747.640.4148 x610", CreatedByUserId = "e801f449-f5d7-482a-b2e0-a2f448175b94", Description = "Amet beatae libero et. Iusto nam quis est qui numquam quos laborum. Voluptas vel quia sed.", Email = "Edward.Konopelski43@yahoo.com", IsActive = true, Name = "Company189", ThemeId = 64, WebSite = "http://skylar.name" },
                        new { Id = 74, ContactNumber = "(358) 737-9810", CreatedByUserId = "e801f449-f5d7-482a-b2e0-a2f448175b94", Description = "", Email = "Brain5@gmail.com", IsActive = true, Name = "Company409", ThemeId = 65, WebSite = "http://george.com" },
                        new { Id = 75, ContactNumber = "(836) 632-9419", CreatedByUserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9", Description = "Ut aut ipsa. Facilis natus voluptatem non. Pariatur debitis sapiente. Doloremque suscipit iure distinctio.", Email = "Alberto.Brekke62@hotmail.com", IsActive = true, Name = "Company249", ThemeId = 69, WebSite = "http://jaiden.net" },
                        new { Id = 76, ContactNumber = "1-478-471-9297", CreatedByUserId = "dc889918-2400-4afb-8e4b-1739f54b1909", Description = "", Email = "Julian.Fay@yahoo.com", IsActive = true, Name = "Company223", ThemeId = 63, WebSite = "https://roger.biz" },
                        new { Id = 77, ContactNumber = "1-785-547-4075", CreatedByUserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab", Description = "Iure enim velit et. Tempore explicabo accusantium dolorem vel omnis. Non assumenda esse tenetur id rem autem.", Email = "Jacynthe_Hermann83@yahoo.com", IsActive = true, Name = "Company975", ThemeId = 63, WebSite = "http://bernadine.name" },
                        new { Id = 78, ContactNumber = "200.361.4805", CreatedByUserId = "35c8b495-2eca-4826-ac63-e76acaa26be4", Description = "", Email = "Buster_OKeefe@hotmail.com", IsActive = true, Name = "Company519", ThemeId = 69, WebSite = "https://kyla.info" },
                        new { Id = 79, ContactNumber = "(327) 610-2591 x59632", CreatedByUserId = "35c8b495-2eca-4826-ac63-e76acaa26be4", Description = "Voluptatibus eos est. Voluptas temporibus et enim voluptates dolorum.", Email = "Garrett.Kovacek@yahoo.com", IsActive = true, Name = "Company242", ThemeId = 62, WebSite = "https://jailyn.org" },
                        new { Id = 80, ContactNumber = "1-677-449-0292", CreatedByUserId = "b986e454-4e45-4fca-ae3b-2b66c6568f38", Description = "Enim deleniti et est eum. Sed voluptatum rerum qui accusamus ut. Impedit quos dignissimos sunt unde vel quis eius suscipit fugiat. Ipsa quia officiis a in aspernatur.", Email = "Dorian.DuBuque88@yahoo.com", IsActive = true, Name = "Company95", ThemeId = 69, WebSite = "https://maurine.org" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 20, 6, 12, 29, 421, DateTimeKind.Local), FeedbackId = 48, Text = "A architecto recusandae tenetur tenetur minima molestiae.", UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 20, 16, 0, 16, 446, DateTimeKind.Local), FeedbackId = 46, Text = "Doloremque iure aut dolorum aperiam eum porro.", UserId = "b986e454-4e45-4fca-ae3b-2b66c6568f38" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 20, 0, 46, 40, 11, DateTimeKind.Local), FeedbackId = 44, Text = "Aut est rem in.", UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 20, 22, 17, 48, 652, DateTimeKind.Local), FeedbackId = 47, Text = "Harum at provident.", UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 20, 21, 50, 57, 547, DateTimeKind.Local), FeedbackId = 45, Text = "Placeat et sed non pariatur animi magnam aperiam aut.", UserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 20, 22, 56, 19, 177, DateTimeKind.Local), FeedbackId = 50, Text = "Accusantium accusantium doloribus at.", UserId = "e801f449-f5d7-482a-b2e0-a2f448175b94" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 20, 14, 38, 3, 959, DateTimeKind.Local), FeedbackId = 42, Text = "Deleniti iste ipsam a.", UserId = "35c8b495-2eca-4826-ac63-e76acaa26be4" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 20, 6, 25, 59, 652, DateTimeKind.Local), FeedbackId = 46, Text = "Dolores voluptatem qui rerum tempora vitae voluptatum autem.", UserId = "e801f449-f5d7-482a-b2e0-a2f448175b94" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 20, 7, 33, 39, 845, DateTimeKind.Local), FeedbackId = 47, Text = "Est laudantium enim at eaque tempora illo est et.", UserId = "db8fa606-d6b2-4abc-bb25-7329d8392793" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 20, 15, 7, 18, 728, DateTimeKind.Local), FeedbackId = 48, Text = "Animi ut nobis eius sunt laudantium magnam aspernatur.", UserId = "dc889918-2400-4afb-8e4b-1739f54b1909" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme718" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme548" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme196" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme244" },
                        new { Id = 65, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme297" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme292" },
                        new { Id = 67, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme813" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme261" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme952" },
                        new { Id = 70, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme325" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "db8fa606-d6b2-4abc-bb25-7329d8392793", CreatedAt = new DateTime(2018, 8, 20, 14, 2, 10, 68, DateTimeKind.Local), DisplayName = "Leon", Email = "Julia_Prosacco92@gmail.com", FirstName = "Justice", IsActive = true, LastName = "Rowe", RoleId = 2 },
                        new { Id = "334105ba-6abf-4bc4-9fc4-a0a87a22deab", CreatedAt = new DateTime(2018, 8, 20, 15, 50, 55, 40, DateTimeKind.Local), DisplayName = "Arlo", Email = "Madelynn95@gmail.com", FirstName = "Sally", IsActive = true, LastName = "Wolff", RoleId = 2 },
                        new { Id = "b986e454-4e45-4fca-ae3b-2b66c6568f38", CreatedAt = new DateTime(2018, 8, 20, 14, 13, 18, 3, DateTimeKind.Local), DisplayName = "Mortimer", Email = "Garry86@hotmail.com", FirstName = "Harmon", IsActive = true, LastName = "Cruickshank", RoleId = 2 },
                        new { Id = "35c8b495-2eca-4826-ac63-e76acaa26be4", CreatedAt = new DateTime(2018, 8, 20, 6, 46, 47, 543, DateTimeKind.Local), DisplayName = "Hudson", Email = "Ted.Lakin@yahoo.com", FirstName = "Helena", IsActive = true, LastName = "Rutherford", RoleId = 1 },
                        new { Id = "e0c531cb-0853-479a-b8b0-abf17f4af118", CreatedAt = new DateTime(2018, 8, 20, 16, 31, 45, 920, DateTimeKind.Local), DisplayName = "Estel", Email = "Moriah.Ryan@gmail.com", FirstName = "Burdette", IsActive = true, LastName = "Rogahn", RoleId = 2 },
                        new { Id = "dc889918-2400-4afb-8e4b-1739f54b1909", CreatedAt = new DateTime(2018, 8, 20, 4, 18, 23, 187, DateTimeKind.Local), DisplayName = "Daryl", Email = "Bianka.Metz14@hotmail.com", FirstName = "Santiago", IsActive = true, LastName = "Schroeder", RoleId = 2 },
                        new { Id = "5bad4243-e775-4bbd-9263-6c8e5fe999c9", CreatedAt = new DateTime(2018, 8, 20, 20, 21, 25, 431, DateTimeKind.Local), DisplayName = "Ned", Email = "Asia.Littel@gmail.com", FirstName = "Noemi", IsActive = true, LastName = "Leannon", RoleId = 1 },
                        new { Id = "e801f449-f5d7-482a-b2e0-a2f448175b94", CreatedAt = new DateTime(2018, 8, 20, 9, 30, 27, 497, DateTimeKind.Local), DisplayName = "Earlene", Email = "Mandy_Simonis@yahoo.com", FirstName = "Daisha", IsActive = true, LastName = "Ferry", RoleId = 1 },
                        new { Id = "5ea7ee6c-848f-4c20-bed2-8a1384bb79f9", CreatedAt = new DateTime(2018, 8, 20, 16, 16, 2, 956, DateTimeKind.Local), DisplayName = "Herta", Email = "Leone.Leuschke@hotmail.com", FirstName = "Zaria", IsActive = true, LastName = "Macejkovic", RoleId = 2 },
                        new { Id = "0070dff4-5df2-46a8-9fdc-55d3e943dfae", CreatedAt = new DateTime(2018, 8, 20, 8, 31, 21, 345, DateTimeKind.Local), DisplayName = "Spencer", Email = "Geraldine_Fahey@yahoo.com", FirstName = "Titus", IsActive = true, LastName = "Weber", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "db8fa606-d6b2-4abc-bb25-7329d8392793", OrganizationId = 71 },
                        new { UserId = "334105ba-6abf-4bc4-9fc4-a0a87a22deab", OrganizationId = 71 },
                        new { UserId = "b986e454-4e45-4fca-ae3b-2b66c6568f38", OrganizationId = 72 },
                        new { UserId = "35c8b495-2eca-4826-ac63-e76acaa26be4", OrganizationId = 71 },
                        new { UserId = "e0c531cb-0853-479a-b8b0-abf17f4af118", OrganizationId = 72 },
                        new { UserId = "dc889918-2400-4afb-8e4b-1739f54b1909", OrganizationId = 75 },
                        new { UserId = "5bad4243-e775-4bbd-9263-6c8e5fe999c9", OrganizationId = 77 },
                        new { UserId = "e801f449-f5d7-482a-b2e0-a2f448175b94", OrganizationId = 75 },
                        new { UserId = "5ea7ee6c-848f-4c20-bed2-8a1384bb79f9", OrganizationId = 73 },
                        new { UserId = "0070dff4-5df2-46a8-9fdc-55d3e943dfae", OrganizationId = 73 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
