// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180814091017_InstanceModelAddedGuidId")]
    partial class InstanceModelAddedGuidId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 92, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source3", Threshold = 7, Type = 0 },
                        new { Id = 102, DashboardId = 100, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 60, Type = 0 },
                        new { Id = 103, DashboardId = 97, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 77, Type = 1 },
                        new { Id = 104, DashboardId = 96, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 83, Type = 0 },
                        new { Id = 105, DashboardId = 99, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source3", Threshold = 33, Type = 1 },
                        new { Id = 106, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 10, Type = 1 },
                        new { Id = 107, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source3", Threshold = 1, Type = 2 },
                        new { Id = 108, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 5, Type = 1 },
                        new { Id = 109, DashboardId = 92, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 27, Type = 0 },
                        new { Id = 110, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 66, Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "db507c3c-7654-4083-9250-457e9c7411be", Name = "fugit", Type = 0 },
                        new { Id = 22, CreatedById = "5e76c8bb-3095-4a28-82a8-3da25315b73a", Name = "quia", Type = 0 },
                        new { Id = 23, CreatedById = "db507c3c-7654-4083-9250-457e9c7411be", Name = "consectetur", Type = 0 },
                        new { Id = 24, CreatedById = "5e76c8bb-3095-4a28-82a8-3da25315b73a", Name = "et", Type = 0 },
                        new { Id = 25, CreatedById = "187015d1-188d-44fc-8239-11ae2c506e2f", Name = "minima", Type = 0 },
                        new { Id = 26, CreatedById = "5a1558a3-0421-4247-a5ee-df47360c9d09", Name = "et", Type = 0 },
                        new { Id = 27, CreatedById = "419c3e58-ffbf-456f-86f6-2d54a39b609c", Name = "quaerat", Type = 0 },
                        new { Id = 28, CreatedById = "38d449c2-96b3-4ab7-ba30-814f9fe96587", Name = "et", Type = 0 },
                        new { Id = 29, CreatedById = "ad9d5836-dd59-4035-b4bd-2f5423752527", Name = "blanditiis", Type = 0 },
                        new { Id = 30, CreatedById = "db507c3c-7654-4083-9250-457e9c7411be", Name = "quo", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 14, 1, 34, 38, 908, DateTimeKind.Local), InstanceId = 83, Title = "Title915" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 14, 3, 17, 23, 774, DateTimeKind.Local), InstanceId = 88, Title = "Title680" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 14, 2, 13, 16, 933, DateTimeKind.Local), InstanceId = 83, Title = "Title7" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 14, 0, 36, 25, 124, DateTimeKind.Local), InstanceId = 82, Title = "Title293" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 14, 1, 53, 35, 557, DateTimeKind.Local), InstanceId = 84, Title = "Title141" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 13, 17, 15, 19, 69, DateTimeKind.Local), InstanceId = 89, Title = "Title920" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 13, 15, 24, 36, 970, DateTimeKind.Local), InstanceId = 86, Title = "Title207" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 13, 12, 19, 57, 58, DateTimeKind.Local), InstanceId = 83, Title = "Title562" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 14, 0, 9, 39, 70, DateTimeKind.Local), InstanceId = 87, Title = "Title272" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 14, 1, 15, 55, 714, DateTimeKind.Local), InstanceId = 84, Title = "Title903" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 13, 12, 16, 16, 746, DateTimeKind.Local), Text = "Iusto velit fugit atque alias ab laborum id soluta.", UserId = "ba229852-6f9f-4d85-b956-ff5bea3dcb84" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 13, 16, 14, 14, 239, DateTimeKind.Local), Text = "Rerum ipsam quia odit.", UserId = "187015d1-188d-44fc-8239-11ae2c506e2f" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 14, 5, 15, 47, 238, DateTimeKind.Local), Text = "Est assumenda et delectus et voluptatem a doloremque labore.", UserId = "ba229852-6f9f-4d85-b956-ff5bea3dcb84" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 14, 7, 42, 1, 784, DateTimeKind.Local), Text = "Aspernatur magni quia quis iste et.", UserId = "38d449c2-96b3-4ab7-ba30-814f9fe96587" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 13, 16, 34, 23, 108, DateTimeKind.Local), Text = "Earum tempora libero impedit.", UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 14, 4, 39, 58, 227, DateTimeKind.Local), Text = "Deleniti impedit ipsam ut est quibusdam beatae beatae non dignissimos.", UserId = "5a1558a3-0421-4247-a5ee-df47360c9d09" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 14, 6, 33, 56, 233, DateTimeKind.Local), Text = "Voluptatem quis ipsam.", UserId = "419c3e58-ffbf-456f-86f6-2d54a39b609c" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 13, 20, 42, 27, 266, DateTimeKind.Local), Text = "Odit soluta earum voluptas et.", UserId = "5a1558a3-0421-4247-a5ee-df47360c9d09" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 13, 22, 55, 43, 23, DateTimeKind.Local), Text = "Dolor ut labore quaerat maiores rerum ut.", UserId = "419c3e58-ffbf-456f-86f6-2d54a39b609c" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 14, 7, 9, 50, 928, DateTimeKind.Local), Text = "Aspernatur assumenda ullam illo consequuntur voluptas aut non ut nulla.", UserId = "419c3e58-ffbf-456f-86f6-2d54a39b609c" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("GuidId");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "45:0d:da:b2:c1:13", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 76, Platform = "Windows" },
                        new { Id = 82, Address = "4c:9b:54:1a:4e:71", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 72, Platform = "Linux" },
                        new { Id = 83, Address = "20:ce:31:25:85:b8", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Windows" },
                        new { Id = 84, Address = "48:e5:ba:f1:dc:4d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 74, Platform = "Linux" },
                        new { Id = 85, Address = "e1:71:f7:ae:9c:5c", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 74, Platform = "Windows" },
                        new { Id = 86, Address = "ba:db:6c:8b:2e:5d", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Windows" },
                        new { Id = 87, Address = "b0:2e:a1:01:48:df", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 77, Platform = "Windows" },
                        new { Id = 88, Address = "63:50:6a:db:58:96", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 72, Platform = "Linux" },
                        new { Id = 89, Address = "3b:43:38:dd:79:7a", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 79, Platform = "Linux" },
                        new { Id = 90, Address = "77:b8:6a:a9:4c:1e", GuidId = new Guid("00000000-0000-0000-0000-000000000000"), OrganizationId = 74, Platform = "Linux" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 25, CreatedAt = new DateTime(2018, 8, 13, 21, 28, 3, 229, DateTimeKind.Local), Text = "Laborum tempore harum est.", UserId = "2735687e-a5b5-4154-a952-de9d810a6c7f", WasRead = true },
                        new { Id = 32, ChatId = 23, CreatedAt = new DateTime(2018, 8, 13, 17, 55, 47, 386, DateTimeKind.Local), Text = "Enim esse dolor ducimus dolorum suscipit alias.", UserId = "db507c3c-7654-4083-9250-457e9c7411be", WasRead = false },
                        new { Id = 33, ChatId = 23, CreatedAt = new DateTime(2018, 8, 14, 10, 45, 46, 885, DateTimeKind.Local), Text = "Sint deserunt qui neque rerum id officia animi.", UserId = "5e76c8bb-3095-4a28-82a8-3da25315b73a", WasRead = true },
                        new { Id = 34, ChatId = 30, CreatedAt = new DateTime(2018, 8, 13, 20, 18, 10, 426, DateTimeKind.Local), Text = "Et ab ut minima quisquam nesciunt iusto.", UserId = "9841b8e2-2d03-4fe3-8780-e15fcbfd9ac2", WasRead = true },
                        new { Id = 35, ChatId = 29, CreatedAt = new DateTime(2018, 8, 13, 19, 53, 2, 379, DateTimeKind.Local), Text = "Vel repudiandae ipsam.", UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527", WasRead = false },
                        new { Id = 36, ChatId = 29, CreatedAt = new DateTime(2018, 8, 13, 21, 30, 47, 209, DateTimeKind.Local), Text = "Qui eligendi vitae.", UserId = "38d449c2-96b3-4ab7-ba30-814f9fe96587", WasRead = true },
                        new { Id = 37, ChatId = 23, CreatedAt = new DateTime(2018, 8, 14, 10, 51, 4, 309, DateTimeKind.Local), Text = "Ipsam enim numquam sed ipsum earum quia quis laudantium et.", UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527", WasRead = true },
                        new { Id = 38, ChatId = 27, CreatedAt = new DateTime(2018, 8, 13, 19, 6, 5, 891, DateTimeKind.Local), Text = "Tempore et consequuntur eum qui.", UserId = "5a1558a3-0421-4247-a5ee-df47360c9d09", WasRead = true },
                        new { Id = 39, ChatId = 24, CreatedAt = new DateTime(2018, 8, 13, 16, 11, 22, 378, DateTimeKind.Local), Text = "Non illo aut delectus ex libero necessitatibus veniam.", UserId = "db507c3c-7654-4083-9250-457e9c7411be", WasRead = false },
                        new { Id = 40, ChatId = 26, CreatedAt = new DateTime(2018, 8, 13, 16, 58, 46, 113, DateTimeKind.Local), Text = "Et officiis autem doloremque nihil.", UserId = "38d449c2-96b3-4ab7-ba30-814f9fe96587", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 14, 1, 1, 37, 212, DateTimeKind.Local), NotificationSettingId = 18, Text = "Consectetur autem sed quis.", UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 14, 0, 41, 16, 825, DateTimeKind.Local), NotificationSettingId = 13, Text = "Asperiores fugiat maxime debitis aperiam.", UserId = "db507c3c-7654-4083-9250-457e9c7411be" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 13, 19, 2, 39, 628, DateTimeKind.Local), NotificationSettingId = 20, Text = "Quis quod omnis unde aut.", UserId = "db507c3c-7654-4083-9250-457e9c7411be" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 13, 15, 57, 1, 274, DateTimeKind.Local), NotificationSettingId = 17, Text = "Magni deserunt nihil amet ad et at.", UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 13, 14, 39, 33, 989, DateTimeKind.Local), NotificationSettingId = 14, Text = "Deserunt porro eum dolorum sed provident.", UserId = "ba229852-6f9f-4d85-b956-ff5bea3dcb84" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 14, 5, 10, 32, 255, DateTimeKind.Local), NotificationSettingId = 12, Text = "Expedita facere facere alias.", UserId = "419c3e58-ffbf-456f-86f6-2d54a39b609c" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 13, 16, 47, 6, 777, DateTimeKind.Local), NotificationSettingId = 14, Text = "Iure nam voluptate molestiae recusandae ut quia molestiae.", UserId = "419c3e58-ffbf-456f-86f6-2d54a39b609c" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 13, 15, 57, 16, 693, DateTimeKind.Local), NotificationSettingId = 17, Text = "Consectetur eum explicabo.", UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 13, 23, 2, 40, 652, DateTimeKind.Local), NotificationSettingId = 15, Text = "Sequi molestiae enim illum exercitationem.", UserId = "5a1558a3-0421-4247-a5ee-df47360c9d09" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 14, 8, 9, 8, 183, DateTimeKind.Local), NotificationSettingId = 19, Text = "Tempore amet voluptatibus saepe qui numquam voluptatem consequatur accusantium.", UserId = "db507c3c-7654-4083-9250-457e9c7411be" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527" },
                        new { Id = 12, IsDisable = true, IsEmailable = true, IsMute = true, Type = 3, UserId = "5a1558a3-0421-4247-a5ee-df47360c9d09" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "38d449c2-96b3-4ab7-ba30-814f9fe96587" },
                        new { Id = 14, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "38d449c2-96b3-4ab7-ba30-814f9fe96587" },
                        new { Id = 15, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "ba229852-6f9f-4d85-b956-ff5bea3dcb84" },
                        new { Id = 16, IsDisable = false, IsEmailable = false, IsMute = false, Type = 3, UserId = "187015d1-188d-44fc-8239-11ae2c506e2f" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "2735687e-a5b5-4154-a952-de9d810a6c7f" },
                        new { Id = 18, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "db507c3c-7654-4083-9250-457e9c7411be" },
                        new { Id = 19, IsDisable = true, IsEmailable = true, IsMute = false, Type = 2, UserId = "5a1558a3-0421-4247-a5ee-df47360c9d09" },
                        new { Id = 20, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "38d449c2-96b3-4ab7-ba30-814f9fe96587" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "(618) 245-9185", CreatedByUserId = "5e76c8bb-3095-4a28-82a8-3da25315b73a", Description = "Ea soluta et iure veritatis sit laborum. Ab commodi alias voluptatem iure quia sit.", Email = "Maurice_Roob6@gmail.com", IsActive = true, Name = "Company700", ThemeId = 68, WebSite = "https://anika.net" },
                        new { Id = 72, ContactNumber = "501-796-2012 x074", CreatedByUserId = "ba229852-6f9f-4d85-b956-ff5bea3dcb84", Description = "Ut sunt aut.", Email = "Jaida44@yahoo.com", IsActive = true, Name = "Company951", ThemeId = 63, WebSite = "http://hardy.org" },
                        new { Id = 73, ContactNumber = "213-338-3781 x8593", CreatedByUserId = "187015d1-188d-44fc-8239-11ae2c506e2f", Description = "", Email = "Tiffany.Jones99@yahoo.com", IsActive = true, Name = "Company364", ThemeId = 64, WebSite = "http://cordelia.com" },
                        new { Id = 74, ContactNumber = "669.403.6217 x82473", CreatedByUserId = "38d449c2-96b3-4ab7-ba30-814f9fe96587", Description = "Recusandae voluptatibus odit.", Email = "Tressie51@yahoo.com", IsActive = true, Name = "Company39", ThemeId = 69, WebSite = "http://austin.net" },
                        new { Id = 75, ContactNumber = "(554) 394-5689", CreatedByUserId = "ad9d5836-dd59-4035-b4bd-2f5423752527", Description = "Beatae asperiores ut exercitationem. Voluptatum quis aut expedita odit est soluta ullam explicabo. Est consectetur quia iste qui.", Email = "Molly.Rath@hotmail.com", IsActive = true, Name = "Company616", ThemeId = 63, WebSite = "https://zion.biz" },
                        new { Id = 76, ContactNumber = "374.812.1613 x25818", CreatedByUserId = "2735687e-a5b5-4154-a952-de9d810a6c7f", Description = "", Email = "Raymundo.Cassin@hotmail.com", IsActive = true, Name = "Company29", ThemeId = 65, WebSite = "http://allie.org" },
                        new { Id = 77, ContactNumber = "1-387-203-6109 x4158", CreatedByUserId = "ba229852-6f9f-4d85-b956-ff5bea3dcb84", Description = "Debitis cum ipsam odio laudantium aut molestiae blanditiis ipsa est. Assumenda minus est et temporibus omnis quam amet ut porro. Veritatis quos dignissimos voluptas.", Email = "Jess_Stoltenberg51@hotmail.com", IsActive = true, Name = "Company614", ThemeId = 67, WebSite = "http://faustino.org" },
                        new { Id = 78, ContactNumber = "763-448-4376", CreatedByUserId = "ad9d5836-dd59-4035-b4bd-2f5423752527", Description = "Harum dolores voluptatem.", Email = "Allene_Feest33@hotmail.com", IsActive = true, Name = "Company15", ThemeId = 67, WebSite = "http://herminia.biz" },
                        new { Id = 79, ContactNumber = "273.919.6357 x05309", CreatedByUserId = "5a1558a3-0421-4247-a5ee-df47360c9d09", Description = "Rerum velit quod et rerum quisquam.", Email = "Juanita.Runolfsson@hotmail.com", IsActive = true, Name = "Company821", ThemeId = 65, WebSite = "https://saul.name" },
                        new { Id = 80, ContactNumber = "896.288.1974 x3480", CreatedByUserId = "ba229852-6f9f-4d85-b956-ff5bea3dcb84", Description = "Praesentium autem rem veritatis consectetur perspiciatis et dolorum labore. Laudantium inventore aspernatur unde voluptatem vero quisquam voluptatem. Totam a qui pariatur est possimus vel.", Email = "Sven_King@hotmail.com", IsActive = true, Name = "Company550", ThemeId = 61, WebSite = "http://jana.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 14, 6, 1, 12, 476, DateTimeKind.Local), FeedbackId = 46, Text = "Iusto dolores laudantium occaecati nemo sed earum qui nihil iure.", UserId = "5a1558a3-0421-4247-a5ee-df47360c9d09" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 13, 16, 2, 10, 937, DateTimeKind.Local), FeedbackId = 42, Text = "Amet voluptas culpa architecto rem.", UserId = "9841b8e2-2d03-4fe3-8780-e15fcbfd9ac2" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 14, 7, 6, 42, 918, DateTimeKind.Local), FeedbackId = 49, Text = "Ab illo omnis aut expedita recusandae cum velit suscipit.", UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 14, 11, 46, 7, 86, DateTimeKind.Local), FeedbackId = 46, Text = "Occaecati sed distinctio.", UserId = "419c3e58-ffbf-456f-86f6-2d54a39b609c" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 13, 21, 42, 28, 177, DateTimeKind.Local), FeedbackId = 48, Text = "Vel ipsa possimus officia omnis et.", UserId = "9841b8e2-2d03-4fe3-8780-e15fcbfd9ac2" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 14, 5, 20, 24, 237, DateTimeKind.Local), FeedbackId = 41, Text = "Minus similique corporis voluptas esse laudantium possimus iusto.", UserId = "419c3e58-ffbf-456f-86f6-2d54a39b609c" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 13, 16, 19, 42, 309, DateTimeKind.Local), FeedbackId = 45, Text = "Et dicta voluptates corrupti veritatis consequatur praesentium velit qui dolore.", UserId = "db507c3c-7654-4083-9250-457e9c7411be" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 13, 18, 35, 50, 170, DateTimeKind.Local), FeedbackId = 43, Text = "Ullam delectus unde.", UserId = "9841b8e2-2d03-4fe3-8780-e15fcbfd9ac2" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 13, 22, 11, 50, 946, DateTimeKind.Local), FeedbackId = 50, Text = "Mollitia deleniti veritatis et quibusdam odit et et.", UserId = "9841b8e2-2d03-4fe3-8780-e15fcbfd9ac2" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 13, 15, 30, 28, 891, DateTimeKind.Local), FeedbackId = 50, Text = "Ea quia libero cum veritatis.", UserId = "db507c3c-7654-4083-9250-457e9c7411be" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme364" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme563" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme790" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme742" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme850" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme805" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme828" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme627" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Univers", Name = "Theme536" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme994" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "5e76c8bb-3095-4a28-82a8-3da25315b73a", CreatedAt = new DateTime(2018, 8, 13, 21, 31, 25, 847, DateTimeKind.Local), DisplayName = "Bernard", Email = "Renee98@gmail.com", FirstName = "Chance", IsActive = true, LastName = "Rohan", RoleId = 2 },
                        new { Id = "187015d1-188d-44fc-8239-11ae2c506e2f", CreatedAt = new DateTime(2018, 8, 14, 10, 36, 43, 645, DateTimeKind.Local), DisplayName = "Elijah", Email = "Kody.Schuppe92@hotmail.com", FirstName = "Wendy", IsActive = true, LastName = "Orn", RoleId = 2 },
                        new { Id = "5a1558a3-0421-4247-a5ee-df47360c9d09", CreatedAt = new DateTime(2018, 8, 13, 13, 28, 52, 450, DateTimeKind.Local), DisplayName = "Princess", Email = "Noemy_Rempel@hotmail.com", FirstName = "Deja", IsActive = true, LastName = "Schiller", RoleId = 1 },
                        new { Id = "9841b8e2-2d03-4fe3-8780-e15fcbfd9ac2", CreatedAt = new DateTime(2018, 8, 14, 2, 14, 45, 976, DateTimeKind.Local), DisplayName = "Leonor", Email = "Taryn.Stoltenberg@yahoo.com", FirstName = "Jarrell", IsActive = true, LastName = "Williamson", RoleId = 2 },
                        new { Id = "ba229852-6f9f-4d85-b956-ff5bea3dcb84", CreatedAt = new DateTime(2018, 8, 14, 2, 3, 10, 227, DateTimeKind.Local), DisplayName = "Katheryn", Email = "Susanna28@yahoo.com", FirstName = "Adela", IsActive = true, LastName = "McGlynn", RoleId = 1 },
                        new { Id = "419c3e58-ffbf-456f-86f6-2d54a39b609c", CreatedAt = new DateTime(2018, 8, 14, 10, 40, 54, 628, DateTimeKind.Local), DisplayName = "Giuseppe", Email = "Toby31@gmail.com", FirstName = "Dina", IsActive = true, LastName = "Stracke", RoleId = 1 },
                        new { Id = "ad9d5836-dd59-4035-b4bd-2f5423752527", CreatedAt = new DateTime(2018, 8, 13, 13, 10, 36, 356, DateTimeKind.Local), DisplayName = "Mallie", Email = "Jesus.Quitzon66@yahoo.com", FirstName = "Lyric", IsActive = true, LastName = "Grant", RoleId = 1 },
                        new { Id = "db507c3c-7654-4083-9250-457e9c7411be", CreatedAt = new DateTime(2018, 8, 13, 23, 53, 23, 864, DateTimeKind.Local), DisplayName = "Cloyd", Email = "Madonna2@hotmail.com", FirstName = "Brooks", IsActive = true, LastName = "Lang", RoleId = 2 },
                        new { Id = "38d449c2-96b3-4ab7-ba30-814f9fe96587", CreatedAt = new DateTime(2018, 8, 13, 13, 14, 13, 19, DateTimeKind.Local), DisplayName = "Rupert", Email = "Leonel54@hotmail.com", FirstName = "Darryl", IsActive = true, LastName = "Goodwin", RoleId = 2 },
                        new { Id = "2735687e-a5b5-4154-a952-de9d810a6c7f", CreatedAt = new DateTime(2018, 8, 14, 7, 28, 56, 904, DateTimeKind.Local), DisplayName = "Verla", Email = "Miracle6@gmail.com", FirstName = "Ambrose", IsActive = true, LastName = "Ebert", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "5e76c8bb-3095-4a28-82a8-3da25315b73a", OrganizationId = 75 },
                        new { UserId = "187015d1-188d-44fc-8239-11ae2c506e2f", OrganizationId = 72 },
                        new { UserId = "5a1558a3-0421-4247-a5ee-df47360c9d09", OrganizationId = 77 },
                        new { UserId = "9841b8e2-2d03-4fe3-8780-e15fcbfd9ac2", OrganizationId = 74 },
                        new { UserId = "ba229852-6f9f-4d85-b956-ff5bea3dcb84", OrganizationId = 71 },
                        new { UserId = "419c3e58-ffbf-456f-86f6-2d54a39b609c", OrganizationId = 74 },
                        new { UserId = "ad9d5836-dd59-4035-b4bd-2f5423752527", OrganizationId = 71 },
                        new { UserId = "db507c3c-7654-4083-9250-457e9c7411be", OrganizationId = 78 },
                        new { UserId = "38d449c2-96b3-4ab7-ba30-814f9fe96587", OrganizationId = 76 },
                        new { UserId = "2735687e-a5b5-4154-a952-de9d810a6c7f", OrganizationId = 79 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
