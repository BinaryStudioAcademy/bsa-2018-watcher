// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180812094657_ChangedOrganizationThemeToNonRequired")]
    partial class ChangedOrganizationThemeToNonRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 92, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 40, Type = 0 },
                        new { Id = 102, DashboardId = 97, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source2", Threshold = 62, Type = 0 },
                        new { Id = 103, DashboardId = 96, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source1", Threshold = 71, Type = 1 },
                        new { Id = 104, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source3", Threshold = 78, Type = 0 },
                        new { Id = 105, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 4, Type = 2 },
                        new { Id = 106, DashboardId = 99, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 54, Type = 2 },
                        new { Id = 107, DashboardId = 97, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source1", Threshold = 47, Type = 0 },
                        new { Id = 108, DashboardId = 91, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 24, Type = 1 },
                        new { Id = 109, DashboardId = 92, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source3", Threshold = 31, Type = 0 },
                        new { Id = 110, DashboardId = 96, MostLoaded = "MostLoaded3", ShowCommon = "Common3", Source = "Source2", Threshold = 92, Type = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "34a73032-25cd-4e18-8078-ec7e1280ddfe", Name = "explicabo", Type = 0 },
                        new { Id = 22, CreatedById = "e55cc846-c35c-4068-a96e-7e4d3a350a11", Name = "ut", Type = 0 },
                        new { Id = 23, CreatedById = "af0420ec-2cd3-45f7-92fe-a5ecbf960fd1", Name = "commodi", Type = 0 },
                        new { Id = 24, CreatedById = "e55cc846-c35c-4068-a96e-7e4d3a350a11", Name = "sint", Type = 0 },
                        new { Id = 25, CreatedById = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0", Name = "qui", Type = 0 },
                        new { Id = 26, CreatedById = "8af174fd-45ab-44b1-b756-61b08b4e54fb", Name = "nam", Type = 0 },
                        new { Id = 27, CreatedById = "68ed0dc9-00df-4e70-8fab-7a6b1d996b50", Name = "qui", Type = 0 },
                        new { Id = 28, CreatedById = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d", Name = "optio", Type = 0 },
                        new { Id = 29, CreatedById = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", Name = "vero", Type = 0 },
                        new { Id = 30, CreatedById = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", Name = "veniam", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 12, 9, 9, 55, 136, DateTimeKind.Local), InstanceId = 86, Title = "Title618" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 12, 5, 13, 24, 452, DateTimeKind.Local), InstanceId = 81, Title = "Title677" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 12, 5, 5, 7, 641, DateTimeKind.Local), InstanceId = 83, Title = "Title680" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 12, 0, 10, 2, 112, DateTimeKind.Local), InstanceId = 88, Title = "Title379" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 11, 19, 11, 53, 470, DateTimeKind.Local), InstanceId = 83, Title = "Title164" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 12, 6, 52, 28, 184, DateTimeKind.Local), InstanceId = 87, Title = "Title893" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 12, 4, 40, 0, 279, DateTimeKind.Local), InstanceId = 86, Title = "Title569" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 11, 14, 24, 41, 513, DateTimeKind.Local), InstanceId = 88, Title = "Title713" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 12, 11, 45, 28, 157, DateTimeKind.Local), InstanceId = 81, Title = "Title834" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 12, 3, 3, 59, 386, DateTimeKind.Local), InstanceId = 82, Title = "Title856" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 12, 7, 58, 10, 468, DateTimeKind.Local), Text = "Sapiente vel odio placeat consequuntur.", UserId = "34a73032-25cd-4e18-8078-ec7e1280ddfe" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 11, 15, 39, 20, 506, DateTimeKind.Local), Text = "Temporibus repudiandae similique commodi autem et accusantium omnis perferendis at.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 11, 18, 53, 50, 916, DateTimeKind.Local), Text = "Nulla est dolores.", UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 11, 19, 13, 56, 153, DateTimeKind.Local), Text = "Aut aut enim neque at.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 12, 1, 11, 46, 195, DateTimeKind.Local), Text = "Aut vel illo reprehenderit soluta nam.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 12, 4, 50, 52, 751, DateTimeKind.Local), Text = "Autem ipsa placeat.", UserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 12, 10, 36, 54, 704, DateTimeKind.Local), Text = "Deserunt quia provident doloribus tempora sed.", UserId = "a4c77589-fde9-498b-a93d-dfdfed4b5168" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 11, 15, 53, 25, 613, DateTimeKind.Local), Text = "Perspiciatis eveniet quibusdam.", UserId = "a5001d94-a4ad-40d8-a333-9dc16a882630" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 11, 21, 0, 48, 226, DateTimeKind.Local), Text = "Porro harum et dolore modi vel sapiente laudantium sed.", UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 11, 21, 6, 1, 780, DateTimeKind.Local), Text = "Tempore cumque cumque fugiat aut dicta.", UserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "e6:f1:d2:92:f4:39", OrganizationId = 80, Platform = "Linux" },
                        new { Id = 82, Address = "69:aa:13:38:70:91", OrganizationId = 74, Platform = "Windows" },
                        new { Id = 83, Address = "0b:40:1d:fb:4e:1b", OrganizationId = 71, Platform = "Linux" },
                        new { Id = 84, Address = "e8:32:37:65:ff:0d", OrganizationId = 79, Platform = "Windows" },
                        new { Id = 85, Address = "d7:36:1c:12:03:7d", OrganizationId = 73, Platform = "Windows" },
                        new { Id = 86, Address = "b7:d9:17:14:e4:4a", OrganizationId = 75, Platform = "Linux" },
                        new { Id = 87, Address = "e5:51:e3:82:13:28", OrganizationId = 74, Platform = "Windows" },
                        new { Id = 88, Address = "d9:a2:a9:c2:01:8d", OrganizationId = 71, Platform = "Linux" },
                        new { Id = 89, Address = "d7:ff:61:39:75:53", OrganizationId = 79, Platform = "Windows" },
                        new { Id = 90, Address = "f8:5c:43:74:04:03", OrganizationId = 73, Platform = "Linux" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 22, CreatedAt = new DateTime(2018, 8, 12, 1, 30, 58, 839, DateTimeKind.Local), Text = "In delectus eos quas consequuntur rerum.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", WasRead = false },
                        new { Id = 32, ChatId = 23, CreatedAt = new DateTime(2018, 8, 11, 14, 40, 38, 676, DateTimeKind.Local), Text = "Voluptatem atque rerum aut ullam voluptates.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", WasRead = true },
                        new { Id = 33, ChatId = 27, CreatedAt = new DateTime(2018, 8, 11, 18, 26, 48, 569, DateTimeKind.Local), Text = "Dolorum est dicta eum ab est ad ea corporis.", UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11", WasRead = true },
                        new { Id = 34, ChatId = 22, CreatedAt = new DateTime(2018, 8, 11, 14, 16, 36, 4, DateTimeKind.Local), Text = "Consequuntur consequatur ut molestiae possimus ab delectus temporibus.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", WasRead = true },
                        new { Id = 35, ChatId = 25, CreatedAt = new DateTime(2018, 8, 12, 3, 58, 44, 421, DateTimeKind.Local), Text = "Odio hic ut commodi quia fugit nihil.", UserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d", WasRead = true },
                        new { Id = 36, ChatId = 30, CreatedAt = new DateTime(2018, 8, 11, 18, 25, 39, 229, DateTimeKind.Local), Text = "Quasi adipisci illum vitae repellat iure temporibus molestiae qui quia.", UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11", WasRead = false },
                        new { Id = 37, ChatId = 29, CreatedAt = new DateTime(2018, 8, 12, 10, 16, 39, 17, DateTimeKind.Local), Text = "Ut eum corrupti voluptatem veniam.", UserId = "a5001d94-a4ad-40d8-a333-9dc16a882630", WasRead = false },
                        new { Id = 38, ChatId = 28, CreatedAt = new DateTime(2018, 8, 12, 9, 8, 1, 935, DateTimeKind.Local), Text = "Sit facilis culpa illum consequatur omnis officia dolores aperiam est.", UserId = "68ed0dc9-00df-4e70-8fab-7a6b1d996b50", WasRead = false },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 8, 11, 17, 6, 10, 925, DateTimeKind.Local), Text = "Enim sint consectetur ut quae culpa consequatur.", UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11", WasRead = false },
                        new { Id = 40, ChatId = 25, CreatedAt = new DateTime(2018, 8, 12, 12, 8, 7, 721, DateTimeKind.Local), Text = "Ut blanditiis amet delectus ea voluptate quia voluptatibus maxime non.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 12, 0, 39, 22, 177, DateTimeKind.Local), NotificationSettingId = 17, Text = "Molestiae recusandae hic est maiores quia placeat quasi.", UserId = "a5001d94-a4ad-40d8-a333-9dc16a882630" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 11, 20, 24, 20, 521, DateTimeKind.Local), NotificationSettingId = 20, Text = "Totam quia quia.", UserId = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 12, 8, 42, 13, 203, DateTimeKind.Local), NotificationSettingId = 12, Text = "Inventore sit aut blanditiis earum sunt asperiores dolorem.", UserId = "a4c77589-fde9-498b-a93d-dfdfed4b5168" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 12, 9, 19, 16, 907, DateTimeKind.Local), NotificationSettingId = 19, Text = "Laboriosam aut placeat sunt nobis.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 12, 0, 23, 5, 77, DateTimeKind.Local), NotificationSettingId = 19, Text = "Quod maiores molestiae fugiat sint dolore et doloribus nesciunt quasi.", UserId = "a4c77589-fde9-498b-a93d-dfdfed4b5168" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 11, 22, 56, 0, 770, DateTimeKind.Local), NotificationSettingId = 14, Text = "Eum ipsam deleniti consequatur voluptatem asperiores nesciunt.", UserId = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 12, 0, 12, 40, 53, DateTimeKind.Local), NotificationSettingId = 19, Text = "Nostrum amet porro harum.", UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 11, 21, 54, 36, 685, DateTimeKind.Local), NotificationSettingId = 14, Text = "Qui voluptatem ut soluta.", UserId = "8af174fd-45ab-44b1-b756-61b08b4e54fb" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 12, 1, 10, 42, 791, DateTimeKind.Local), NotificationSettingId = 14, Text = "Quia aut necessitatibus tempore ea.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 12, 8, 51, 13, 847, DateTimeKind.Local), NotificationSettingId = 12, Text = "Quia eos tempora qui voluptas.", UserId = "af0420ec-2cd3-45f7-92fe-a5ecbf960fd1" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11" },
                        new { Id = 12, IsDisable = false, IsEmailable = true, IsMute = true, Type = 2, UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 0, UserId = "8af174fd-45ab-44b1-b756-61b08b4e54fb" },
                        new { Id = 14, IsDisable = true, IsEmailable = false, IsMute = false, Type = 3, UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11" },
                        new { Id = 15, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "a5001d94-a4ad-40d8-a333-9dc16a882630" },
                        new { Id = 16, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "34a73032-25cd-4e18-8078-ec7e1280ddfe" },
                        new { Id = 17, IsDisable = false, IsEmailable = true, IsMute = false, Type = 3, UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" },
                        new { Id = 18, IsDisable = false, IsEmailable = true, IsMute = false, Type = 2, UserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d" },
                        new { Id = 19, IsDisable = true, IsEmailable = true, IsMute = false, Type = 0, UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" },
                        new { Id = 20, IsDisable = true, IsEmailable = false, IsMute = false, Type = 0, UserId = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "257-895-7084 x45551", CreatedByUserId = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0", Description = "Ea magnam sint eum dolorem aut est quidem voluptas reprehenderit. Reprehenderit consequatur quas et enim impedit veritatis dolores impedit. Est quis ratione aut exercitationem rerum praesentium.", Email = "Lane_Schaden66@hotmail.com", IsActive = true, Name = "Company437", ThemeId = 61, WebSite = "https://elwyn.org" },
                        new { Id = 72, ContactNumber = "(218) 668-9637 x56037", CreatedByUserId = "8af174fd-45ab-44b1-b756-61b08b4e54fb", Description = "Hic officiis neque incidunt atque dolore velit qui ut. Ipsum quod velit est quia. Consequatur provident vitae aliquam corporis sed voluptate sapiente aut. Quis expedita veritatis alias reprehenderit et sit ullam eaque.", Email = "Mitchell7@gmail.com", IsActive = true, Name = "Company190", ThemeId = 66, WebSite = "https://tressa.net" },
                        new { Id = 73, ContactNumber = "(527) 866-4742", CreatedByUserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d", Description = "A perspiciatis beatae nisi necessitatibus iste natus eveniet. Inventore aliquam qui recusandae quisquam sit animi officiis.", Email = "Thea60@yahoo.com", IsActive = true, Name = "Company668", ThemeId = 62, WebSite = "https://tania.com" },
                        new { Id = 74, ContactNumber = "494.336.9723 x233", CreatedByUserId = "a4c77589-fde9-498b-a93d-dfdfed4b5168", Description = "Et repudiandae exercitationem. Officiis libero illo non necessitatibus maxime ullam rerum culpa. Similique alias quasi iure praesentium.", Email = "Dejuan_Dicki98@gmail.com", IsActive = true, Name = "Company894", ThemeId = 69, WebSite = "https://richard.biz" },
                        new { Id = 75, ContactNumber = "(670) 729-4927 x06074", CreatedByUserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", Description = "Aliquid dolores alias saepe nihil velit saepe mollitia. Eveniet maiores deserunt neque maiores.", Email = "Waylon88@hotmail.com", IsActive = true, Name = "Company970", ThemeId = 70, WebSite = "https://kamryn.net" },
                        new { Id = 76, ContactNumber = "(724) 861-1489 x84849", CreatedByUserId = "a5001d94-a4ad-40d8-a333-9dc16a882630", Description = "", Email = "Keven.Kunde96@hotmail.com", IsActive = true, Name = "Company404", ThemeId = 64, WebSite = "https://london.biz" },
                        new { Id = 77, ContactNumber = "200-499-4659", CreatedByUserId = "34a73032-25cd-4e18-8078-ec7e1280ddfe", Description = "Earum aspernatur ea ducimus iusto id sit illum ab. Amet excepturi qui dolorem sint adipisci consequatur. Et alias qui vel temporibus harum autem blanditiis fugiat sed. In non ea sequi recusandae repellendus.", Email = "Myra.Padberg@hotmail.com", IsActive = true, Name = "Company119", ThemeId = 63, WebSite = "https://cleora.name" },
                        new { Id = 78, ContactNumber = "451-892-5376", CreatedByUserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", Description = "Atque commodi est id repellendus ex sint eum minima et. Sint nobis eum temporibus ea quis blanditiis incidunt necessitatibus. Excepturi sit perspiciatis. Ut consectetur quisquam modi voluptas quas.", Email = "Chanel_Schiller17@gmail.com", IsActive = true, Name = "Company976", ThemeId = 61, WebSite = "https://kennith.net" },
                        new { Id = 79, ContactNumber = "1-241-641-0340", CreatedByUserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d", Description = "Dolor odit velit sint dolorem autem nesciunt tenetur quam excepturi. Rem eos ea beatae iure inventore accusantium voluptas iste. Fugiat cupiditate autem illum inventore corporis veritatis corporis amet. Asperiores enim porro magnam eius cumque aut eaque aliquam quis.", Email = "Erich.Tromp@yahoo.com", IsActive = true, Name = "Company213", ThemeId = 70, WebSite = "http://isadore.net" },
                        new { Id = 80, ContactNumber = "1-354-461-4062", CreatedByUserId = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0", Description = "Nesciunt nihil odit vero est dolor maiores qui ut. Et perferendis perferendis quo veritatis labore voluptatibus libero non et. Ut excepturi voluptates quidem nostrum sit recusandae omnis.", Email = "Zane63@hotmail.com", IsActive = true, Name = "Company511", ThemeId = 62, WebSite = "http://graciela.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 11, 22, 5, 17, 774, DateTimeKind.Local), FeedbackId = 43, Text = "Voluptatem quod vitae quis quo et quae nulla repellendus accusamus.", UserId = "a4c77589-fde9-498b-a93d-dfdfed4b5168" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 12, 0, 49, 33, 572, DateTimeKind.Local), FeedbackId = 47, Text = "Velit nobis vitae.", UserId = "8af174fd-45ab-44b1-b756-61b08b4e54fb" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 11, 14, 40, 8, 374, DateTimeKind.Local), FeedbackId = 43, Text = "Sit suscipit tempore libero esse et corporis quo.", UserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 12, 2, 45, 39, 871, DateTimeKind.Local), FeedbackId = 50, Text = "Voluptas qui saepe voluptatibus sapiente molestias hic repudiandae dolorum.", UserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 12, 10, 46, 50, 964, DateTimeKind.Local), FeedbackId = 50, Text = "Vel fuga nostrum voluptatem necessitatibus officia qui.", UserId = "68ed0dc9-00df-4e70-8fab-7a6b1d996b50" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 11, 16, 5, 29, 108, DateTimeKind.Local), FeedbackId = 44, Text = "Velit dolorum ullam amet maxime dolores.", UserId = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 12, 9, 51, 41, 37, DateTimeKind.Local), FeedbackId = 42, Text = "Provident soluta occaecati cumque.", UserId = "a4c77589-fde9-498b-a93d-dfdfed4b5168" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 11, 23, 17, 38, 135, DateTimeKind.Local), FeedbackId = 42, Text = "Sunt repudiandae unde est eos eaque dolorum perferendis.", UserId = "8af174fd-45ab-44b1-b756-61b08b4e54fb" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 12, 8, 43, 8, 166, DateTimeKind.Local), FeedbackId = 46, Text = "Soluta atque voluptate corrupti similique nisi non omnis.", UserId = "a5001d94-a4ad-40d8-a333-9dc16a882630" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 12, 1, 37, 19, 431, DateTimeKind.Local), FeedbackId = 42, Text = "Unde quis nulla rerum assumenda ducimus assumenda mollitia.", UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme75" },
                        new { Id = 62, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme260" },
                        new { Id = 63, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme832" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Helvetica", Name = "Theme47" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme779" },
                        new { Id = 66, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme603" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme765" },
                        new { Id = 68, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme115" },
                        new { Id = 69, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme313" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Helvetica", Name = "Theme882" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "8af174fd-45ab-44b1-b756-61b08b4e54fb", CreatedAt = new DateTime(2018, 8, 11, 19, 37, 22, 517, DateTimeKind.Local), DisplayName = "Leif", Email = "Marlin10@gmail.com", FirstName = "Jedidiah", IsActive = true, LastName = "Cronin", RoleId = 2 },
                        new { Id = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0", CreatedAt = new DateTime(2018, 8, 12, 6, 23, 16, 223, DateTimeKind.Local), DisplayName = "Fabian", Email = "Roel_Quitzon@hotmail.com", FirstName = "Barbara", IsActive = true, LastName = "Hilll", RoleId = 1 },
                        new { Id = "68ed0dc9-00df-4e70-8fab-7a6b1d996b50", CreatedAt = new DateTime(2018, 8, 12, 10, 53, 37, 128, DateTimeKind.Local), DisplayName = "Rachel", Email = "Hester56@yahoo.com", FirstName = "Kamron", IsActive = true, LastName = "Kuphal", RoleId = 1 },
                        new { Id = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", CreatedAt = new DateTime(2018, 8, 12, 3, 40, 7, 898, DateTimeKind.Local), DisplayName = "Leonard", Email = "Kattie_Lockman3@yahoo.com", FirstName = "Marcelina", IsActive = true, LastName = "Wisoky", RoleId = 2 },
                        new { Id = "a5001d94-a4ad-40d8-a333-9dc16a882630", CreatedAt = new DateTime(2018, 8, 12, 9, 42, 42, 479, DateTimeKind.Local), DisplayName = "Marilie", Email = "Clint_MacGyver@hotmail.com", FirstName = "Nona", IsActive = true, LastName = "Tromp", RoleId = 2 },
                        new { Id = "e55cc846-c35c-4068-a96e-7e4d3a350a11", CreatedAt = new DateTime(2018, 8, 11, 19, 38, 45, 259, DateTimeKind.Local), DisplayName = "Lennie", Email = "Yadira71@yahoo.com", FirstName = "Precious", IsActive = true, LastName = "Johnston", RoleId = 2 },
                        new { Id = "34a73032-25cd-4e18-8078-ec7e1280ddfe", CreatedAt = new DateTime(2018, 8, 11, 13, 32, 7, 795, DateTimeKind.Local), DisplayName = "Laurie", Email = "Brennon.Rosenbaum29@gmail.com", FirstName = "June", IsActive = true, LastName = "Bailey", RoleId = 1 },
                        new { Id = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d", CreatedAt = new DateTime(2018, 8, 11, 22, 11, 40, 183, DateTimeKind.Local), DisplayName = "Graciela", Email = "Layne.Cassin40@hotmail.com", FirstName = "Pink", IsActive = true, LastName = "Torphy", RoleId = 2 },
                        new { Id = "af0420ec-2cd3-45f7-92fe-a5ecbf960fd1", CreatedAt = new DateTime(2018, 8, 11, 20, 28, 11, 579, DateTimeKind.Local), DisplayName = "Sandrine", Email = "Abby.Conroy@yahoo.com", FirstName = "Valentine", IsActive = true, LastName = "Kertzmann", RoleId = 2 },
                        new { Id = "a4c77589-fde9-498b-a93d-dfdfed4b5168", CreatedAt = new DateTime(2018, 8, 12, 8, 13, 53, 547, DateTimeKind.Local), DisplayName = "Forest", Email = "Ellen.Kub84@hotmail.com", FirstName = "Emilia", IsActive = true, LastName = "Kunde", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "8af174fd-45ab-44b1-b756-61b08b4e54fb", OrganizationId = 76 },
                        new { UserId = "d6d7f157-c67a-46b7-a918-79f5a4e9a5b0", OrganizationId = 76 },
                        new { UserId = "68ed0dc9-00df-4e70-8fab-7a6b1d996b50", OrganizationId = 71 },
                        new { UserId = "5c8ec0eb-c030-497f-9977-ff1d7c9021e4", OrganizationId = 79 },
                        new { UserId = "a5001d94-a4ad-40d8-a333-9dc16a882630", OrganizationId = 74 },
                        new { UserId = "e55cc846-c35c-4068-a96e-7e4d3a350a11", OrganizationId = 76 },
                        new { UserId = "34a73032-25cd-4e18-8078-ec7e1280ddfe", OrganizationId = 75 },
                        new { UserId = "3d092db0-7b72-4313-af6b-f4fdf12c5f7d", OrganizationId = 77 },
                        new { UserId = "af0420ec-2cd3-45f7-92fe-a5ecbf960fd1", OrganizationId = 77 },
                        new { UserId = "a4c77589-fde9-498b-a93d-dfdfed4b5168", OrganizationId = 72 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
