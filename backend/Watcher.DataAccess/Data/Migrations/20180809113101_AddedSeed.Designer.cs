// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180809113101_AddedSeed")]
    partial class AddedSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source1", Threshold = 14, Type = 1 },
                        new { Id = 102, DashboardId = 96, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 48, Type = 0 },
                        new { Id = 103, DashboardId = 97, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source1", Threshold = 91, Type = 1 },
                        new { Id = 104, DashboardId = 92, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 35, Type = 2 },
                        new { Id = 105, DashboardId = 93, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source2", Threshold = 21, Type = 2 },
                        new { Id = 106, DashboardId = 92, MostLoaded = "MostLoaded1", ShowCommon = "Common2", Source = "Source1", Threshold = 85, Type = 0 },
                        new { Id = 107, DashboardId = 93, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source2", Threshold = 31, Type = 0 },
                        new { Id = 108, DashboardId = 95, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 40, Type = 0 },
                        new { Id = 109, DashboardId = 91, MostLoaded = "MostLoaded1", ShowCommon = "Common1", Source = "Source2", Threshold = 81, Type = 1 },
                        new { Id = 110, DashboardId = 94, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 0, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "febeb402-29c2-411f-a6a6-4377e9b55835", Name = "eius", Type = 0 },
                        new { Id = 22, CreatedById = "ca404c18-30b5-4013-870a-3b985772b799", Name = "pariatur", Type = 0 },
                        new { Id = 23, CreatedById = "b05710a2-28da-4da2-9acb-cd549be125ee", Name = "laudantium", Type = 0 },
                        new { Id = 24, CreatedById = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567", Name = "et", Type = 0 },
                        new { Id = 25, CreatedById = "febeb402-29c2-411f-a6a6-4377e9b55835", Name = "eos", Type = 0 },
                        new { Id = 26, CreatedById = "febeb402-29c2-411f-a6a6-4377e9b55835", Name = "accusantium", Type = 0 },
                        new { Id = 27, CreatedById = "8494cede-b032-4d27-9e14-76b53134d093", Name = "facilis", Type = 0 },
                        new { Id = 28, CreatedById = "b05710a2-28da-4da2-9acb-cd549be125ee", Name = "id", Type = 0 },
                        new { Id = 29, CreatedById = "febeb402-29c2-411f-a6a6-4377e9b55835", Name = "ea", Type = 0 },
                        new { Id = 30, CreatedById = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3", Name = "accusamus", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 9, 9, 3, 46, 965, DateTimeKind.Local), InstanceId = 82, Title = "Title645" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 8, 17, 25, 39, 16, DateTimeKind.Local), InstanceId = 86, Title = "Title164" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 9, 6, 14, 0, 38, DateTimeKind.Local), InstanceId = 81, Title = "Title781" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 8, 16, 4, 58, 947, DateTimeKind.Local), InstanceId = 86, Title = "Title847" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 9, 0, 11, 49, 148, DateTimeKind.Local), InstanceId = 86, Title = "Title753" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 9, 12, 57, 45, 810, DateTimeKind.Local), InstanceId = 87, Title = "Title74" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 9, 1, 28, 17, 350, DateTimeKind.Local), InstanceId = 86, Title = "Title239" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 8, 15, 11, 22, 770, DateTimeKind.Local), InstanceId = 82, Title = "Title692" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 9, 11, 21, 15, 709, DateTimeKind.Local), InstanceId = 87, Title = "Title707" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 8, 16, 12, 16, 619, DateTimeKind.Local), InstanceId = 88, Title = "Title428" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 9, 1, 34, 49, 307, DateTimeKind.Local), Text = "Nisi asperiores quia quaerat laudantium enim velit voluptatem.", UserId = "febeb402-29c2-411f-a6a6-4377e9b55835" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 9, 9, 45, 47, 738, DateTimeKind.Local), Text = "Sunt aspernatur non laudantium autem libero ducimus quia odio labore.", UserId = "febeb402-29c2-411f-a6a6-4377e9b55835" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 9, 13, 21, 50, 790, DateTimeKind.Local), Text = "Maxime numquam sapiente harum.", UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 9, 1, 32, 4, 167, DateTimeKind.Local), Text = "Illo voluptatem officia voluptas voluptas tempora eveniet ipsum est libero.", UserId = "febeb402-29c2-411f-a6a6-4377e9b55835" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 8, 16, 17, 1, 768, DateTimeKind.Local), Text = "Ex voluptas qui et.", UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 9, 11, 1, 33, 230, DateTimeKind.Local), Text = "Alias sapiente vel corrupti.", UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 8, 17, 15, 23, 199, DateTimeKind.Local), Text = "Sint dolore nemo dolor aut et odio eveniet enim excepturi.", UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 8, 18, 18, 2, 393, DateTimeKind.Local), Text = "Est ad mollitia est optio qui ipsum.", UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 9, 10, 10, 28, 874, DateTimeKind.Local), Text = "Ipsa nihil dignissimos cum necessitatibus sunt rerum aut.", UserId = "8668b4f7-ba1a-464d-8b3a-3258ee90be2c" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 8, 20, 13, 51, 373, DateTimeKind.Local), Text = "Vel et esse necessitatibus similique.", UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "83:29:6f:1d:77:60", OrganizationId = 79, Platform = "Linux" },
                        new { Id = 82, Address = "c7:2f:cb:61:aa:22", OrganizationId = 77, Platform = "Linux" },
                        new { Id = 83, Address = "34:d8:35:3f:16:9c", OrganizationId = 76, Platform = "Linux" },
                        new { Id = 84, Address = "56:35:b8:5d:91:7a", OrganizationId = 71, Platform = "Linux" },
                        new { Id = 85, Address = "6d:23:3f:ac:95:d2", OrganizationId = 72, Platform = "Windows" },
                        new { Id = 86, Address = "37:4e:e5:b4:98:b1", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 87, Address = "43:66:ed:2c:b5:a5", OrganizationId = 78, Platform = "Windows" },
                        new { Id = 88, Address = "95:bc:c6:42:a7:76", OrganizationId = 71, Platform = "Linux" },
                        new { Id = 89, Address = "22:85:f4:86:e3:06", OrganizationId = 72, Platform = "Windows" },
                        new { Id = 90, Address = "a6:04:08:c8:b7:df", OrganizationId = 72, Platform = "Windows" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 21, CreatedAt = new DateTime(2018, 8, 9, 8, 33, 24, 212, DateTimeKind.Local), Text = "Facilis ea atque inventore iusto tenetur non labore.", UserId = "be1d775a-e864-4389-a1de-b182cfb36d11", WasRead = true },
                        new { Id = 32, ChatId = 25, CreatedAt = new DateTime(2018, 8, 8, 18, 44, 9, 17, DateTimeKind.Local), Text = "Qui beatae est.", UserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567", WasRead = true },
                        new { Id = 33, ChatId = 26, CreatedAt = new DateTime(2018, 8, 8, 15, 7, 38, 605, DateTimeKind.Local), Text = "Tempora asperiores aut.", UserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567", WasRead = false },
                        new { Id = 34, ChatId = 26, CreatedAt = new DateTime(2018, 8, 9, 11, 33, 23, 393, DateTimeKind.Local), Text = "Esse quo magni excepturi aut sunt repellat consequatur molestias accusantium.", UserId = "8668b4f7-ba1a-464d-8b3a-3258ee90be2c", WasRead = true },
                        new { Id = 35, ChatId = 27, CreatedAt = new DateTime(2018, 8, 9, 1, 51, 0, 148, DateTimeKind.Local), Text = "Perferendis est provident.", UserId = "febeb402-29c2-411f-a6a6-4377e9b55835", WasRead = false },
                        new { Id = 36, ChatId = 27, CreatedAt = new DateTime(2018, 8, 9, 5, 28, 58, 546, DateTimeKind.Local), Text = "Praesentium facere et esse commodi quis et.", UserId = "b05710a2-28da-4da2-9acb-cd549be125ee", WasRead = true },
                        new { Id = 37, ChatId = 28, CreatedAt = new DateTime(2018, 8, 9, 11, 44, 47, 303, DateTimeKind.Local), Text = "Velit aut eius eos dolorem vitae voluptatem sint.", UserId = "ca404c18-30b5-4013-870a-3b985772b799", WasRead = false },
                        new { Id = 38, ChatId = 24, CreatedAt = new DateTime(2018, 8, 9, 6, 27, 58, 998, DateTimeKind.Local), Text = "Eveniet aspernatur sit dignissimos.", UserId = "8668b4f7-ba1a-464d-8b3a-3258ee90be2c", WasRead = false },
                        new { Id = 39, ChatId = 26, CreatedAt = new DateTime(2018, 8, 9, 12, 37, 59, 618, DateTimeKind.Local), Text = "Libero possimus ut sequi harum.", UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a", WasRead = false },
                        new { Id = 40, ChatId = 23, CreatedAt = new DateTime(2018, 8, 9, 3, 46, 59, 301, DateTimeKind.Local), Text = "Nemo esse nobis dolores iure qui.", UserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 8, 14, 37, 52, 574, DateTimeKind.Local), NotificationSettingId = 14, Text = "Ab molestiae nihil autem rerum nostrum ad.", UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 9, 12, 17, 11, 452, DateTimeKind.Local), NotificationSettingId = 17, Text = "Natus omnis nulla et unde expedita quo perferendis.", UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 9, 9, 57, 18, 307, DateTimeKind.Local), NotificationSettingId = 18, Text = "Sed ullam necessitatibus modi aspernatur voluptate accusantium error.", UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 9, 8, 33, 24, 617, DateTimeKind.Local), NotificationSettingId = 13, Text = "Est iure quo ducimus odit autem voluptate est aut praesentium.", UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 8, 14, 38, 7, 685, DateTimeKind.Local), NotificationSettingId = 12, Text = "Ex et dolorem quisquam nostrum error odio quod eius architecto.", UserId = "8668b4f7-ba1a-464d-8b3a-3258ee90be2c" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 9, 10, 37, 11, 576, DateTimeKind.Local), NotificationSettingId = 14, Text = "Necessitatibus dolor odio debitis temporibus et doloremque.", UserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 9, 0, 15, 20, 339, DateTimeKind.Local), NotificationSettingId = 15, Text = "Ullam in sint aut quod ab earum aut sequi illo.", UserId = "febeb402-29c2-411f-a6a6-4377e9b55835" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 9, 13, 37, 5, 218, DateTimeKind.Local), NotificationSettingId = 19, Text = "Velit sed doloremque dolorem voluptas qui.", UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 8, 19, 0, 4, 795, DateTimeKind.Local), NotificationSettingId = 20, Text = "Aut sit quis nesciunt ut repudiandae consectetur laborum omnis.", UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 9, 7, 25, 54, 976, DateTimeKind.Local), NotificationSettingId = 20, Text = "Itaque deleniti voluptatem ab inventore sit provident.", UserId = "febeb402-29c2-411f-a6a6-4377e9b55835" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a" },
                        new { Id = 12, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "be1d775a-e864-4389-a1de-b182cfb36d11" },
                        new { Id = 13, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "ca404c18-30b5-4013-870a-3b985772b799" },
                        new { Id = 14, IsDisable = false, IsEmailable = false, IsMute = true, Type = 0, UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" },
                        new { Id = 15, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "a869a697-3585-49ae-9745-77614d6c803a" },
                        new { Id = 16, IsDisable = true, IsEmailable = false, IsMute = true, Type = 1, UserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567" },
                        new { Id = 17, IsDisable = true, IsEmailable = false, IsMute = false, Type = 1, UserId = "b05710a2-28da-4da2-9acb-cd549be125ee" },
                        new { Id = 18, IsDisable = false, IsEmailable = true, IsMute = false, Type = 0, UserId = "febeb402-29c2-411f-a6a6-4377e9b55835" },
                        new { Id = 19, IsDisable = false, IsEmailable = false, IsMute = false, Type = 0, UserId = "a869a697-3585-49ae-9745-77614d6c803a" },
                        new { Id = 20, IsDisable = false, IsEmailable = false, IsMute = true, Type = 1, UserId = "8494cede-b032-4d27-9e14-76b53134d093" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "633.313.8643", CreatedByUserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567", Description = "Iste eum iste. Vitae nemo deleniti iusto ducimus sequi aperiam. Quia eius asperiores eius ea. Perferendis et voluptate accusamus dicta vel rerum.", Email = "Katelin80@gmail.com", IsActive = true, Name = "Company601", ThemeId = 64, WebSite = "http://rudolph.biz" },
                        new { Id = 72, ContactNumber = "1-877-441-9293 x6293", CreatedByUserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3", Description = "", Email = "Bernita.Corwin70@hotmail.com", IsActive = true, Name = "Company408", ThemeId = 67, WebSite = "https://vern.name" },
                        new { Id = 73, ContactNumber = "822-687-1461 x6666", CreatedByUserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567", Description = "Et cum eos. Laborum optio voluptatem aut numquam fuga rem voluptates ullam.", Email = "Delphine85@hotmail.com", IsActive = true, Name = "Company743", ThemeId = 63, WebSite = "http://ally.org" },
                        new { Id = 74, ContactNumber = "(910) 626-5998 x9100", CreatedByUserId = "07073d56-481a-4e97-9ae2-9ff377492a8a", Description = "Ab adipisci voluptatem enim consequuntur. Non incidunt laudantium sit sit earum voluptatem quos adipisci.", Email = "Isidro41@yahoo.com", IsActive = true, Name = "Company405", ThemeId = 66, WebSite = "http://cheyanne.biz" },
                        new { Id = 75, ContactNumber = "633-297-3289 x525", CreatedByUserId = "febeb402-29c2-411f-a6a6-4377e9b55835", Description = "Sint odio in ut qui id earum. Dicta ea asperiores et rerum qui laudantium. Qui vero dolores qui laboriosam accusantium autem delectus ut magni. Explicabo distinctio voluptate et ut asperiores culpa blanditiis esse qui.", Email = "Sanford_Cummerata@yahoo.com", IsActive = true, Name = "Company944", ThemeId = 65, WebSite = "http://elmira.org" },
                        new { Id = 76, ContactNumber = "1-412-286-6736 x8868", CreatedByUserId = "a869a697-3585-49ae-9745-77614d6c803a", Description = "", Email = "Daija.Balistreri47@yahoo.com", IsActive = true, Name = "Company828", ThemeId = 64, WebSite = "http://graham.com" },
                        new { Id = 77, ContactNumber = "946.766.1783 x57261", CreatedByUserId = "be1d775a-e864-4389-a1de-b182cfb36d11", Description = "", Email = "Jefferey.Hills@gmail.com", IsActive = true, Name = "Company367", ThemeId = 68, WebSite = "https://raheem.net" },
                        new { Id = 78, ContactNumber = "908-667-6212 x972", CreatedByUserId = "febeb402-29c2-411f-a6a6-4377e9b55835", Description = "Aut veniam nulla vero sed provident blanditiis aut ut animi. Et atque ut.", Email = "Shanon34@hotmail.com", IsActive = true, Name = "Company540", ThemeId = 67, WebSite = "https://danny.org" },
                        new { Id = 79, ContactNumber = "(654) 552-1201 x37954", CreatedByUserId = "febeb402-29c2-411f-a6a6-4377e9b55835", Description = "Cupiditate est sit ut et. Non cupiditate non est voluptatem voluptas reprehenderit aliquam. Cumque est saepe sed porro qui molestias est nostrum illo. Rem sunt velit laudantium ut.", Email = "Santiago_Senger@yahoo.com", IsActive = true, Name = "Company461", ThemeId = 67, WebSite = "https://selina.name" },
                        new { Id = 80, ContactNumber = "983-702-6901", CreatedByUserId = "07073d56-481a-4e97-9ae2-9ff377492a8a", Description = "", Email = "Emmalee_Wyman2@gmail.com", IsActive = true, Name = "Company613", ThemeId = 69, WebSite = "https://makayla.name" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 8, 21, 9, 15, 404, DateTimeKind.Local), FeedbackId = 47, Text = "Non architecto aperiam incidunt eaque voluptatum.", UserId = "febeb402-29c2-411f-a6a6-4377e9b55835" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 9, 1, 14, 11, 713, DateTimeKind.Local), FeedbackId = 45, Text = "Voluptas occaecati beatae laborum et ut architecto non earum.", UserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 8, 17, 19, 12, 505, DateTimeKind.Local), FeedbackId = 41, Text = "Nihil dolorum voluptatem reprehenderit ex sit.", UserId = "8494cede-b032-4d27-9e14-76b53134d093" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 9, 9, 44, 53, 129, DateTimeKind.Local), FeedbackId = 48, Text = "Eum autem natus consequatur voluptatum voluptate.", UserId = "8494cede-b032-4d27-9e14-76b53134d093" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 9, 7, 12, 56, 410, DateTimeKind.Local), FeedbackId = 49, Text = "Enim at iste modi voluptas.", UserId = "8494cede-b032-4d27-9e14-76b53134d093" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 9, 12, 5, 21, 233, DateTimeKind.Local), FeedbackId = 44, Text = "Qui dolores et.", UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 9, 13, 38, 27, 581, DateTimeKind.Local), FeedbackId = 43, Text = "Est dicta consequatur amet est distinctio ut.", UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 8, 20, 41, 36, 60, DateTimeKind.Local), FeedbackId = 41, Text = "Quaerat animi sed.", UserId = "febeb402-29c2-411f-a6a6-4377e9b55835" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 8, 23, 29, 17, 504, DateTimeKind.Local), FeedbackId = 41, Text = "Explicabo pariatur et eaque.", UserId = "8668b4f7-ba1a-464d-8b3a-3258ee90be2c" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 8, 21, 1, 23, 738, DateTimeKind.Local), FeedbackId = 49, Text = "Dicta labore ut.", UserId = "b05710a2-28da-4da2-9acb-cd549be125ee" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme677" },
                        new { Id = 62, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme796" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme587" },
                        new { Id = 64, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme246" },
                        new { Id = 65, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme77" },
                        new { Id = 66, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme567" },
                        new { Id = 67, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme458" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Trade", Name = "Theme573" },
                        new { Id = 69, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme966" },
                        new { Id = 70, BackgroundColor = "Gray", FontFamily = "Frutiger", Name = "Theme485" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<int>("RoleId");

                    b.Property<string>("SecondName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "8668b4f7-ba1a-464d-8b3a-3258ee90be2c", CreatedAt = new DateTime(2018, 8, 9, 7, 50, 32, 379, DateTimeKind.Local), DisplayName = "Shaniya", Email = "Camila_Von10@gmail.com", FirstName = "Darron", IsActive = true, RoleId = 2, SecondName = "Armstrong" },
                        new { Id = "8494cede-b032-4d27-9e14-76b53134d093", CreatedAt = new DateTime(2018, 8, 9, 11, 15, 52, 762, DateTimeKind.Local), DisplayName = "Tess", Email = "Kaitlin_Kulas@gmail.com", FirstName = "Justina", IsActive = true, RoleId = 2, SecondName = "Schmidt" },
                        new { Id = "b05710a2-28da-4da2-9acb-cd549be125ee", CreatedAt = new DateTime(2018, 8, 9, 10, 50, 29, 608, DateTimeKind.Local), DisplayName = "Fiona", Email = "Aaliyah.Kozey@gmail.com", FirstName = "Katrine", IsActive = true, RoleId = 2, SecondName = "Kassulke" },
                        new { Id = "febeb402-29c2-411f-a6a6-4377e9b55835", CreatedAt = new DateTime(2018, 8, 8, 23, 56, 33, 77, DateTimeKind.Local), DisplayName = "Lambert", Email = "Amanda_Bartoletti25@hotmail.com", FirstName = "Brooks", IsActive = true, RoleId = 2, SecondName = "Rice" },
                        new { Id = "a869a697-3585-49ae-9745-77614d6c803a", CreatedAt = new DateTime(2018, 8, 8, 17, 15, 52, 243, DateTimeKind.Local), DisplayName = "Sanford", Email = "Rafael15@gmail.com", FirstName = "Eulah", IsActive = true, RoleId = 2, SecondName = "McDermott" },
                        new { Id = "ca404c18-30b5-4013-870a-3b985772b799", CreatedAt = new DateTime(2018, 8, 9, 12, 25, 42, 165, DateTimeKind.Local), DisplayName = "Guy", Email = "Lafayette.Leffler44@hotmail.com", FirstName = "Albin", IsActive = true, RoleId = 1, SecondName = "MacGyver" },
                        new { Id = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3", CreatedAt = new DateTime(2018, 8, 9, 0, 59, 23, 937, DateTimeKind.Local), DisplayName = "Rashad", Email = "Cortez50@hotmail.com", FirstName = "Urban", IsActive = true, RoleId = 2, SecondName = "Herzog" },
                        new { Id = "be1d775a-e864-4389-a1de-b182cfb36d11", CreatedAt = new DateTime(2018, 8, 8, 19, 8, 46, 847, DateTimeKind.Local), DisplayName = "Claude", Email = "Rolando19@gmail.com", FirstName = "Delpha", IsActive = true, RoleId = 2, SecondName = "Legros" },
                        new { Id = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567", CreatedAt = new DateTime(2018, 8, 9, 2, 20, 29, 373, DateTimeKind.Local), DisplayName = "Felipa", Email = "Chadd45@gmail.com", FirstName = "Chloe", IsActive = true, RoleId = 1, SecondName = "Gleason" },
                        new { Id = "07073d56-481a-4e97-9ae2-9ff377492a8a", CreatedAt = new DateTime(2018, 8, 9, 0, 11, 38, 735, DateTimeKind.Local), DisplayName = "Josie", Email = "Giovani47@gmail.com", FirstName = "Muhammad", IsActive = true, RoleId = 2, SecondName = "Schumm" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "8668b4f7-ba1a-464d-8b3a-3258ee90be2c", OrganizationId = 75 },
                        new { UserId = "8494cede-b032-4d27-9e14-76b53134d093", OrganizationId = 76 },
                        new { UserId = "b05710a2-28da-4da2-9acb-cd549be125ee", OrganizationId = 73 },
                        new { UserId = "febeb402-29c2-411f-a6a6-4377e9b55835", OrganizationId = 79 },
                        new { UserId = "a869a697-3585-49ae-9745-77614d6c803a", OrganizationId = 79 },
                        new { UserId = "ca404c18-30b5-4013-870a-3b985772b799", OrganizationId = 71 },
                        new { UserId = "02fd40d4-7d38-402e-b77b-06d76ccdb5d3", OrganizationId = 79 },
                        new { UserId = "be1d775a-e864-4389-a1de-b182cfb36d11", OrganizationId = 78 },
                        new { UserId = "b0560ef3-3c5d-4f55-a63f-77a4b91a0567", OrganizationId = 77 },
                        new { UserId = "07073d56-481a-4e97-9ae2-9ff377492a8a", OrganizationId = 77 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Feedback", "Feedback")
                        .WithOne("Response")
                        .HasForeignKey("Watcher.DataAccess.Entities.Response", "FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
