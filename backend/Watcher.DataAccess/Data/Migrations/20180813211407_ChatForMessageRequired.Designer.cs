// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180813211407_ChatForMessageRequired")]
    partial class ChatForMessageRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DashboardId");

                    b.Property<string>("MostLoaded");

                    b.Property<string>("ShowCommon");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Threshold");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 101, DashboardId = 95, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 8, Type = 2 },
                        new { Id = 102, DashboardId = 91, MostLoaded = "MostLoaded2", ShowCommon = "Common3", Source = "Source3", Threshold = 18, Type = 1 },
                        new { Id = 103, DashboardId = 93, MostLoaded = "MostLoaded2", ShowCommon = "Common1", Source = "Source3", Threshold = 59, Type = 0 },
                        new { Id = 104, DashboardId = 98, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 0, Type = 1 },
                        new { Id = 105, DashboardId = 100, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source1", Threshold = 89, Type = 2 },
                        new { Id = 106, DashboardId = 100, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 0, Type = 0 },
                        new { Id = 107, DashboardId = 97, MostLoaded = "MostLoaded3", ShowCommon = "Common2", Source = "Source1", Threshold = 40, Type = 2 },
                        new { Id = 108, DashboardId = 95, MostLoaded = "MostLoaded3", ShowCommon = "Common1", Source = "Source2", Threshold = 45, Type = 2 },
                        new { Id = 109, DashboardId = 94, MostLoaded = "MostLoaded2", ShowCommon = "Common2", Source = "Source1", Threshold = 18, Type = 1 },
                        new { Id = 110, DashboardId = 99, MostLoaded = "MostLoaded1", ShowCommon = "Common3", Source = "Source3", Threshold = 54, Type = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "914d28ca-74fd-4004-8a3d-d2ff3640b6ad", Name = "adipisci", Type = 0 },
                        new { Id = 22, CreatedById = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441", Name = "assumenda", Type = 0 },
                        new { Id = 23, CreatedById = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441", Name = "dignissimos", Type = 0 },
                        new { Id = 24, CreatedById = "6932c7c0-3ad8-4c5f-8724-81e11290e682", Name = "et", Type = 0 },
                        new { Id = 25, CreatedById = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550", Name = "culpa", Type = 0 },
                        new { Id = 26, CreatedById = "e006ee95-72b3-4833-b5e3-2ece6aaf41d8", Name = "atque", Type = 0 },
                        new { Id = 27, CreatedById = "e006ee95-72b3-4833-b5e3-2ece6aaf41d8", Name = "quidem", Type = 0 },
                        new { Id = 28, CreatedById = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441", Name = "et", Type = 0 },
                        new { Id = 29, CreatedById = "95e7c831-ac94-4b80-a1e3-e3cba23b475c", Name = "minus", Type = 0 },
                        new { Id = 30, CreatedById = "b5a291b2-0388-4889-a80d-83ff74c8a91e", Name = "tempora", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 91, CreatedAt = new DateTime(2018, 8, 13, 21, 23, 17, 693, DateTimeKind.Local), InstanceId = 90, Title = "Title11" },
                        new { Id = 92, CreatedAt = new DateTime(2018, 8, 13, 2, 14, 24, 185, DateTimeKind.Local), InstanceId = 90, Title = "Title765" },
                        new { Id = 93, CreatedAt = new DateTime(2018, 8, 13, 3, 19, 1, 717, DateTimeKind.Local), InstanceId = 86, Title = "Title982" },
                        new { Id = 94, CreatedAt = new DateTime(2018, 8, 13, 5, 38, 16, 604, DateTimeKind.Local), InstanceId = 83, Title = "Title612" },
                        new { Id = 95, CreatedAt = new DateTime(2018, 8, 13, 5, 42, 11, 172, DateTimeKind.Local), InstanceId = 89, Title = "Title547" },
                        new { Id = 96, CreatedAt = new DateTime(2018, 8, 13, 6, 30, 3, 737, DateTimeKind.Local), InstanceId = 89, Title = "Title958" },
                        new { Id = 97, CreatedAt = new DateTime(2018, 8, 13, 11, 49, 56, 577, DateTimeKind.Local), InstanceId = 90, Title = "Title850" },
                        new { Id = 98, CreatedAt = new DateTime(2018, 8, 13, 12, 21, 37, 392, DateTimeKind.Local), InstanceId = 88, Title = "Title309" },
                        new { Id = 99, CreatedAt = new DateTime(2018, 8, 13, 23, 4, 20, 765, DateTimeKind.Local), InstanceId = 89, Title = "Title572" },
                        new { Id = 100, CreatedAt = new DateTime(2018, 8, 13, 8, 2, 56, 464, DateTimeKind.Local), InstanceId = 88, Title = "Title422" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 8, 13, 13, 23, 2, 89, DateTimeKind.Local), Text = "Adipisci nihil beatae rerum ut fuga.", UserId = "309927ed-5909-456b-96cb-5536bc2574f7" },
                        new { Id = 42, CreatedAt = new DateTime(2018, 8, 13, 15, 52, 33, 814, DateTimeKind.Local), Text = "Sed asperiores iusto.", UserId = "309927ed-5909-456b-96cb-5536bc2574f7" },
                        new { Id = 43, CreatedAt = new DateTime(2018, 8, 13, 19, 10, 4, 334, DateTimeKind.Local), Text = "Quia ea nihil blanditiis cumque reprehenderit eum laudantium.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" },
                        new { Id = 44, CreatedAt = new DateTime(2018, 8, 13, 20, 58, 10, 687, DateTimeKind.Local), Text = "Dolor distinctio voluptatibus voluptas possimus asperiores.", UserId = "e006ee95-72b3-4833-b5e3-2ece6aaf41d8" },
                        new { Id = 45, CreatedAt = new DateTime(2018, 8, 13, 21, 33, 8, 116, DateTimeKind.Local), Text = "Voluptate omnis facere error.", UserId = "309927ed-5909-456b-96cb-5536bc2574f7" },
                        new { Id = 46, CreatedAt = new DateTime(2018, 8, 13, 0, 50, 6, 626, DateTimeKind.Local), Text = "Modi rerum recusandae aut provident.", UserId = "914d28ca-74fd-4004-8a3d-d2ff3640b6ad" },
                        new { Id = 47, CreatedAt = new DateTime(2018, 8, 13, 22, 29, 51, 506, DateTimeKind.Local), Text = "Cumque magnam distinctio unde.", UserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682" },
                        new { Id = 48, CreatedAt = new DateTime(2018, 8, 13, 5, 15, 33, 589, DateTimeKind.Local), Text = "Et saepe fugiat nulla.", UserId = "95e7c831-ac94-4b80-a1e3-e3cba23b475c" },
                        new { Id = 49, CreatedAt = new DateTime(2018, 8, 13, 16, 31, 5, 865, DateTimeKind.Local), Text = "Dolor alias corporis suscipit labore.", UserId = "d2e9b146-bc8a-46d9-bfa9-57834c40ea8b" },
                        new { Id = 50, CreatedAt = new DateTime(2018, 8, 13, 21, 38, 51, 840, DateTimeKind.Local), Text = "Eos nisi tempora illo neque culpa minima.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 81, Address = "06:33:a4:c4:77:5d", OrganizationId = 75, Platform = "Windows" },
                        new { Id = 82, Address = "e2:96:8b:82:eb:17", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 83, Address = "bc:c0:26:27:de:9f", OrganizationId = 76, Platform = "Windows" },
                        new { Id = 84, Address = "b4:a0:d2:d4:8e:b5", OrganizationId = 80, Platform = "Windows" },
                        new { Id = 85, Address = "3d:08:45:33:de:f3", OrganizationId = 77, Platform = "Linux" },
                        new { Id = 86, Address = "22:21:f2:83:db:b1", OrganizationId = 77, Platform = "Linux" },
                        new { Id = 87, Address = "de:ca:4c:0c:b5:41", OrganizationId = 73, Platform = "Linux" },
                        new { Id = 88, Address = "a1:41:0f:d7:8a:96", OrganizationId = 75, Platform = "Windows" },
                        new { Id = 89, Address = "9f:e6:45:e2:d1:04", OrganizationId = 74, Platform = "Windows" },
                        new { Id = 90, Address = "22:65:05:bd:ac:0e", OrganizationId = 76, Platform = "Linux" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 28, CreatedAt = new DateTime(2018, 8, 13, 8, 41, 4, 172, DateTimeKind.Local), Text = "Quos ullam saepe mollitia.", UserId = "b5a291b2-0388-4889-a80d-83ff74c8a91e", WasRead = true },
                        new { Id = 32, ChatId = 26, CreatedAt = new DateTime(2018, 8, 13, 0, 22, 8, 584, DateTimeKind.Local), Text = "Reprehenderit est id aut et aperiam facere suscipit non dicta.", UserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682", WasRead = false },
                        new { Id = 33, ChatId = 21, CreatedAt = new DateTime(2018, 8, 13, 7, 17, 43, 455, DateTimeKind.Local), Text = "Libero porro assumenda ipsa aut veniam quia qui voluptatem.", UserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682", WasRead = true },
                        new { Id = 34, ChatId = 25, CreatedAt = new DateTime(2018, 8, 13, 4, 9, 39, 124, DateTimeKind.Local), Text = "Quam voluptatem voluptatem eius nihil.", UserId = "95e7c831-ac94-4b80-a1e3-e3cba23b475c", WasRead = false },
                        new { Id = 35, ChatId = 22, CreatedAt = new DateTime(2018, 8, 13, 7, 19, 35, 824, DateTimeKind.Local), Text = "Fugiat voluptatem qui eaque.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441", WasRead = true },
                        new { Id = 36, ChatId = 22, CreatedAt = new DateTime(2018, 8, 13, 19, 1, 16, 414, DateTimeKind.Local), Text = "Inventore non nemo debitis tempore at.", UserId = "95e7c831-ac94-4b80-a1e3-e3cba23b475c", WasRead = false },
                        new { Id = 37, ChatId = 23, CreatedAt = new DateTime(2018, 8, 13, 0, 16, 18, 531, DateTimeKind.Local), Text = "Numquam aut officiis aut odit qui dolorem est voluptas.", UserId = "8ba19cd3-676f-4085-a76e-f9cbce0b0e05", WasRead = false },
                        new { Id = 38, ChatId = 25, CreatedAt = new DateTime(2018, 8, 13, 4, 30, 42, 239, DateTimeKind.Local), Text = "Non expedita necessitatibus eos enim ipsam neque omnis.", UserId = "8ba19cd3-676f-4085-a76e-f9cbce0b0e05", WasRead = false },
                        new { Id = 39, ChatId = 29, CreatedAt = new DateTime(2018, 8, 13, 1, 59, 15, 603, DateTimeKind.Local), Text = "Voluptatum consequatur fugit et rerum eum.", UserId = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550", WasRead = false },
                        new { Id = 40, ChatId = 22, CreatedAt = new DateTime(2018, 8, 13, 8, 1, 31, 46, DateTimeKind.Local), Text = "Non voluptatem aut eum aut perspiciatis.", UserId = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("NotificationSettingId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 111, CreatedAt = new DateTime(2018, 8, 13, 2, 41, 53, 79, DateTimeKind.Local), NotificationSettingId = 16, Text = "Voluptas quae nihil qui omnis accusantium.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" },
                        new { Id = 112, CreatedAt = new DateTime(2018, 8, 13, 12, 7, 22, 812, DateTimeKind.Local), NotificationSettingId = 19, Text = "Est ullam impedit id ut dignissimos.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" },
                        new { Id = 113, CreatedAt = new DateTime(2018, 8, 13, 14, 18, 57, 975, DateTimeKind.Local), NotificationSettingId = 12, Text = "Deserunt id eum ea id.", UserId = "b5a291b2-0388-4889-a80d-83ff74c8a91e" },
                        new { Id = 114, CreatedAt = new DateTime(2018, 8, 13, 10, 16, 15, 285, DateTimeKind.Local), NotificationSettingId = 18, Text = "Libero mollitia debitis magni tenetur officiis.", UserId = "8ba19cd3-676f-4085-a76e-f9cbce0b0e05" },
                        new { Id = 115, CreatedAt = new DateTime(2018, 8, 13, 23, 52, 44, 192, DateTimeKind.Local), NotificationSettingId = 19, Text = "Quam molestiae nihil culpa.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" },
                        new { Id = 116, CreatedAt = new DateTime(2018, 8, 13, 8, 18, 47, 531, DateTimeKind.Local), NotificationSettingId = 18, Text = "Facere est quaerat dolorem iste sint deleniti vero odit.", UserId = "e006ee95-72b3-4833-b5e3-2ece6aaf41d8" },
                        new { Id = 117, CreatedAt = new DateTime(2018, 8, 13, 3, 49, 2, 3, DateTimeKind.Local), NotificationSettingId = 12, Text = "Commodi voluptas quas ut.", UserId = "d2e9b146-bc8a-46d9-bfa9-57834c40ea8b" },
                        new { Id = 118, CreatedAt = new DateTime(2018, 8, 13, 15, 25, 37, 202, DateTimeKind.Local), NotificationSettingId = 18, Text = "Qui nobis ipsam est est iusto in dolorem nesciunt.", UserId = "914d28ca-74fd-4004-8a3d-d2ff3640b6ad" },
                        new { Id = 119, CreatedAt = new DateTime(2018, 8, 13, 21, 58, 23, 280, DateTimeKind.Local), NotificationSettingId = 20, Text = "Voluptates cupiditate eius nulla ipsa a et.", UserId = "d2e9b146-bc8a-46d9-bfa9-57834c40ea8b" },
                        new { Id = 120, CreatedAt = new DateTime(2018, 8, 13, 20, 24, 50, 603, DateTimeKind.Local), NotificationSettingId = 17, Text = "Itaque architecto inventore.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "309927ed-5909-456b-96cb-5536bc2574f7" },
                        new { Id = 12, IsDisable = false, IsEmailable = true, IsMute = true, Type = 1, UserId = "8ba19cd3-676f-4085-a76e-f9cbce0b0e05" },
                        new { Id = 13, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550" },
                        new { Id = 14, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550" },
                        new { Id = 15, IsDisable = true, IsEmailable = false, IsMute = true, Type = 4, UserId = "914d28ca-74fd-4004-8a3d-d2ff3640b6ad" },
                        new { Id = 16, IsDisable = true, IsEmailable = true, IsMute = true, Type = 0, UserId = "95e7c831-ac94-4b80-a1e3-e3cba23b475c" },
                        new { Id = 17, IsDisable = true, IsEmailable = true, IsMute = false, Type = 4, UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" },
                        new { Id = 18, IsDisable = false, IsEmailable = true, IsMute = false, Type = 1, UserId = "e006ee95-72b3-4833-b5e3-2ece6aaf41d8" },
                        new { Id = 19, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" },
                        new { Id = 20, IsDisable = true, IsEmailable = false, IsMute = false, Type = 2, UserId = "b5a291b2-0388-4889-a80d-83ff74c8a91e" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 71, ContactNumber = "1-918-475-4409", CreatedByUserId = "e006ee95-72b3-4833-b5e3-2ece6aaf41d8", Description = "Similique cupiditate sunt culpa. Sint autem architecto totam eum omnis optio quia enim quas.", Email = "Nils_VonRueden@gmail.com", IsActive = true, Name = "Company161", ThemeId = 63, WebSite = "http://sedrick.org" },
                        new { Id = 72, ContactNumber = "356.837.2887 x34885", CreatedByUserId = "d2e9b146-bc8a-46d9-bfa9-57834c40ea8b", Description = "Et totam beatae iusto voluptatem enim. Est possimus similique est dolorem suscipit aut.", Email = "Jared_Zieme24@hotmail.com", IsActive = true, Name = "Company802", ThemeId = 66, WebSite = "https://clinton.net" },
                        new { Id = 73, ContactNumber = "312.638.1775 x95996", CreatedByUserId = "95e7c831-ac94-4b80-a1e3-e3cba23b475c", Description = "", Email = "Clementine_Zieme26@yahoo.com", IsActive = true, Name = "Company93", ThemeId = 67, WebSite = "http://elza.com" },
                        new { Id = 74, ContactNumber = "1-891-464-1447 x59985", CreatedByUserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682", Description = "Quia voluptatem modi nisi omnis excepturi omnis corrupti ipsam corporis.", Email = "Trey_Sawayn@hotmail.com", IsActive = true, Name = "Company551", ThemeId = 66, WebSite = "http://humberto.net" },
                        new { Id = 75, ContactNumber = "(780) 266-1229 x145", CreatedByUserId = "914d28ca-74fd-4004-8a3d-d2ff3640b6ad", Description = "Placeat amet optio. Dolor aliquid repudiandae dicta assumenda. Qui quia eveniet enim.", Email = "Filomena.Sawayn98@yahoo.com", IsActive = true, Name = "Company344", ThemeId = 67, WebSite = "http://genoveva.info" },
                        new { Id = 76, ContactNumber = "489.571.8576 x030", CreatedByUserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441", Description = "Aut officiis beatae rem numquam sapiente voluptates voluptas quia rerum. Repellat consequatur odit qui officiis expedita asperiores omnis facilis. Eveniet adipisci dolorem accusantium voluptatem id natus rerum. Eius tempore omnis eligendi ut et maxime neque.", Email = "Leilani_Parker@hotmail.com", IsActive = true, Name = "Company825", ThemeId = 67, WebSite = "https://lou.biz" },
                        new { Id = 77, ContactNumber = "412-426-2412 x335", CreatedByUserId = "95e7c831-ac94-4b80-a1e3-e3cba23b475c", Description = "Eius cum similique officia. Quos voluptatem neque. Et ex quia rerum pariatur.", Email = "Antonina50@yahoo.com", IsActive = true, Name = "Company359", ThemeId = 64, WebSite = "http://everett.net" },
                        new { Id = 78, ContactNumber = "1-806-594-7988 x7692", CreatedByUserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682", Description = "", Email = "Stanley.Hegmann@gmail.com", IsActive = true, Name = "Company215", ThemeId = 67, WebSite = "http://cielo.info" },
                        new { Id = 79, ContactNumber = "446-372-7293 x7086", CreatedByUserId = "309927ed-5909-456b-96cb-5536bc2574f7", Description = "Blanditiis consequatur animi amet nihil est. Harum consequuntur quia aut voluptatum debitis.", Email = "Lavada.Pagac24@yahoo.com", IsActive = true, Name = "Company849", ThemeId = 67, WebSite = "http://odessa.net" },
                        new { Id = 80, ContactNumber = "782-579-4679 x1695", CreatedByUserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682", Description = "Quas et eos exercitationem in excepturi porro vitae sed. Consequuntur eum aut ea quia perspiciatis quibusdam. Alias aperiam et.", Email = "Katrina.Muller@yahoo.com", IsActive = true, Name = "Company635", ThemeId = 65, WebSite = "http://anastasia.info" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 8, 13, 7, 45, 43, 909, DateTimeKind.Local), FeedbackId = 48, Text = "Nostrum voluptas veritatis molestias suscipit officia earum ea dolorem.", UserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 8, 13, 10, 16, 51, 636, DateTimeKind.Local), FeedbackId = 48, Text = "Nobis eum recusandae odit recusandae.", UserId = "8ba19cd3-676f-4085-a76e-f9cbce0b0e05" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 8, 13, 16, 36, 27, 58, DateTimeKind.Local), FeedbackId = 41, Text = "Ducimus aspernatur reprehenderit.", UserId = "914d28ca-74fd-4004-8a3d-d2ff3640b6ad" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 8, 13, 17, 41, 38, 773, DateTimeKind.Local), FeedbackId = 48, Text = "Distinctio officia temporibus molestiae eaque et quod tempora.", UserId = "b5a291b2-0388-4889-a80d-83ff74c8a91e" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 8, 13, 11, 12, 37, 997, DateTimeKind.Local), FeedbackId = 43, Text = "Debitis sequi dicta maxime magni architecto.", UserId = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 8, 13, 1, 2, 7, 115, DateTimeKind.Local), FeedbackId = 41, Text = "Ut non impedit quasi labore ipsam.", UserId = "8ba19cd3-676f-4085-a76e-f9cbce0b0e05" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 8, 13, 4, 55, 21, 682, DateTimeKind.Local), FeedbackId = 42, Text = "Molestiae impedit molestias aspernatur architecto.", UserId = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 8, 13, 3, 22, 33, 383, DateTimeKind.Local), FeedbackId = 49, Text = "Impedit fugiat ut.", UserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 8, 13, 18, 59, 19, 758, DateTimeKind.Local), FeedbackId = 43, Text = "Commodi aliquid voluptatem et omnis autem nihil amet et quaerat.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 8, 13, 8, 43, 43, 756, DateTimeKind.Local), FeedbackId = 47, Text = "Quaerat nesciunt est dignissimos totam ipsum.", UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "Admin" },
                        new { Id = 2, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SampleField");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("FontFamily");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 61, BackgroundColor = "Gray", FontFamily = "Helvetica", Name = "Theme325" },
                        new { Id = 62, BackgroundColor = "White", FontFamily = "Frutiger", Name = "Theme521" },
                        new { Id = 63, BackgroundColor = "Gray", FontFamily = "Trade", Name = "Theme903" },
                        new { Id = 64, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme613" },
                        new { Id = 65, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme130" },
                        new { Id = 66, BackgroundColor = "White", FontFamily = "Trade", Name = "Theme811" },
                        new { Id = 67, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme668" },
                        new { Id = 68, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme425" },
                        new { Id = 69, BackgroundColor = "Yellow", FontFamily = "Univers", Name = "Theme374" },
                        new { Id = 70, BackgroundColor = "Yellow", FontFamily = "Frutiger", Name = "Theme417" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "e006ee95-72b3-4833-b5e3-2ece6aaf41d8", CreatedAt = new DateTime(2018, 8, 13, 1, 19, 24, 624, DateTimeKind.Local), DisplayName = "Madge", Email = "Selmer22@hotmail.com", FirstName = "Malvina", IsActive = true, LastName = "Runolfsdottir", RoleId = 2 },
                        new { Id = "8ba19cd3-676f-4085-a76e-f9cbce0b0e05", CreatedAt = new DateTime(2018, 8, 13, 10, 5, 14, 586, DateTimeKind.Local), DisplayName = "Letitia", Email = "Kenyatta73@gmail.com", FirstName = "Carrie", IsActive = true, LastName = "Stokes", RoleId = 2 },
                        new { Id = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550", CreatedAt = new DateTime(2018, 8, 14, 0, 10, 21, 526, DateTimeKind.Local), DisplayName = "Roberta", Email = "Krystina_Gleichner@gmail.com", FirstName = "Vinnie", IsActive = true, LastName = "Kemmer", RoleId = 1 },
                        new { Id = "914d28ca-74fd-4004-8a3d-d2ff3640b6ad", CreatedAt = new DateTime(2018, 8, 13, 12, 2, 46, 326, DateTimeKind.Local), DisplayName = "Stacey", Email = "Fidel_Bergnaum@gmail.com", FirstName = "Chasity", IsActive = true, LastName = "Stracke", RoleId = 1 },
                        new { Id = "309927ed-5909-456b-96cb-5536bc2574f7", CreatedAt = new DateTime(2018, 8, 13, 14, 33, 59, 895, DateTimeKind.Local), DisplayName = "Heaven", Email = "Karley.Schaefer75@gmail.com", FirstName = "Mac", IsActive = true, LastName = "Bartoletti", RoleId = 2 },
                        new { Id = "95e7c831-ac94-4b80-a1e3-e3cba23b475c", CreatedAt = new DateTime(2018, 8, 13, 9, 40, 2, 634, DateTimeKind.Local), DisplayName = "Emie", Email = "Darien.Waters@gmail.com", FirstName = "Althea", IsActive = true, LastName = "Stanton", RoleId = 2 },
                        new { Id = "b5a291b2-0388-4889-a80d-83ff74c8a91e", CreatedAt = new DateTime(2018, 8, 13, 12, 10, 8, 424, DateTimeKind.Local), DisplayName = "Nikko", Email = "Elijah_Willms@yahoo.com", FirstName = "Cali", IsActive = true, LastName = "Emmerich", RoleId = 2 },
                        new { Id = "d2e9b146-bc8a-46d9-bfa9-57834c40ea8b", CreatedAt = new DateTime(2018, 8, 13, 5, 5, 58, 89, DateTimeKind.Local), DisplayName = "Judd", Email = "Tommie_Armstrong@gmail.com", FirstName = "Gwendolyn", IsActive = true, LastName = "Farrell", RoleId = 1 },
                        new { Id = "6932c7c0-3ad8-4c5f-8724-81e11290e682", CreatedAt = new DateTime(2018, 8, 13, 21, 17, 21, 45, DateTimeKind.Local), DisplayName = "Lawrence", Email = "Brian.Ankunding@yahoo.com", FirstName = "Erin", IsActive = true, LastName = "Cartwright", RoleId = 1 },
                        new { Id = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441", CreatedAt = new DateTime(2018, 8, 13, 18, 20, 1, 843, DateTimeKind.Local), DisplayName = "Stephania", Email = "Jimmie_Schultz@gmail.com", FirstName = "Allan", IsActive = true, LastName = "Goodwin", RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "e006ee95-72b3-4833-b5e3-2ece6aaf41d8", OrganizationId = 72 },
                        new { UserId = "8ba19cd3-676f-4085-a76e-f9cbce0b0e05", OrganizationId = 73 },
                        new { UserId = "e89f95c8-f4d9-4ad0-8d95-18bb4e9c5550", OrganizationId = 77 },
                        new { UserId = "914d28ca-74fd-4004-8a3d-d2ff3640b6ad", OrganizationId = 71 },
                        new { UserId = "309927ed-5909-456b-96cb-5536bc2574f7", OrganizationId = 71 },
                        new { UserId = "95e7c831-ac94-4b80-a1e3-e3cba23b475c", OrganizationId = 79 },
                        new { UserId = "b5a291b2-0388-4889-a80d-83ff74c8a91e", OrganizationId = 79 },
                        new { UserId = "d2e9b146-bc8a-46d9-bfa9-57834c40ea8b", OrganizationId = 71 },
                        new { UserId = "6932c7c0-3ad8-4c5f-8724-81e11290e682", OrganizationId = 78 },
                        new { UserId = "bbaa7dbf-dca5-4a9c-aea7-f01a3a8c6441", OrganizationId = 75 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
